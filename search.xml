<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[分布式理论总结]]></title>
      <url>http://amao12580.github.io/post/2016/05/Summary-of-distributed-theory/</url>
      <content type="html"><![CDATA[<h1 id="软件系统的本质是什么？"><a href="#软件系统的本质是什么？" class="headerlink" title="软件系统的本质是什么？"></a>软件系统的本质是什么？</h1><p>软件是现实的抽象，讨论抽象的本质是困难的，让我们一起在现实中思考。小到一支笔，大到一部汽车，这些产品使我们在现实生活中得到了方便。我们说的方便，是指因为使用了这些产品，降低了成本，提高了效率。在没有笔的时代，想要记录信息需要岩画，篆刻，这是困难的，高成本的，效率也很低。同样的，没有车的时代，想要到达另一个城市，会因为天气被迫中途搁置，相应的通行时间也会比现在长得多。进一步的思考，笔与汽车的共同点又在哪里呢？</p>
<p>通过以上的思考，可以概括地说，笔与汽车，这些产品是为了满足人们的各类需求而发明的。即，人们因为现实需要，而发明或改进了产品，产品是为了帮助人们更好的生活而存在。同样的，软件系统也是如此，比如人们出于沟通交流需求，发明了电话拨号系统；因为信息交流的多样化、随时随地，发明了各种IM产品。</p>
<p>软件系统是依托于人们现实需求而存在，用以辅助人们更好的生活，它是现实世界在虚拟世界的抽象。同样的软件系统也存在着兴衰淘汰，一款软件刚问世时，受欢迎程度总是处于低谷，存在现实世界对其接受适应的时间窗口，到了逐渐闻名，达到了火热状态，此时依托此软件又会催生出许多子软件链（如chromium的众多壳浏览器）。随着技术革新，软件产业也会更新换代，跟不上时代的软件系统会逐渐退出市场（如vista操作系统的短命）。</p>
<h1 id="传统软件的局限性"><a href="#传统软件的局限性" class="headerlink" title="传统软件的局限性"></a>传统软件的局限性</h1><h2 id="停不下来的运动员"><a href="#停不下来的运动员" class="headerlink" title="停不下来的运动员"></a>停不下来的运动员</h2><p>在软件系统的发展初期，适用面狭窄，功能单一、用户少、价值不够高，造成对软件研发的不重视，成本投入较低，相应的软件所带来的经济收益也是有限的。此时的软件系统往往谈不上架构，往往是一个软件系统承载了所有功能，单个功能模块没有边界，逻辑分散，而各个功能模块之间的耦合关系是散乱的。</p>
<p>在软件系统有机会成长起来后，带来了一定的经济收益，我们会思考软件的功能增多，更适应于用户（市场需要），或者考虑增强原有用户的黏性，此时会对软件系统提出更多的要求。而初期散乱的功能模块的堆叠，对软件的可扩展性带来了巨大的麻烦，紧耦合的架构带来了牵一发而动全身的问题，新功能的增加往往意味着巨大的改造成本。</p>
<p>集中式的软件系统还对系统重构带来挑战，随着功能需求越来越频繁的提出，往往意味着需要更短的版本迭代周期。现有系统无法适应低时间成本的灵活扩展，往往意味着需要对整个软件系统进行重构，而等到软件散乱性的膨胀到一定程度，重构几乎变成不可完成的任务，就算是系统起始负责人，也无法评估重构带来的风险与收益究竟谁更多。</p>
<p>集中式的软件系统在生命的后期，开发团队往往面临两难，团队任何人都知道急需重构，但因为开发团队往往没有决策权，最高决策领导也往往兼顾到市场利益，而不可能给出重构所需的时间窗口。在愈发杂乱的系统上进行维护和新功能叠加，这让团队内的每个人都需要指数级的投入成本，往往还达不到市场需要的软件质量。</p>
<p>这就像只能跑一公里的运动员，在一公里的极限跑步后，本应停下来适度休息，自我调整。而由于上层裁判的压力，运动员只能咬牙坚持，但迈出的每一步都越来越累，没法再像刚开始那样保持加速度。更令人担忧的是，此时裁判还吹响了冲刺哨，要求运动员进行冲锋。这样下去，运动员只有倒下了。相应的到此时，团队内的成员会加速流失，新招进来的人也不能理解整套系统的运作，从而导致最终的系统失败。</p>
<p>这也就是为什么公司的CTO必需对技术团队保持深入理解，同时还应有对需求开发的决策权，以支持技术团队在适时进行系统级别的重构，以更好的满足公司的战略需求，这是非常有必要的。</p>
<h2 id="转向敏捷式-agile-开发"><a href="#转向敏捷式-agile-开发" class="headerlink" title="转向敏捷式(agile)开发"></a>转向敏捷式(agile)开发</h2><p>重构更多的是对软件的可维护性和可扩展性进行提高，无法完成重构的软件，往往都逃不过被淘汰的命运。何时适宜进行重构，需要考量的因素有三个：成本、收益、风险。其中风险是最为重要的，如果系统不进行重构，在未来可能带来巨大的问题，如不能适应分布式部署。此时就有必要进行重构了，重构的同时还需要考虑完成重构需要的成本，包括时间成本、人力成本，团队往往时刻肩负着新功能的开发和旧功能的维护工作，如何在不多的时间和人力中挤出资源呢？</p>
<p>在软件系统有机会从集中式软件模式，过渡到积木型的软件模式后。系统原有是100%的功能堆叠到一个系统，现在变成了多个积木，也就是软件子系统，每个积木只负责其中的部分功能，积木间的协作，从而拼装出完整的软件系统。</p>
<p>这是一个巨大的转变，首当其冲的就是可维护性，只需要定义一套灵活的通信协议，子系统之间通过这套协议进行通讯，我们在对子系统内部的功能进行维护时，不必担忧其他子系统受到干扰。这也存在一个前提，能够封装在一个子系统的功能模块集合，必须是内聚型的，它们几乎很少对外层子系统产生耦合，或者通过统一的出口进行耦合关联。</p>
<p>其次是软件的可扩展性，新功能的开发，只需要新加一个子系统，扩展通讯协议，就可以满足要求，这对团队内的任何一个人都是令人振奋的。</p>
<p>同时，软件的质量可以得到保证，测试部门可以明确的针对某个软件子系统进行测试，而不需要每次系统上线都进行整体测试，工作量的降低，在相等的时间内，有了更多的时间进行问题修复，这往往意味着质量的提高。</p>
<p>积木性的软件，是对积木之间的通讯协议的高要求，实际上，我们需要引入一整套消息通讯的中间件来解决这个问题，在SOA和EDA架构中，最为关键的就是MQ协议的设计了。</p>
<p>松耦合的系统还带来局部失败和最终一致性的问题，可能会给用户造成短时间迷惑，但不影响最终的数据状态统一，这在传统软件往往是不可接受的，但进入到互联网后，在系统层面往往需要进行权衡，是市场机遇重要？还是少部分的用户利益重要？这个问题需要每一个互联网人的思考，产品是不是要满足每一个人的要求呢？</p>
<h1 id="分布式系统的利与弊"><a href="#分布式系统的利与弊" class="headerlink" title="分布式系统的利与弊"></a>分布式系统的利与弊</h1><p>单点服务向多点服务的转变</p>
<p>原因：<br>性能要求，多节点同时参与服务(按流量权重分发，负载均衡；按读写流量分发，读写分离)。<br>允许少部分节点失败，更可靠的运行。</p>
<p>数据存储跨机分片，同时每片在多机存在复制集。计算资源无状态，本身就可以动态管理。便捷的扩容缩容(伸缩性)。</p>
<p>因业务分拆，降低耦合粒度，降低系统扩展成本(可扩展性)，更高的可维护性。</p>
<p>带来的问题。<br>系统内部改造，支持多节点转变。</p>
<p>分布式事务，事务补偿。</p>
<p>分布式存储</p>
<p>分布式访问</p>
<p>容忍最终一致性。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[软件重构经验总结]]></title>
      <url>http://amao12580.github.io/post/2016/05/Software-refactoring-experience-summary/</url>
      <content type="html"><![CDATA[<h1 id="先了解"><a href="#先了解" class="headerlink" title="先了解"></a>先了解</h1><h2 id="了解中发现问题症结"><a href="#了解中发现问题症结" class="headerlink" title="了解中发现问题症结"></a>了解中发现问题症结</h2><h2 id="了解中思考解决方案"><a href="#了解中思考解决方案" class="headerlink" title="了解中思考解决方案"></a>了解中思考解决方案</h2><h2 id="选取合适的解决方案"><a href="#选取合适的解决方案" class="headerlink" title="选取合适的解决方案"></a>选取合适的解决方案</h2><h2 id="保留可扩展性"><a href="#保留可扩展性" class="headerlink" title="保留可扩展性"></a>保留可扩展性</h2><h2 id="保留可维护性"><a href="#保留可维护性" class="headerlink" title="保留可维护性"></a>保留可维护性</h2><h1 id="再动手"><a href="#再动手" class="headerlink" title="再动手"></a>再动手</h1><h2 id="重构方案的评审"><a href="#重构方案的评审" class="headerlink" title="重构方案的评审"></a>重构方案的评审</h2><h2 id="理清方案的优势与不足"><a href="#理清方案的优势与不足" class="headerlink" title="理清方案的优势与不足"></a>理清方案的优势与不足</h2><h2 id="资源预先到位"><a href="#资源预先到位" class="headerlink" title="资源预先到位"></a>资源预先到位</h2><p>包括重构的时间争取，参与人员配比，对其他软硬件资源、中间件的预研。</p>
<h2 id="重构前后的效果量化"><a href="#重构前后的效果量化" class="headerlink" title="重构前后的效果量化"></a>重构前后的效果量化</h2><h2 id="充分的测试"><a href="#充分的测试" class="headerlink" title="充分的测试"></a>充分的测试</h2><p>基础方面的重构，需要充分的测试</p>
<h1 id="方案上线"><a href="#方案上线" class="headerlink" title="方案上线"></a>方案上线</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[技术架构规范总结]]></title>
      <url>http://amao12580.github.io/post/2016/05/Technical-architecture-specification-summary/</url>
      <content type="html"><![CDATA[<h1 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h1><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><h3 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a>重要性</h3><h3 id="如何做？"><a href="#如何做？" class="headerlink" title="如何做？"></a>如何做？</h3><h3 id="约定优于配置"><a href="#约定优于配置" class="headerlink" title="约定优于配置"></a>约定优于配置</h3><h2 id="合理的设计"><a href="#合理的设计" class="headerlink" title="合理的设计"></a>合理的设计</h2><h3 id="适时分层"><a href="#适时分层" class="headerlink" title="适时分层"></a>适时分层</h3><h3 id="避免过度设计"><a href="#避免过度设计" class="headerlink" title="避免过度设计"></a>避免过度设计</h3><h3 id="模块化设计"><a href="#模块化设计" class="headerlink" title="模块化设计"></a>模块化设计</h3><p>模块化设计在重构时，可以将影响降到最低。达到低风险、低成本。<br>模块化设计对系统快速构建是一个阻碍，它要求将可预见的同类型代码复用，内聚到一个模块中。</p>
<h2 id="前轻后重"><a href="#前轻后重" class="headerlink" title="前轻后重"></a>前轻后重</h2><p>系统之间的调用链，前置系统轻逻辑。</p>
<h3 id="上轻下重，核心逻辑内敛"><a href="#上轻下重，核心逻辑内敛" class="headerlink" title="上轻下重，核心逻辑内敛"></a>上轻下重，核心逻辑内敛</h3><p>模块之间的调用链，上层模块轻逻辑</p>
<h2 id="基础优先"><a href="#基础优先" class="headerlink" title="基础优先"></a>基础优先</h2><p>在构建软件时，保持基础组件优先稳定下来，定义好对外接口，并保留可扩展性。<br>例如安全性设计，在后期加比在前期加的成本高很多。</p>
<h2 id="最小冗余"><a href="#最小冗余" class="headerlink" title="最小冗余"></a>最小冗余</h2><h3 id="代码保持最少行数"><a href="#代码保持最少行数" class="headerlink" title="代码保持最少行数"></a>代码保持最少行数</h3><p>1.少一行代码，就少了一个潜在的bug<br>2.行数少了，往往意味着重用性高了</p>
<h2 id="保持简单"><a href="#保持简单" class="headerlink" title="保持简单"></a>保持简单</h2><h3 id="简单意味着快速"><a href="#简单意味着快速" class="headerlink" title="简单意味着快速"></a>简单意味着快速</h3><h3 id="简单意味着灵活"><a href="#简单意味着灵活" class="headerlink" title="简单意味着灵活"></a>简单意味着灵活</h3><h3 id="简单意味着易扩展"><a href="#简单意味着易扩展" class="headerlink" title="简单意味着易扩展"></a>简单意味着易扩展</h3><h3 id="简单意味着易重构"><a href="#简单意味着易重构" class="headerlink" title="简单意味着易重构"></a>简单意味着易重构</h3><h2 id="Fast-fail"><a href="#Fast-fail" class="headerlink" title="Fast fail"></a>Fast fail</h2><h2 id="代码即文档"><a href="#代码即文档" class="headerlink" title="代码即文档"></a>代码即文档</h2><h3 id="合理的注释"><a href="#合理的注释" class="headerlink" title="合理的注释"></a>合理的注释</h3><h2 id="关键业务设计宣讲"><a href="#关键业务设计宣讲" class="headerlink" title="关键业务设计宣讲"></a>关键业务设计宣讲</h2><h3 id="保持一致的看法"><a href="#保持一致的看法" class="headerlink" title="保持一致的看法"></a>保持一致的看法</h3><h2 id="小步快走"><a href="#小步快走" class="headerlink" title="小步快走"></a>小步快走</h2><h3 id="意味着版本迭代快速"><a href="#意味着版本迭代快速" class="headerlink" title="意味着版本迭代快速"></a>意味着版本迭代快速</h3><h3 id="意味着版本迭代稳定"><a href="#意味着版本迭代稳定" class="headerlink" title="意味着版本迭代稳定"></a>意味着版本迭代稳定</h3><h3 id="意味着部署回滚成本低"><a href="#意味着部署回滚成本低" class="headerlink" title="意味着部署回滚成本低"></a>意味着部署回滚成本低</h3><h1 id="重构与优化"><a href="#重构与优化" class="headerlink" title="重构与优化"></a>重构与优化</h1><h2 id="紧急优先"><a href="#紧急优先" class="headerlink" title="紧急优先"></a>紧急优先</h2><p>优先对紧急需要改进的部分进行重构</p>
<h2 id="计划性的重构"><a href="#计划性的重构" class="headerlink" title="计划性的重构"></a>计划性的重构</h2><p>在敏捷开发时，往往时间不够，有些模块只能以非优雅的方式构建。但是需要在这些模块加上TODO以免重构时遗忘。</p>
<h2 id="时机"><a href="#时机" class="headerlink" title="时机"></a>时机</h2><p>团队一致认为模块维护成本高昂时，果断重构。</p>
<h2 id="基于成本的优化"><a href="#基于成本的优化" class="headerlink" title="基于成本的优化"></a>基于成本的优化</h2><h2 id="数据支撑"><a href="#数据支撑" class="headerlink" title="数据支撑"></a>数据支撑</h2><p>给出重构前后的成本与收益报告</p>
<h2 id="持续性"><a href="#持续性" class="headerlink" title="持续性"></a>持续性</h2><p>在时间不够或时机不成熟时，分阶段的进行</p>
<h1 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h1><h2 id="开源优先"><a href="#开源优先" class="headerlink" title="开源优先"></a>开源优先</h2><h2 id="稳定优先"><a href="#稳定优先" class="headerlink" title="稳定优先"></a>稳定优先</h2><h2 id="掌控度高优先"><a href="#掌控度高优先" class="headerlink" title="掌控度高优先"></a>掌控度高优先</h2><h2 id="保留备选项"><a href="#保留备选项" class="headerlink" title="保留备选项"></a>保留备选项</h2><h2 id="只有合适的技术，没有最好的技术。"><a href="#只有合适的技术，没有最好的技术。" class="headerlink" title="只有合适的技术，没有最好的技术。"></a>只有合适的技术，没有最好的技术。</h2><h2 id="避免一招鲜吃遍天"><a href="#避免一招鲜吃遍天" class="headerlink" title="避免一招鲜吃遍天"></a>避免一招鲜吃遍天</h2><p>手里有锤子，看到什么都觉得像钉子</p>
<h2 id="技术升级"><a href="#技术升级" class="headerlink" title="技术升级"></a>技术升级</h2><p>系统容量与性能指标的要求，在业务发展的各个阶段是不固定的，技术需要保留一定前瞻性，不做被动跟随。</p>
<h1 id="团队管理"><a href="#团队管理" class="headerlink" title="团队管理"></a>团队管理</h1><h2 id="keep-watch"><a href="#keep-watch" class="headerlink" title="keep watch"></a>keep watch</h2><p>工作与心理的交流分享</p>
<h2 id="保持信任"><a href="#保持信任" class="headerlink" title="保持信任"></a>保持信任</h2><h2 id="保持怀疑"><a href="#保持怀疑" class="headerlink" title="保持怀疑"></a>保持怀疑</h2><h2 id="持续考评"><a href="#持续考评" class="headerlink" title="持续考评"></a>持续考评</h2><h2 id="分享中提高"><a href="#分享中提高" class="headerlink" title="分享中提高"></a>分享中提高</h2><h2 id="互相备份"><a href="#互相备份" class="headerlink" title="互相备份"></a>互相备份</h2><h2 id="互相支撑"><a href="#互相支撑" class="headerlink" title="互相支撑"></a>互相支撑</h2><h2 id="向上管理"><a href="#向上管理" class="headerlink" title="向上管理"></a>向上管理</h2><h2 id="向下管理"><a href="#向下管理" class="headerlink" title="向下管理"></a>向下管理</h2><h3 id="了解队员的擅长与不足"><a href="#了解队员的擅长与不足" class="headerlink" title="了解队员的擅长与不足"></a>了解队员的擅长与不足</h3><h3 id="合理的任务分配"><a href="#合理的任务分配" class="headerlink" title="合理的任务分配"></a>合理的任务分配</h3><h3 id="适度挑战性的任务"><a href="#适度挑战性的任务" class="headerlink" title="适度挑战性的任务"></a>适度挑战性的任务</h3><h3 id="给出完成任务需要的资源"><a href="#给出完成任务需要的资源" class="headerlink" title="给出完成任务需要的资源"></a>给出完成任务需要的资源</h3><h3 id="激励中成长"><a href="#激励中成长" class="headerlink" title="激励中成长"></a>激励中成长</h3><p>眼前利益与发展前景</p>
<h3 id="给出职业发展的机会"><a href="#给出职业发展的机会" class="headerlink" title="给出职业发展的机会"></a>给出职业发展的机会</h3><h3 id="公开与公平中考评"><a href="#公开与公平中考评" class="headerlink" title="公开与公平中考评"></a>公开与公平中考评</h3><h3 id="保持团队稳定"><a href="#保持团队稳定" class="headerlink" title="保持团队稳定"></a>保持团队稳定</h3><p>团队成员的诉求：团队，产品，薪资，发展。</p>
<p>团队提供集体成长的氛围环境。</p>
<p>令人兴奋的产品，提供持续打磨的动力。</p>
<p>合适的薪资，使个人不过多为生活所扰。</p>
<p>良好的发展前景，对个人的职业生涯带来腾飞。</p>
<h2 id="适时剔除不合格"><a href="#适时剔除不合格" class="headerlink" title="适时剔除不合格"></a>适时剔除不合格</h2><h2 id="技术梯队"><a href="#技术梯队" class="headerlink" title="技术梯队"></a>技术梯队</h2><p>不同层次的人员配比，完成不同类型的任务。注意人员的上升下降渠道。</p>
<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><p>访问权限的验证</p>
<h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><p>拒绝恶意访问</p>
<h2 id="审查与监控"><a href="#审查与监控" class="headerlink" title="审查与监控"></a>审查与监控</h2><h2 id="灰度发布"><a href="#灰度发布" class="headerlink" title="灰度发布"></a>灰度发布</h2><h2 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h2><h2 id="原子化"><a href="#原子化" class="headerlink" title="原子化"></a>原子化</h2><h2 id="CQRS"><a href="#CQRS" class="headerlink" title="CQRS"></a>CQRS</h2><p>命令查询职责分离模式，读不强依赖写。</p>
<h1 id="APP-Client"><a href="#APP-Client" class="headerlink" title="APP(Client)"></a>APP(Client)</h1><h2 id="远程控制权"><a href="#远程控制权" class="headerlink" title="远程控制权"></a>远程控制权</h2><h2 id="展示为主"><a href="#展示为主" class="headerlink" title="展示为主"></a>展示为主</h2><h2 id="少的逻辑"><a href="#少的逻辑" class="headerlink" title="少的逻辑"></a>少的逻辑</h2><h2 id="适度安全"><a href="#适度安全" class="headerlink" title="适度安全"></a>适度安全</h2><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><h2 id="降低升级时间窗"><a href="#降低升级时间窗" class="headerlink" title="降低升级时间窗"></a>降低升级时间窗</h2><h2 id="没有人需要等待"><a href="#没有人需要等待" class="headerlink" title="没有人需要等待"></a>没有人需要等待</h2><p>正式发布后，对于任何用户都是公平使用的。不需要牺牲部分用户利益。<br>常见于缓存autowarm时需要阻塞第一批到达的用户。</p>
<h2 id="提前消除隐患"><a href="#提前消除隐患" class="headerlink" title="提前消除隐患"></a>提前消除隐患</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx与Docker容器系列 <02:在生产环境的实践>]]></title>
      <url>http://amao12580.github.io/post/2016/04/Nginx-with-docker-part-two/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文中的配置文件，已经整理到了GitHub：<a href="https://github.com/amao12580/docker" target="_blank" rel="external">https://github.com/amao12580/docker</a></p>
<p>本文假设读者对Nginx、Docker已经有了比较深入的了解，并掌握了docker-compose工具的使用。</p>
<h2 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h2><p>Nginx是一款面向性能设计的HTTP服务器，相较于Apache、lighttpd具有占有内存少，稳定性高等优势。与旧版本（&lt;=2.2）的Apache不同，nginx不采用每客户机一线程的设计模型，而是充分使用异步逻辑，削减了上下文调度开销，所以并发服务能力更强。整体采用模块化设计，有丰富的模块库和第三方模块库，配置灵活。 在Linux操作系统下，nginx使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。nginx同时是一个高性能的 HTTP 和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。Nginx 已经因为它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名了。</p>
<h2 id="可扩展"><a href="#可扩展" class="headerlink" title="可扩展"></a>可扩展</h2><p>Nginx属于典型的微内核设计，其内核非常简洁和优雅，同时具有非常高的可扩展性。</p>
<p>Nginx是纯C语言的实现，其可扩展性在于其模块化的设计。目前，Nginx已经有很多的第三方模块，大大扩展了自身的功能。nginx_lua_module可以将Lua语言嵌入到Nginx配置中，从而利用Lua极大增强了Nginx本身的编程能力，甚至可以不用配合其它脚本语言（如PHP或Python等），只靠Nginx本身就可以实现复杂业务的处理。</p>
<ul>
<li>–with-http_realip_module        #获取真实IP模块</li>
<li>–with-http_sub_module           #修改原始请求URI模块</li>
<li>–with-http_flv_module           #对flv流媒体播放提供支持</li>
<li>–with-http_dav_module           #启用对<a href="https://idoseek.com/1800" target="_blank" rel="external">WebDav协议</a>的支持</li>
<li>–with-http_gzip_static_module   #开启GZIP压缩，可以直接压缩html等静态资源。*.gz</li>
<li>–with-http_stub_status_module   #提供对nginx自身状态的监控功能</li>
<li>–with-http_addition_module      #过滤器模块， 在response数据的前/后添加文本</li>
<li>–with-pcre=                     #正则表达式解析支持，支持Rewrite重写规则</li>
<li>–with-openssl=                  #(part 1) HTTPS访问支持，需同时配合公钥和CA证书</li>
<li>–with-http_ssl_module           #(part 2) HTTPS访问支持，需同时配合公钥和CA证书</li>
<li>–with-zlib=                     #gzip模块需要 zlib 库</li>
<li>–add-module=/patch/nginx_upstream_check_module   #对后端服务器提供主动健康检查，自动failover</li>
</ul>
<p>这些模块，都是基于nginx源码编译安装并显式配置，才会生效，这要求我们的docker FROM镜像，需要支持C编译器环境。</p>
<h3 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h3><p>OpenResty 的目标是让你的Web服务直接跑在 Nginx 服务内部，充分利用 Nginx 的非阻塞 I/O 模型，不仅仅对 HTTP 客户端请求,甚至于对远程后端诸如 MySQL、PostgreSQL、Memcached 以及 Redis 等都进行一致的高性能响应。</p>
<p>Example:利用OpenResty的可编程特性，结合Redis，实现实时统计网站的PV、UV的功能，非常的简单。</p>
<p>不局限于Redis等,甚至于Kafka也可以，只要SDK提供对Lua语言的支持即可，简直是运维的春天</p>
<h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>动静分离，是指响应内容的动与静，分为动态计算的响应内容与静态不变的响应内容。如订单总数量计算是一个动态的，而网页logo图片是一个静态的。前者一般需要访问应用服务器，由程序来计算，而后者一般只需要nginx自身来处理。</p>
<p>利用nginx提供的静态资源压缩传输、静态资源内存级缓存，我们可以将html文件、css文件、js文件等资源直接放在nginx所在的主机硬盘中，由nginx代理这些文件的get操作。</p>
<p>受nginx代理的静态资源文件，应该具备如下特征：1.文件内容几乎不变化，如注册用户使用协议html，2.文件体积小，减轻压缩时对cpu的波动，以及缓存在内存的资源占用，3.文件属于热访问文件，比如Angular框架下的js文件。</p>
<p>多个nginx节点，可以共享这些静态文件，利用网络磁盘共享技术，甚至可以在部署在多个物理机的nginx节点下进行共享。</p>
<p>我们将可以直接将所有静态资源，按类型，放到文件夹：nginx/html/或nginx/static/下，这是立即生效的，不需要重启nginx。</p>
<h2 id="后端版本热升级"><a href="#后端版本热升级" class="headerlink" title="后端版本热升级"></a>后端版本热升级</h2><h3 id="兼容式热升级"><a href="#兼容式热升级" class="headerlink" title="兼容式热升级"></a>兼容式热升级</h3><p>对于nginx后端部署的应用程序，需要进行版本升级时，我们可以这样做。</p>
<ul>
<li><p>1.前提假定</p>
</li>
<li><p>1.1假设应用程序的新版本接口，是100%兼容旧版本的，即任何旧版本客户端在调用旧版本应用程序与新版本应用程序是无区别的，包括请求内容和响应内容。</p>
</li>
<li><p>1.2假设nginx.conf中，upstream段，定义了3个tomcat服务器（A\B\C）。此时2个tomcat服务器运行着同一版本（即旧版本）的应用程序。</p>
</li>
</ul>
<ul>
<li><p>2.升级步骤</p>
</li>
<li><p>2.1选择在系统平峰期进行，避免流量冲击。</p>
</li>
<li><p>2.2正常关闭A tomcat，在合理配置nginx的前提下，nginx监测到A机crash，此时会将流量转移到B\C。若使用平均流量权重，此时若B\C 2个机器的流量会各升高50%。</p>
</li>
<li><p>2.3执行A tomcat的升级。</p>
</li>
<li><p>2.4启动A tomcat，nginx监测到A机up，会将流量重新分配，此时各节点的流量恢复正常态。</p>
</li>
<li><p>2.5依照以上步骤，再升级B\C节点。</p>
</li>
</ul>
<p>整个过程不需要重启nginx，这意味着对外服务不需要中断。新版本可能存在不稳定，需要回退到旧版本，也是类似与以上步骤执行。</p>
<h3 id="非兼容式热升级"><a href="#非兼容式热升级" class="headerlink" title="非兼容式热升级"></a>非兼容式热升级</h3><p>非兼容式升级，是指新版本应用程序，对客户端的版本的要求比旧版本应用程序要高。例如客户端版本为1.0，旧版本应用程序为1.5，新版本应用程序为1.6。假定1.6版本对1.0版本的客户端不再提供支持，而1.5版本是可以支持1.0版本的客户端的。<br>而1.5与1.6版本的客户端访问入口，都在同一个nginx的同一个端口。</p>
<ul>
<li><p>1.避免同时支持多个版本的客户端，需要有客户端强制升级的方案。</p>
</li>
<li><p>2.客户端与应用程序通讯，需要定义一个客户端当前版本号，且该数据需要支持被nginx解析到。</p>
</li>
<li><p>3.修改nginx配置，定义2个server节点，每个节点按照不同客户端版本路由到对应的后端应用程序中，即有一个客户端版本与后端应用程序版本的对照表。</p>
</li>
<li><p>4.nginx做一下热加载nginx.conf，在下文中有提及。</p>
</li>
</ul>
<p>这种方案对于后端应用程序开发最为友好，只需要有不同分支版本进行并行维护即可，比如tag/V1.5/code、tag/V1.6/code，2个版本公有的bug修复时，需要做一个互相merge.</p>
<h2 id="自身热升级"><a href="#自身热升级" class="headerlink" title="自身热升级"></a>自身热升级</h2><p>Nginx自身的热升级，是指对Nginx进行模块维护或版本维护。</p>
<p>Nginx主进程在启动完成后会进入等待状态，负责响应各类系统消息，如SIGCHLD、SIGHUP、SIGUSR2等。</p>
<ul>
<li>TERM, INT: 立刻退出</li>
<li>QUIT: 等待工作进程结束后再退出</li>
<li>KILL: 强制终止进程</li>
<li>HUP: 重新加载配置文件，使用新的配置启动工作进程，并逐步关闭旧进程。</li>
<li>USR1: 重新打开日志文件</li>
<li>USR2: 启动新的主进程，实现热升级</li>
<li>WINCH: 逐步关闭工作进程</li>
</ul>
<p>在docker容器内热升级nginx的步骤：</p>
<ul>
<li>1.向主进程发送USR2信号，Nginx会启动一个新版本的master进程和工作进程，和旧版一起处理请求</li>
</ul>
<p>docker kill –signal=”USR2” <nginx container="" name="" or="" id=""></nginx></p>
<ul>
<li>2.向原Nginx主进程发送WINCH信号，它会逐步关闭旗下的工作进程（主进程不退出），这时所有请求都会由新版Nginx处理</li>
</ul>
<p>docker kill –signal=”WINCH” <nginx container="" name="" or="" id=""></nginx></p>
<ul>
<li>3.如果这时需要回退，可向原Nginx主进程发送HUP信号，它会重新启动工作进程， 仍使用旧版配置文件 。尔后可以将新版Nginx进程杀死（使用QUIT、TERM、或者KILL）</li>
</ul>
<p>docker kill –signal=”TERM” <nginx container="" name="" or="" id=""></nginx></p>
<h2 id="热加载nginx-conf"><a href="#热加载nginx-conf" class="headerlink" title="热加载nginx.conf"></a>热加载nginx.conf</h2><p>我们知道在upstream定义的tomcat节点，是属于文件性配置，如果需要上线新加节点，需要修改nginx.conf，然后需要重启Nginx读取新配置。如何热加载nginx.conf 而不需重启nginx？</p>
<p>docker exec -i -t <nginx container="" name="" or="" id=""> ./usr/local/nginx/sbin/nginx -s reload</nginx></p>
<h2 id="高可用方案"><a href="#高可用方案" class="headerlink" title="高可用方案"></a>高可用方案</h2><p>使用Keepalived在多个nginx节点之间做互为主备配置，配置略过。</p>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>对后端tomcat的负载均衡，使用upstream，配置权重和max_fails等参数即可</p>
<h1 id="设定负载均衡方式：RR模式"><a href="#设定负载均衡方式：RR模式" class="headerlink" title="设定负载均衡方式：RR模式"></a>设定负载均衡方式：RR模式</h1><pre><code>upstream  xws  {
    server 192.168.1.188:6080 weight=1 max_fails=5 fail_timeout=10s ;
    server 192.168.1.188:7080 weight=1 max_fails=5 fail_timeout=10s ;
    check interval=3000 rise=2 fall=5 timeout=1000 type=http;
}
</code></pre><h2 id="对后端的健康管理"><a href="#对后端的健康管理" class="headerlink" title="对后端的健康管理"></a>对后端的健康管理</h2><p>使用nginx_upstream_check_module功能增强补丁</p>
<p>配置location,开放后端tomcat的健康状况访问。</p>
<p><a href="http://your" target="_blank" rel="external">http://your</a> maintenance IP and Port/xw_TomcatStatus/</p>
<h2 id="自身的运行监控"><a href="#自身的运行监控" class="headerlink" title="自身的运行监控"></a>自身的运行监控</h2><p>监控Nginx：<a href="http://your" target="_blank" rel="external">http://your</a> maintenance IP and Port/xw_NginxStatus/</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><p>软件架构模式：<a href="http://colobu.com/2015/04/08/software-architecture-patterns/" target="_blank" rel="external">http://colobu.com/2015/04/08/software-architecture-patterns/</a></p>
</li>
<li><p>Nginx简介：<a href="http://www.rowkey.me/blog/2014/08/27/nginx-loabbalance/" target="_blank" rel="external">http://www.rowkey.me/blog/2014/08/27/nginx-loabbalance/</a></p>
</li>
<li><p>OpenResty + Redis 实时计算统计Web服务的UV &amp; PV ：<a href="http://www.wtoutiao.com/p/109IT70.html" target="_blank" rel="external">http://www.wtoutiao.com/p/109IT70.html</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx与Docker容器系列 <01:进行编译安装>]]></title>
      <url>http://amao12580.github.io/post/2016/04/Nginx-with-docker-part-one/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Docker容器的出现，为应用运行环境一致性带来了很好的解决方案。同时也带来了远比虚拟机更好的体验，提供资源隔离(Linux namespace)和资源分配(Linux control group)的功能、应用可扩展性的功能，但是更加轻量级的运行。为了解决多容器的依赖性和互相调用，提供了docker-compose等工具进行容器编排。</p>
<p>我们项目中，对docker的使用非常深入，在线上环境和线下的测试环境、开发环境，都使用了docker作为运行时环境一致性支持。由于linux的发行版本和内核版本的不同组合，在没有docker之前，DevOps很难为不同的运行环境编写统一的软件安装维护的脚本，几乎只能借助虚拟机来达到这一目的，虚拟机的笨重和可调度性差，扩容与缩容也无法做到快速有效，已经被逐渐淘汰。</p>
<p>Nginx，性能已经毋庸置疑，但在docker hub上的nginx镜像，并不适合我们，没有对安全进行加固，更多的没有加入重要的功能增加，比如主动式地对后端Tomcat进行健康检查并自动failover，这个动能对HA的非常重要的，因此我们选择了在docker环境下，对官方nginx源码进行编译，并打上补丁，以符合实际生产环境的使用。</p>
<p>本文中的配置文件，已经整理到了GitHub：<a href="https://github.com/amao12580/docker" target="_blank" rel="external">https://github.com/amao12580/docker</a></p>
<p>本文假设读者对Nginx、Docker已经有了比较深入的了解，并掌握了docker-compose工具的使用。</p>
<h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><h2 id="宿主机的情况"><a href="#宿主机的情况" class="headerlink" title="宿主机的情况"></a>宿主机的情况</h2><h3 id="操作系统和硬件"><a href="#操作系统和硬件" class="headerlink" title="操作系统和硬件"></a>操作系统和硬件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">操作系统</span><br><span class="line">root@ubuntu-14:~/docker/test# uname -a</span><br><span class="line">Linux ubuntu-14 4.2.0-35-generic #40~14.04.1-Ubuntu SMP Fri Mar 18 16:37:35 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line"></span><br><span class="line">CPU</span><br><span class="line">root@ubuntu-14:~/docker/test# lscpu</span><br><span class="line">Architecture:          x86_64</span><br><span class="line">CPU op-mode(s):        32-bit, 64-bit</span><br><span class="line">Byte Order:            Little Endian</span><br><span class="line">CPU(s):                4</span><br><span class="line">On-line CPU(s) list:   0-3</span><br><span class="line">Thread(s) per core:    1</span><br><span class="line">Core(s) per socket:    4</span><br><span class="line">Socket(s):             1</span><br><span class="line">NUMA node(s):          1</span><br><span class="line">Vendor ID:             GenuineIntel</span><br><span class="line">CPU family:            6</span><br><span class="line">Model:                 58</span><br><span class="line">Stepping:              9</span><br><span class="line">CPU MHz:               1600.125</span><br><span class="line">BogoMIPS:              6385.87</span><br><span class="line">Virtualization:        VT-x</span><br><span class="line">L1d cache:             32K</span><br><span class="line">L1i cache:             32K</span><br><span class="line">L2 cache:              256K</span><br><span class="line">L3 cache:              6144K</span><br><span class="line"></span><br><span class="line">Memory</span><br><span class="line">root@ubuntu-14:~/docker/test# free -m</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:          7881       4751       3130          1        419       3810</span><br><span class="line">-/+ buffers/cache:        520       7360</span><br><span class="line">Swap:         8087          0       8087</span><br></pre></td></tr></table></figure>
<h3 id="docker运行时环境"><a href="#docker运行时环境" class="headerlink" title="docker运行时环境"></a>docker运行时环境</h3><p>如果你不知道如何安装docker，请参考我对此的收集：<a href="http://amao12580.github.io/index/">http://amao12580.github.io/index/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-14:~/docker/test# docker-compose version</span><br><span class="line">docker-compose version 1.7.0, build 0d7bf73</span><br><span class="line">docker-py version: 1.8.0</span><br><span class="line">CPython version: 2.7.9</span><br><span class="line">OpenSSL version: OpenSSL 1.0.1e 11 Feb 2013</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@ubuntu-14:~/docker/test# docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:      1.9.1</span><br><span class="line"> API version:  1.21</span><br><span class="line"> Go version:   go1.4.3</span><br><span class="line"> Git commit:   a34a1d5</span><br><span class="line"> Built:        Fri Nov 20 17:56:04 UTC 2015</span><br><span class="line"> OS/Arch:      linux/amd64</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Version:      1.9.1</span><br><span class="line"> API version:  1.21</span><br><span class="line"> Go version:   go1.4.3</span><br><span class="line"> Git commit:   a34a1d5</span><br><span class="line"> Built:        Fri Nov 20 17:56:04 UTC 2015</span><br><span class="line"> OS/Arch:      linux/amd64</span><br></pre></td></tr></table></figure></p>
<h1 id="FROM-centos-6-7"><a href="#FROM-centos-6-7" class="headerlink" title="FROM centos:6.7"></a>FROM centos:6.7</h1><p>我的目录结构看起来是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-14:~# pwd</span><br><span class="line">/root</span><br><span class="line">root@ubuntu-14:~# tree</span><br><span class="line">.</span><br><span class="line">└── docker</span><br><span class="line">    └── test</span><br><span class="line">        ├── docker-compose.yml</span><br><span class="line">        └── nginx</span><br><span class="line">            ├── conf</span><br><span class="line">            │   └── nginx.conf</span><br><span class="line">            ├── Dockerfile</span><br><span class="line">            ├── html</span><br><span class="line">            │   └── test_xw.html</span><br><span class="line">            ├── logs</span><br><span class="line">            │   ├── error.log</span><br><span class="line">            │   ├── nginx.pid</span><br><span class="line">            │   └── xws.access.log</span><br><span class="line">            ├── ssl</span><br><span class="line">            │   ├── www.xw18.cn.crt(已经移除，涉及到机密)</span><br><span class="line">            │   └── www.xw18.cn.key(已经移除，涉及到机密)</span><br><span class="line">            └── static</span><br><span class="line">                ├── apk</span><br><span class="line">                ├── css</span><br><span class="line">                ├── img</span><br><span class="line">                │   └── photo.jpg</span><br><span class="line">                └── js</span><br><span class="line"></span><br><span class="line">12 directories, 10 files</span><br></pre></td></tr></table></figure></p>
<p>想要在shell中打印文件目录结构，请安装“tree”：aptitude install -y tree<br>请确保你的当前用户对这些目录具备必要的权限，下面一起看看docker-compose.yml文件吧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-14:~/docker/test# cat docker-compose.yml</span><br><span class="line">nginx:</span><br><span class="line">  build: ./nginx</span><br><span class="line">  mem_limit: 4294967296</span><br><span class="line">  cpu_shares: 2</span><br><span class="line">  ports:</span><br><span class="line">    - &quot;80:80&quot;</span><br><span class="line">    - &quot;443:443&quot;</span><br><span class="line">  volumes:</span><br><span class="line">    - ./nginx/conf/nginx.conf:/usr/local/nginx/conf/nginx.conf</span><br><span class="line">    - ./nginx/html:/usr/local/nginx/html</span><br><span class="line">    - ./nginx/static:/usr/local/nginx/static</span><br><span class="line">    - ./nginx/ssl:/usr/local/nginx/ssl</span><br><span class="line">    - ./nginx/logs:/usr/local/nginx/logs:rw</span><br></pre></td></tr></table></figure>
<p>是不是看起来很简单呢？因为我们在docker-compose里定义的是服务的运行环境要求，并没有定义如何构建这个服务。</p>
<p>想看如何构建nginx,那一起来看看Dockerfile文件吧，这个文件就是如何一步步的构建服务的，如果有合适的image，你可以在Dockerfile里定义执行任何可以在宿主机环境下执行的命令哦。是不是很magic呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-14:~/docker/test/nginx# cat Dockerfile</span><br><span class="line">#定义基础镜像</span><br><span class="line">FROM centos:6.7</span><br><span class="line"></span><br><span class="line">#定义nginx版本</span><br><span class="line">ENV NGINX_VERSION 1.9.14</span><br><span class="line"></span><br><span class="line">#准备安装环境</span><br><span class="line">RUN yum install -y wget &amp;&amp; \</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo  &amp;&amp; \</span><br><span class="line">yum clean all  &amp;&amp; \</span><br><span class="line">yum makecache &amp;&amp; \</span><br><span class="line"></span><br><span class="line">#安装依赖组件</span><br><span class="line">rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-* &amp;&amp; \</span><br><span class="line">yum install -y epel-release &amp;&amp; \</span><br><span class="line">rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6 &amp;&amp; \</span><br><span class="line">yum install -y patch pcre-devel openssl-devel zlib-devel gd-devel tar gcc git supervisor &amp;&amp; \</span><br><span class="line"></span><br><span class="line">#下载安装包和补丁</span><br><span class="line">mkdir -p /var/run/nginx/ &amp;&amp; \</span><br><span class="line">wget -c http://nginx.org/download/nginx-$&#123;NGINX_VERSION&#125;.tar.gz &amp;&amp; \</span><br><span class="line">git clone https://github.com/cuber/ngx_http_google_filter_module.git &amp;&amp; \</span><br><span class="line">git clone https://github.com/yaoweibin/ngx_http_substitutions_filter_module.git &amp;&amp; \</span><br><span class="line">git clone https://github.com/aperezdc/ngx-fancyindex.git &amp;&amp; \</span><br><span class="line">git clone https://github.com/yaoweibin/nginx_upstream_check_module.git &amp;&amp; \</span><br><span class="line"></span><br><span class="line">#进行编译安装，同时打上补丁</span><br><span class="line">tar xf nginx-$&#123;NGINX_VERSION&#125;.tar.gz &amp;&amp; \</span><br><span class="line">cd nginx-$&#123;NGINX_VERSION&#125; &amp;&amp; \</span><br><span class="line">cd src/ &amp;&amp; \</span><br><span class="line">#打补丁</span><br><span class="line">patch -p1 &lt; /nginx_upstream_check_module/check_1.9.2+.patch &amp;&amp; \</span><br><span class="line">cd .. &amp;&amp; \</span><br><span class="line">#去除nginx的对外版本号</span><br><span class="line">sed -i -e &apos;s/$&#123;NGINX_VERSION&#125;//g&apos; -e &apos;s/nginx\//ERROR/g&apos; -e &apos;s/&quot;NGINX&quot;/&quot;ERROR&quot;/g&apos; src/core/nginx.h  &amp;&amp; \</span><br><span class="line">./configure --prefix=/usr/local/nginx \</span><br><span class="line">--with-pcre \</span><br><span class="line">--with-ipv6 \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_flv_module \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-http_realip_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_mp4_module \</span><br><span class="line">--with-http_image_filter_module \</span><br><span class="line">--with-http_addition_module \</span><br><span class="line">--with-http_sub_module  \</span><br><span class="line">--with-http_dav_module  \</span><br><span class="line">--http-client-body-temp-path=/usr/local/nginx/client/ \</span><br><span class="line">--http-proxy-temp-path=/usr/local/nginx/proxy/ \</span><br><span class="line">--http-fastcgi-temp-path=/usr/local/nginx/fcgi/ \</span><br><span class="line">--http-uwsgi-temp-path=/usr/local/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/usr/local/nginx/scgi \</span><br><span class="line">--add-module=../ngx_http_google_filter_module \</span><br><span class="line">--add-module=../ngx_http_substitutions_filter_module \</span><br><span class="line">--add-module=../ngx-fancyindex \</span><br><span class="line">--add-module=../nginx_upstream_check_module &amp;&amp; \</span><br><span class="line">#开始编译</span><br><span class="line">make -j $(awk &apos;/processor/&#123;i++&#125;END&#123;print i&#125;&apos; /proc/cpuinfo) &amp;&amp; make install &amp;&amp; \</span><br><span class="line">#设置一些工作目录</span><br><span class="line">mkdir -p /usr/local/nginx/cache/ &amp;&amp; \</span><br><span class="line">mkdir -p /usr/local/nginx/temp/ &amp;&amp; \</span><br><span class="line">rm -rf ../&#123;ngx*,nginx*&#125; &amp;&amp; \</span><br><span class="line">yum clean packages</span><br><span class="line"></span><br><span class="line">#启动nginx，保留一个前台进程，以免被docker强制退出</span><br><span class="line">CMD ./usr/local/nginx/sbin/nginx &amp;&amp; tail -f /usr/local/nginx/logs/error.log</span><br></pre></td></tr></table></figure></p>
<p>是不是感觉内容太多了呢？每一步都有说明的，为了节省磁盘空间，我们将很多命令聚合到了一起。<br>事实上确实减少了一部分的磁盘占用，我们来看看现在build出来的镜像有多大吧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-14:~/docker/test# pwd</span><br><span class="line">/root/docker/test</span><br><span class="line">root@ubuntu-14:~/docker/test# ls</span><br><span class="line">docker-compose.yml  nginx</span><br><span class="line"></span><br><span class="line">这里开始进行构建、启动并在后台保持运行</span><br><span class="line">root@ubuntu-14:~/docker/test# docker-compose up -d nginx</span><br><span class="line">后面的内容实在是太多了，就不贴出来了。如果你的网络环境很差，这个过程会很漫长。</span><br><span class="line"></span><br><span class="line">已经成功运行了，test一下</span><br><span class="line">root@ubuntu-14:~/docker/test# curl http://192.168.2.200/test_xw.html</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World! xw.&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;这是测试内容.&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">容器运行后，nginx会处于listener状态，我们来看看images有多大</span><br><span class="line">root@ubuntu-14:~/docker/test# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">test_nginx          latest              e50ecf326484        2 hours ago         986.3 MB</span><br></pre></td></tr></table></figure></p>
<p>将近1个GB了，虽然说可以使用docker export -gzip 来压缩，并结合docker import命令直接导入，但是这个体积还是太肥大了，不利于轻量化运行和传播，我们来想想办法来减减肥吧。</p>
<h1 id="FROM-alpine-3-3"><a href="#FROM-alpine-3-3" class="headerlink" title="FROM alpine:3.3"></a>FROM alpine:3.3</h1><p>Alpine Linux，一个只有5M的Docker镜像。</p>
<p>Alpine Linux Docker镜像基于Alpine Linux操作系统，后者是一个面向安全的轻型Linux发行版。不同于通常Linux发行版，Alpine Linux采用了musl libc和busybox以减小系统的体积和运行时资源消耗。在保持瘦身的同时，Alpine Linux还提供了自己的包管理工具apk，可以在其网站上查询，或者直接通过apk命令查询和安装。</p>
<p>Alpine Linux Docker镜像也继承了Alpine Linux发行版的这些优势。相比于其他Docker镜像，它的容量非常小，仅仅只有5M，且拥有非常友好的包管理器。</p>
<p>可以直接使用的DockerFile：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">#说明：因为我所在的网络环境非常差，所以将很多需要下载的Step单独用RUN定义了，以免每次网络连不上而重复下载。如果你的网络环境OK，可以考虑合并多个RUN,以进一步减少imags的大小</span><br><span class="line"></span><br><span class="line">#定义基础镜像</span><br><span class="line">FROM alpine:latest</span><br><span class="line"></span><br><span class="line">#定义nginx版本</span><br><span class="line">ENV NGINX_VERSION 1.9.14</span><br><span class="line"></span><br><span class="line">#将安装源切换为国内环境(中国科学技术大学)，大大加快了安装速度，同时稳定性也有了保障</span><br><span class="line">ENV MIRROR_URL http://mirrors.ustc.edu.cn/alpine/</span><br><span class="line"></span><br><span class="line">ENV MIRROR_URL_BACKUP http://alpine.gliderlabs.com/alpine/</span><br><span class="line"></span><br><span class="line">ENV MIRROR_URL_SLOWEST http://dl-cdn.alpinelinux.org/alpine/</span><br><span class="line"></span><br><span class="line">#准备安装环境</span><br><span class="line">RUN echo &apos;&apos; &gt; /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    echo &quot;$&#123;MIRROR_URL&#125;v3.3//main&quot;     &gt;&gt; /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    echo &quot;$&#123;MIRROR_URL&#125;v3.3//community&quot; &gt;&gt; /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    echo &apos;185.31.17.249 github.com&apos; &gt;&gt; /etc/hosts &amp;&amp; \</span><br><span class="line">    echo &apos;202.141.160.110 mirrors.ustc.edu.cn&apos; &gt;&gt; /etc/hosts &amp;&amp; \</span><br><span class="line">    echo &apos;206.251.255.63 nginx.org&apos; &gt;&gt; /etc/hosts</span><br><span class="line"></span><br><span class="line">#安装必要的组件(如果发生  ERROR: Service &apos;nginx&apos; failed to build: The command &apos;/bin/sh -c apk add... returned a non-zero code: 12。  这是网络问题：请删干净未完成container和images，10分钟后再来一遍)</span><br><span class="line">RUN apk add --no-cache --virtual .build-deps \</span><br><span class="line">    gcc \</span><br><span class="line">    libc-dev \</span><br><span class="line">    make \</span><br><span class="line">    openssl-dev \</span><br><span class="line">    pcre-dev \</span><br><span class="line">    zlib-dev \</span><br><span class="line">    linux-headers \</span><br><span class="line">    curl \</span><br><span class="line">    jemalloc-dev \</span><br><span class="line">    gd-dev \</span><br><span class="line">    git</span><br><span class="line">#下载安装包和补丁</span><br><span class="line">RUN mkdir -p /var/run/nginx/</span><br><span class="line">RUN wget -c http://nginx.org/download/nginx-$&#123;NGINX_VERSION&#125;.tar.gz</span><br><span class="line">RUN git clone https://github.com/cuber/ngx_http_google_filter_module.git</span><br><span class="line">RUN git clone https://github.com/yaoweibin/ngx_http_substitutions_filter_module.git</span><br><span class="line">RUN git clone https://github.com/aperezdc/ngx-fancyindex.git</span><br><span class="line">RUN git clone https://github.com/yaoweibin/nginx_upstream_check_module.git</span><br><span class="line"></span><br><span class="line">#进行编译安装，同时打上补丁</span><br><span class="line">RUN tar -xzvf nginx-$&#123;NGINX_VERSION&#125;.tar.gz &amp;&amp; \</span><br><span class="line">cd nginx-$&#123;NGINX_VERSION&#125; &amp;&amp; \</span><br><span class="line">cd src/ &amp;&amp; \</span><br><span class="line">#打补丁</span><br><span class="line">patch -p1 &lt; /nginx_upstream_check_module/check_1.9.2+.patch &amp;&amp; \</span><br><span class="line">cd .. &amp;&amp; \</span><br><span class="line">#去除nginx的对外版本号</span><br><span class="line">sed -i -e &apos;s/$&#123;NGINX_VERSION&#125;//g&apos; -e &apos;s/nginx\//ERROR/g&apos; -e &apos;s/&quot;NGINX&quot;/&quot;ERROR&quot;/g&apos; src/core/nginx.h  &amp;&amp; \</span><br><span class="line">./configure --prefix=/usr/local/nginx \</span><br><span class="line">--with-pcre \</span><br><span class="line">--with-ipv6 \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_flv_module \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-http_realip_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_mp4_module \</span><br><span class="line">--with-http_image_filter_module \</span><br><span class="line">--with-http_addition_module \</span><br><span class="line">--with-http_sub_module  \</span><br><span class="line">--with-http_dav_module  \</span><br><span class="line">--http-client-body-temp-path=/usr/local/nginx/client/ \</span><br><span class="line">--http-proxy-temp-path=/usr/local/nginx/proxy/ \</span><br><span class="line">--http-fastcgi-temp-path=/usr/local/nginx/fcgi/ \</span><br><span class="line">--http-uwsgi-temp-path=/usr/local/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/usr/local/nginx/scgi \</span><br><span class="line">--add-module=../ngx_http_google_filter_module \</span><br><span class="line">--add-module=../ngx_http_substitutions_filter_module \</span><br><span class="line">--add-module=../ngx-fancyindex \</span><br><span class="line">--add-module=../nginx_upstream_check_module \</span><br><span class="line">--with-ld-opt=&quot;-ljemalloc&quot; &amp;&amp; \</span><br><span class="line">#开始编译</span><br><span class="line">make -j $(awk &apos;/processor/&#123;i++&#125;END&#123;print i&#125;&apos; /proc/cpuinfo) &amp;&amp; make install &amp;&amp; \</span><br><span class="line"></span><br><span class="line">#设置一些工作目录</span><br><span class="line">mkdir -p /usr/local/nginx/cache/ &amp;&amp; \</span><br><span class="line">mkdir -p /usr/local/nginx/temp/ &amp;&amp; \</span><br><span class="line">rm -rf ../&#123;ngx*,nginx*&#125;</span><br><span class="line"></span><br><span class="line">#启动nginx，保留一个前台进程，以免被docker强制退出</span><br><span class="line">CMD ./usr/local/nginx/sbin/nginx &amp;&amp; tail -f /usr/local/nginx/logs/error.log</span><br></pre></td></tr></table></figure>
<p>看看我们最后基于alpine的镜像大小是多少？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-14:~/docker/alpine# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">alpine_nginx        latest              81b30220a198        3 minutes ago       167.3 MB</span><br></pre></td></tr></table></figure></p>
<p>不到200MB，成功瘦身80%。合并一些RUN定义，提及还可以更小的。</p>
<p>我们现在做了2个版本的nginx编译增强镜像，来看看最后的文件目录吧！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-14:~# pwd</span><br><span class="line">/root</span><br><span class="line">root@ubuntu-14:~# tree</span><br><span class="line">.</span><br><span class="line">└── docker</span><br><span class="line">    ├── alpine</span><br><span class="line">    │   ├── docker-compose.yml</span><br><span class="line">    │   └── nginx</span><br><span class="line">    │       ├── conf</span><br><span class="line">    │       │   └── nginx.conf</span><br><span class="line">    │       ├── Dockerfile</span><br><span class="line">    │       ├── html</span><br><span class="line">    │       │   └── test_xw.html</span><br><span class="line">    │       ├── logs</span><br><span class="line">    │       │   ├── error.log</span><br><span class="line">    │       │   ├── nginx.pid</span><br><span class="line">    │       │   └── xws.access.log</span><br><span class="line">    │       ├── ssl</span><br><span class="line">    │       │   ├── www.xw18.cn.crt</span><br><span class="line">    │       │   └── www.xw18.cn.key</span><br><span class="line">    │       └── static</span><br><span class="line">    │           ├── apk</span><br><span class="line">    │           ├── css</span><br><span class="line">    │           ├── img</span><br><span class="line">    │           │   ├── 50.jpg</span><br><span class="line">    │           │   └── photo.jpg</span><br><span class="line">    │           └── js</span><br><span class="line">    └── test</span><br><span class="line">        ├── docker-compose.yml</span><br><span class="line">        └── nginx</span><br><span class="line">            ├── conf</span><br><span class="line">            │   └── nginx.conf</span><br><span class="line">            ├── Dockerfile</span><br><span class="line">            ├── html</span><br><span class="line">            │   └── test_xw.html</span><br><span class="line">            ├── logs</span><br><span class="line">            │   ├── error.log</span><br><span class="line">            │   ├── nginx.pid</span><br><span class="line">            │   └── xws.access.log</span><br><span class="line">            ├── ssl</span><br><span class="line">            │   ├── www.xw18.cn.crt</span><br><span class="line">            │   └── www.xw18.cn.key</span><br><span class="line">            └── static</span><br><span class="line">                ├── apk</span><br><span class="line">                ├── css</span><br><span class="line">                ├── img</span><br><span class="line">                │   ├── 50.jpg</span><br><span class="line">                │   └── photo.jpg</span><br><span class="line">                └── js</span><br><span class="line"></span><br><span class="line">23 directories, 22 files</span><br></pre></td></tr></table></figure>
<p>参考资料：<a href="http://dockone.io/article/1243?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">http://dockone.io/article/1243?utm_source=tuicool&amp;utm_medium=referral</a></p>
<h1 id="常用命令总结"><a href="#常用命令总结" class="headerlink" title="常用命令总结"></a>常用命令总结</h1><ul>
<li>docker进入到正在运行的容器内部</li>
</ul>
<p>docker exec -it test_redis_1 /bin/bash</p>
<ul>
<li>运行一个image_id为195eb90b5349的容器，并命名为shell，然后进入到容器内部</li>
</ul>
<p>docker run –name shell -i -t 195eb90b5349 /bin/bash</p>
<ul>
<li>运行一个名为alpine的容器，并进入到容器内部</li>
</ul>
<p>docker run -it alpine /bin/sh</p>
<ul>
<li>docker查看本地image</li>
</ul>
<p>docker images</p>
<ul>
<li>重启docker服务</li>
</ul>
<p>service docker restart</p>
<ul>
<li>查看所有的容器</li>
</ul>
<p>docker ps -a</p>
<ul>
<li>删除多个容器</li>
</ul>
<p>docker rm -v id1 id2</p>
<ul>
<li>删除所有容器</li>
</ul>
<p>docker rm $(docker ps -a -q)</p>
<ul>
<li>删除多个镜像</li>
</ul>
<p>dicker rmi id1 id2</p>
<ul>
<li>查询所有未成功build的镜像<none></none></li>
</ul>
<p>docker images -q -f dangling=true</p>
<ul>
<li>删除所有未成功build的镜像<none></none></li>
</ul>
<p>docker rmi $(docker images -q -f dangling=true)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx与Tomcat 8在Docker环境的反向代理配置过程]]></title>
      <url>http://amao12580.github.io/post/2016/04/Remember-a-reverse-proxy-configuration-process-for-nginx-and-Tomcat-in-the-docker-environment/</url>
      <content type="html"><![CDATA[<h1 id="需要做什么？"><a href="#需要做什么？" class="headerlink" title="需要做什么？"></a>需要做什么？</h1><p>最近接到的任务是:在Docker环境下，Nginx与Tomcat的反向代理与负载均衡配置。先拿出可行性方案，以便在业务量突发时，在线上环境实施。典型的技术预研，打有准备仗。同时还提出了安全需求，在配置上，需要有安全加固。</p>
<p>在Nginx配置时，针对不同的使用环境，配置的参数有很多不同。迫在眉睫的，我们需要先对线上的API服务系统进行反向代理与负载均衡配置。API服务系统是面向手机APP的接口系统，使用HTTP Restful+json进行数据通讯。</p>
<p>我们在局域网环境下，有2台机器在软硬件配置方面，与线上的API服务系统类似。这2台机器的局域网IP分别是：192.168.1.158(简称为：158机器)、192.168.1.188(简称为：188机器)。由于188机器正在做压力测试，而且近期需要持续的对所有接口进行压力测试，没有办法空闲出来做实验。所以在实验之初我使用了158机器的普通账号进行，很快就因为权限不足，遭遇了很多莫名其妙的问题，而且158的使用量比较多，主要作为功能测试的机器。</p>
<p>随后与PM沟通，延后了188机器的压力测试计划，拿到了权限比较高的账号，但还不是root账户。下面会说到如何在普通账户下，使用root账户执行shell命令。</p>
<h1 id="Docker-with-Tomcat"><a href="#Docker-with-Tomcat" class="headerlink" title="Docker with Tomcat"></a>Docker with Tomcat</h1><p>为了模拟线上真实环境，我们在188机器上搭建了docker环境。docker是借助Linux container(简称LXC)技术的轻量级可移植运行时环境，这意味着在docker中完成的软件运行时环境搭建后，可以移植到任意一台支持docker运行的机器上，功能上不会有任何的丢失。这有点像Java开发中的JVM，都是解决在不同环境下软件运行的问题。docker更多的提供了资源共享和资源隔离的机制，容器之间本身是隔离互不干扰的，但提供配置允许不同容器之间交换数据，开放对外端口；同时可以限制某个容器对宿主机的资源占用，如cpu、内存、io等等。</p>
<p>为了方便，低成本，我们使用docker hub上的tomcat镜像：tomcat:8-jre8。在后续的实验中，我们需要2个tomcat作为后端应用服务器来处理实际的HTTP请求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM tomcat:8-jre8</span><br><span class="line"></span><br><span class="line">RUN mkdir /root/downloadAppBase</span><br></pre></td></tr></table></figure></p>
<h1 id="Nginx-VS-Tengine"><a href="#Nginx-VS-Tengine" class="headerlink" title="Nginx VS Tengine"></a>Nginx VS Tengine</h1><p>在技术选项时，我们遇到Nginx以及衍生产品Tengine。Nginx是俄罗斯人编写的一款轻量级的Web 服务器/反向代理服务器，它还具备邮件服务器的功能。我们在<a href="http://nginx.org/en/download.html" target="_blank" rel="external">Nginx官网</a>上查询发布日志，发现更新的比较频繁。仅在2016年前4月，就出现了2个比较大的版本：1.8.*、1.9.14。Tengine是由淘宝在官方nginx基础之上进行改进的版本，做了很多功能增强，最后一次的版本发布是：2015-12-31：Tengine-2.1.2,此版本仅兼容官方Nginx的1.6.2版本，该版本发布于：2014年9月16日。这也太久了，可能会错过很多官方更新。</p>
<h1 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">准备工作</span><br><span class="line">cd /home/www/</span><br><span class="line">mkdir nginx</span><br><span class="line">cd nginx/</span><br><span class="line">mkdir nginx</span><br><span class="line">mkdir zlib</span><br><span class="line">mkdir openssl</span><br><span class="line">mkdir pcre</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">如果没有安装gcc/gcc-c++，请执行：sudo apt-get install build-essential</span><br><span class="line">如果没有安装make，请执行：sudo apt-get install make</span><br><span class="line"></span><br><span class="line">Step 1：编译安装Pcre包 (rewrite模块需要 pcre 库)</span><br><span class="line">1.软件位于/software/pcre-8.38.tar.gz</span><br><span class="line">2.拷贝软件到目标机器&quot;/home/www/nginx/pcre/&quot;目录</span><br><span class="line">3.顺序执行以下脚本</span><br><span class="line"></span><br><span class="line">cd /home/www/nginx/pcre/</span><br><span class="line">tar -xzvf pcre-8.38.tar.gz</span><br><span class="line">cd pcre-8.38/</span><br><span class="line">./configure</span><br><span class="line">sudo make</span><br><span class="line">#有可能需要输入密码</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Step 2：编译安装Zlib (gzip模块需要 zlib 库)</span><br><span class="line">1.软件位于/software/zlib-1.2.8.tar.gz</span><br><span class="line">2.拷贝软件到目标机器&quot;/home/www/nginx/zlib/&quot;目录</span><br><span class="line">3.顺序执行以下脚本</span><br><span class="line"></span><br><span class="line">cd /home/www/nginx/zlib/</span><br><span class="line">tar -xzvf zlib-1.2.8.tar.gz</span><br><span class="line">cd zlib-1.2.8/</span><br><span class="line">./configure</span><br><span class="line">sudo make</span><br><span class="line">#有可能需要输入密码</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">Step 2：编译安装OpenSSL (ssl 功能需要openssl库)</span><br><span class="line">1.软件位于/software/openssl-1.1.0-pre4.tar.gz</span><br><span class="line">2.拷贝软件到目标机器&quot;/home/www/nginx/openssl/&quot;目录</span><br><span class="line">3.顺序执行以下脚本</span><br><span class="line"></span><br><span class="line">cd /home/www/nginx/openssl/</span><br><span class="line">tar -xzvf openssl-1.1.0-pre4.tar.gz</span><br><span class="line">cd openssl-1.1.0-pre4/</span><br><span class="line">./config</span><br><span class="line">sudo make</span><br><span class="line">#命令执行时间超过5分钟，耐心等待</span><br><span class="line">sudo make install</span><br><span class="line">#命令执行时间超过5分钟，耐心等待</span><br><span class="line"></span><br><span class="line">Step 3：编译安装Nginx</span><br><span class="line">1.软件位于/software/nginx-1.9.14.tar.gz</span><br><span class="line">2.拷贝软件到目标机器&quot;/home/www/nginx/nginx/&quot;目录</span><br><span class="line">3.顺序执行以下脚本</span><br><span class="line"></span><br><span class="line">cd /home/www/nginx/nginx/</span><br><span class="line">tar -xzvf nginx-1.9.14.tar.gz</span><br><span class="line">cd nginx-1.9.14/</span><br><span class="line"></span><br><span class="line">sed -i -e &apos;s/1.9.14//g&apos; -e &apos;s/nginx\//ERROR/g&apos; -e &apos;s/&quot;NGINX&quot;/&quot;ERROR&quot;/g&apos; src/core/nginx.h</span><br><span class="line"></span><br><span class="line">./configure --prefix=/home/www/nginx/nginx --with-http_realip_module --with-http_sub_module --with-http_flv_module --with-http_dav_module --with-http_gzip_static_module --with-http_stub_status_module --with-http_addition_module --with-pcre=/home/www/nginx/pcre/pcre-8.38 --with-openssl=/home/www/nginx/openssl/openssl-1.1.0-pre4 --with-http_ssl_module --with-zlib=/home/www/nginx/zlib/zlib-1.2.8</span><br><span class="line"></span><br><span class="line">sudo make</span><br><span class="line">#命令执行时间超过5分钟，耐心等待</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">Step 4：安装补丁(对应用服务器进行监控)</span><br><span class="line">cd /home/www/nginx/nginx/</span><br><span class="line">mkdir patch</span><br><span class="line">补丁文件位于/software/patch目录，拷贝目录下的所有文件到：/home/www/nginx/nginx/patch/</span><br><span class="line">cd /home/www/nginx/nginx/nginx-1.9.14/src/</span><br><span class="line">patch -p1 &lt; /home/www/nginx/nginx/patch/nginx_upstream_check_module-master/check_1.9.2+.patch</span><br><span class="line">cd ..</span><br><span class="line">./configure --prefix=/home/www/nginx/nginx --with-http_realip_module --with-http_sub_module --with-http_flv_module --with-http_dav_module --with-http_gzip_static_module --with-http_stub_status_module --with-http_addition_module --with-pcre=/home/www/nginx/pcre/pcre-8.38 --with-openssl=/home/www/nginx/openssl/openssl-1.1.0-pre4 --with-http_ssl_module --with-zlib=/home/www/nginx/zlib/zlib-1.2.8 --add-module=/home/www/nginx/nginx/patch/nginx_upstream_check_module-master/</span><br><span class="line">sudo make</span><br><span class="line">#命令执行时间超过5分钟，耐心等待</span><br><span class="line">sudo make install</span><br><span class="line">cd /home/www/nginx/nginx/sbin/</span><br><span class="line">sudo rm -f nginx.old</span><br><span class="line"></span><br><span class="line">Step 5：配置</span><br><span class="line">配置文件位于：conf/nginx.conf</span><br><span class="line">将该文件拷贝到：/home/www/nginx/nginx/conf/目录下，遇到文件已存在时，直接覆盖。</span><br><span class="line"></span><br><span class="line">确保可以访问到后端tomcat开放的端口，telnet</span><br><span class="line">修改配置文件nginx.conf,“upstream  xws”改为实际的tomcat运行环境</span><br><span class="line"></span><br><span class="line">cd /home/www/nginx/nginx/</span><br><span class="line">mkdir ssl</span><br><span class="line">cd ssl</span><br><span class="line">SSL证书文件位于：ssl/www.abcde.com.crt，ssl/www.abcde.com.key</span><br><span class="line">将这2个文件拷贝到/home/www/nginx/nginx/ssl/目录下</span><br><span class="line"></span><br><span class="line">Step 6：运行</span><br><span class="line">确保系统的80、443端口处于空闲状态。netstat</span><br><span class="line">确保/home/www/nginx/nginx/logs/目录具备读写权限。</span><br><span class="line">确保/home/www/nginx/nginx/ssl/www.abcde.com.crt具备读权限。</span><br><span class="line">确保/home/www/nginx/nginx/ssl/www.abcde.com.key具备读权限。</span><br><span class="line">确保/home/www/nginx/nginx/sbin/nginx文件具备可执行权限。</span><br><span class="line"></span><br><span class="line">cd /home/www/nginx/nginx/sbin/</span><br><span class="line">sudo ./nginx</span><br><span class="line"></span><br><span class="line">Step 7：验证</span><br><span class="line">1.pcre包安装的正确性</span><br><span class="line"></span><br><span class="line">cd /home/www/nginx/pcre/</span><br><span class="line">./pcre-config --version</span><br><span class="line">有版本号输出则安装成功。</span><br><span class="line"></span><br><span class="line">2.openssl包安装的正确性</span><br><span class="line">cd /home/www/nginx/openssl/openssl-1.1.0-pre4/</span><br><span class="line">openssl version –a</span><br><span class="line">有版本号输出则安装成功。</span><br><span class="line"></span><br><span class="line">3.nginx包安装的正确性</span><br><span class="line">cd /home/www/nginx/nginx/nginx-1.9.14/objs</span><br><span class="line">./nginx -V</span><br><span class="line">##也可以使用：./nginx -t</span><br><span class="line">有配置详情输出则安装成功。</span><br><span class="line"></span><br><span class="line">卸载</span><br><span class="line">1.停止nginx的运行</span><br><span class="line">cd /home/www/nginx/nginx/sbin/</span><br><span class="line">sudo ./nginx -s stop</span><br><span class="line"></span><br><span class="line">2.删除文件</span><br><span class="line">cd /home/www/</span><br><span class="line">rm -rf nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">监控</span><br><span class="line">进入到与nginx部署机器的局域网络</span><br><span class="line">浏览器访问：http://nginx主机的局域网ip/nginxStatus/</span><br></pre></td></tr></table></figure>
<p>贴出nginx.cof</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">#你所看到的这个文件，是nginx的工作配置文件，不要轻易改动。</span><br><span class="line"></span><br><span class="line">worker_processes  4;</span><br><span class="line">error_log  logs/error.log;</span><br><span class="line">pid        logs/nginx.pid;</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections  65535;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    server_tokens off;</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    client_body_timeout   10;</span><br><span class="line">    client_header_timeout  30;</span><br><span class="line">    keepalive_timeout     30  30;</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    sendfile on;</span><br><span class="line">    send_timeout 10;</span><br><span class="line">    client_body_buffer_size  64K;</span><br><span class="line">    client_header_buffer_size  128k;</span><br><span class="line">    client_max_body_size  10m;</span><br><span class="line">    large_client_header_buffers  4  128k;</span><br><span class="line"></span><br><span class="line">  # gzip压缩功能设置</span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_buffers    4 16k;</span><br><span class="line">    gzip_http_version 1.0;</span><br><span class="line">    gzip_comp_level 6;</span><br><span class="line">    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</span><br><span class="line">    gzip_vary on;</span><br><span class="line"></span><br><span class="line">    #设置单个IP在每秒请求数不能超过20次</span><br><span class="line">    limit_req_zone $binary_remote_addr zone=one:20m rate=20r/s;</span><br><span class="line"></span><br><span class="line">    #设置单个IP同时连接数</span><br><span class="line">    limit_conn_zone $binary_remote_addr zone=addr:20m;</span><br><span class="line"></span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line"></span><br><span class="line">  # 设定负载均衡方式：RR模式</span><br><span class="line">    upstream  xws  &#123;</span><br><span class="line">        server 127.0.0.1:6080 weight=1 max_fails=5 fail_timeout=10s ;</span><br><span class="line">        server 127.0.0.1:7080 weight=1 max_fails=5 fail_timeout=10s ;</span><br><span class="line">        check interval=3000 rise=2 fall=5 timeout=1000 type=http;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  # 虚拟主机配置</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        #root   /apps/oaapp;</span><br><span class="line"></span><br><span class="line">        listen 443 ssl default_server;</span><br><span class="line">        server_name www.abcde.com;</span><br><span class="line">        ssl_certificate  /home/www/nginx/nginx/ssl/yourCAcrt.crt;</span><br><span class="line">        ssl_certificate_key  /home/www/nginx/nginx/ssl/yourCAkey.key;</span><br><span class="line">        ssl_session_timeout  10m;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_ciphers &quot;ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4&quot;;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        charset utf-8;</span><br><span class="line">        access_log  logs/xws.access.log  main;</span><br><span class="line"></span><br><span class="line">        if ($request_method !~ ^(GET|HEAD|POST)$) &#123;</span><br><span class="line">            return 404;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #对所有URL做负载均衡+反向代理</span><br><span class="line">        location / &#123;</span><br><span class="line">            #root   /apps/oaapp;</span><br><span class="line">            #index  index.jsp index.html index.htm;</span><br><span class="line">            proxy_pass http://xws;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">            proxy_set_header  Host  $host;</span><br><span class="line">            proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class="line">            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;</span><br><span class="line"></span><br><span class="line">            limit_conn addr 2;</span><br><span class="line">            limit_req zone=one burst=5 nodelay;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #静态文件，nginx自己处理，不去backend请求tomcat</span><br><span class="line">        #location  ~* /download/ &#123;</span><br><span class="line">        #    root /apps/oa/fs;</span><br><span class="line"></span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        #location ~ .*\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$</span><br><span class="line">        #&#123;</span><br><span class="line">        #    root /apps/oaapp;</span><br><span class="line">        #    expires      7d;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # 为内网IP开放nginx状态监控</span><br><span class="line">        location /nginxStatus &#123;</span><br><span class="line">            stub_status on;</span><br><span class="line">            access_log off;</span><br><span class="line">            allow 192.168.1.0/24;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ ^/(WEB-INF)/ &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line">        #error_page 404              /404.html;</span><br><span class="line">        error_page 500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="踩到的一些坑"><a href="#踩到的一些坑" class="headerlink" title="踩到的一些坑"></a>踩到的一些坑</h1><h2 id="400-x16-x03"><a href="#400-x16-x03" class="headerlink" title="400 \x16\x03"></a>400 \x16\x03</h2><p>同一个server节点，配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listen 80 default_server;</span><br><span class="line">listen 443 ssl default_server;</span><br></pre></td></tr></table></figure></p>
<h2 id="调试Https"><a href="#调试Https" class="headerlink" title="调试Https"></a>调试Https</h2><p>如果CA证书签发的域名是：www.abcde.com，为了在线下调试，假设将nginx部署在局域网IP：192.168.1.188，我们可以将本机的hosts文件修改一下，文件位于：C:\Windows\System32\drivers\etc\hosts。加上一行记录：“192.168.1.188 www.abcde.com”，保存后退出。再到本机的cmd命令行输入：ipconfig flushdns，退出cmd。等待几分钟后，在浏览器输入：<a href="https://www.abcde.com，即可在局域网调试啦！" target="_blank" rel="external">https://www.abcde.com，即可在局域网调试啦！</a></p>
<h2 id="ssl-protocols"><a href="#ssl-protocols" class="headerlink" title="ssl_protocols"></a>ssl_protocols</h2><p>如果nginx.conf在定义ssl_protocols时，用了一些比较过时的协议，比如：SSLV3，则会被chrome提示连接不安全。可以参考我的nginx.conf配置，事实上这些过时的协议都有一些可以被利用的漏洞，建议不要使用了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JOOQ 3.6.1 使用总结：从入门到提高]]></title>
      <url>http://amao12580.github.io/post/2016/04/JOOQ-from-entry-to-improve/</url>
      <content type="html"><![CDATA[<p>2016年后换了一家公司干，后台ORM框架用的JOOQ，完全陌生的东西。干这一行越久，越觉得有更多有趣的新事物需要去探索。想起小说<a href="https://book.douban.com/subject/26586492/" target="_blank" rel="external">《火星救援》</a>，主人Mark侥幸在火星风暴中幸存后，一步步将自己救出困境，遇到的难题或大或小，皆有优雅解决之法。<a id="more"></a>一切看似偶然蹊跷，其实与Mark的长期知识储备分不开。所谓艺多不压身，应该在有限的时间里，得到更多成长，以期待机会来时不辜负。</p>
<p>下文中的学习示例代码，已经整理完毕：<a href="https://github.com/amao12580/JOOQ" target="_blank" rel="external">https://github.com/amao12580/JOOQ</a></p>
<h2 id="什么是JOOQ？"><a href="#什么是JOOQ？" class="headerlink" title="什么是JOOQ？"></a>什么是JOOQ？</h2><p><a href="http://www.jooq.org/" target="_blank" rel="external">JOOQ</a>，全称Java Object Oriented Querying，即面向Java对象查询。它是<a href="http://www.datageekery.com/" target="_blank" rel="external">Data Geekery</a>公司研发的DA方案(Data Access Layer)，主要解决两个问题：</p>
<ol>
<li>Hibernate的抽象使得我们离SQL太远，对SQL的掌控力度弱</li>
<li>JDBC又过于嘈杂，需要干的事情太多</li>
</ol>
<p>JOOQ希望干的就是在上述两者中寻找一个最佳的平衡。它依据数据库中的表生成DA相关的代码，开发者将生成的代码引入项目中即可使用。</p>
<p>有好几个版本</p>
<ul>
<li>OpenSource</li>
<li>Express</li>
<li>Professional</li>
<li>Enterprise</li>
</ul>
<p>OpenSource版本针对开源数据库，已经够用了。其它的几个版本针对非开源数据库，差异在于不同的后续支持。</p>
<p>JOOQ应用在DAO层中，原理是：在DAO层使用Java语言编写SQL语句，内部转换成数据库可执行的SQL语句，通过数据库驱动，提交SQL语句到RDBMS执行，接受处理结果，转换为POJO，返回到应用层。</p>
<p>它与Hibernate不同，不依赖使用字符串变量在Java代码中拼接SQL语句。在复杂SQL语句中，与变量的组合拼接时，SQL被割裂成多个部分，失去了宝贵的可读性，这简直是噩梦。而且Hibernate饱受诟病的连接查询配置复杂以及HQL语法的问题，在JOOQ中不复存在。</p>
<p>它与Mybatis不同，不依赖繁琐分散的XML进行SQL预定义。代码与SQL语句的分离，初衷是为了解决SQL嵌入代码时带来不直观的复杂性，但是分离的代价是维护工作倍增以及类型转换问题，经常遭遇到应用层代码变更，而XML定义未同步变更，IDE几乎无法解决。又或者开发人员改动一个XML文件，却意外影响多处上层代码，而这个问题很难避免。</p>
<p>更进一步的，JOOQ提供原生的类型安全转换，以及POJO维护，免去大量一次性代码的编写。当然，你也可以使用Eclipse<a href="http://my.oschina.net/lujianing/blog/200135" target="_blank" rel="external">代码生成插件</a>解决这个问题，但是如果ORM能自动解决(结合Maven Plugin)，为什么拒绝呢？</p>
<p>使用这种DAO模式，可以通过类的方式来进行数据库访问了。而且对SQL控制粒度加大的同时，维护工作并没有因此倍增，这对于开发人员是更好的解决方案，也是未来的趋势。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用JOOQ进行2张表内连接查询示例</span><br><span class="line"></span><br><span class="line">// Typesafely execute the SQL statement directly with jOOQ</span><br><span class="line">Result&lt;Record3&lt;String, String, String&gt;&gt; result =</span><br><span class="line">create.select(BOOK.TITLE, AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME)</span><br><span class="line">    .from(BOOK)</span><br><span class="line">    .join(AUTHOR)</span><br><span class="line">    .on(BOOK.AUTHOR_ID.equal(AUTHOR.ID))</span><br><span class="line">    .where(BOOK.PUBLISHED_IN.equal(1948))</span><br><span class="line">    .fetch();</span><br></pre></td></tr></table></figure>
<h3 id="VS-主流ORM框架"><a href="#VS-主流ORM框架" class="headerlink" title="VS 主流ORM框架"></a>VS 主流ORM框架</h3><ul>
<li><a href="http://blog.jooq.org/2015/03/24/jooq-vs-hibernate-when-to-choose-which/" target="_blank" rel="external">JOOQ vs. Hibernate: When to Choose Which</a></li>
<li><a href="http://blog.jooq.org/2013/07/13/sql-templating-with-jooq-or-mybatis/" target="_blank" rel="external">SQL Templating with jOOQ or MyBatis</a><h3 id="优势和局限性"><a href="#优势和局限性" class="headerlink" title="优势和局限性"></a>优势和局限性</h3></li>
</ul>
<p>优势</p>
<ul>
<li>JOOQ 高效的合并了复杂SQL、<a href="http://blog.jooq.org/2015/05/26/type-safe-queries-for-jpas-native-query-api/" target="_blank" rel="external">类型安全</a>、<a href="#Code-Generation">源码生成</a>、Active Records、存储过程以及高级数据类型的 Java 类库。支持DB2, Derby, Ingres, H2, HSQLDB, MySQL, Oracle, Postgres, SQLite, SQL Server, Sybase。</li>
</ul>
<p>局限性</p>
<ul>
<li>开发人员需要转换思维，接受新事物，May be better？</li>
</ul>
<h2 id="入门篇"><a href="#入门篇" class="headerlink" title="入门篇"></a>入门篇</h2><h3 id="With-Maven"><a href="#With-Maven" class="headerlink" title="With Maven"></a>With Maven</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--MySQL JDBC driver, 数据库迁移等情况下需要. --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.36&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--如果不将该包导入, 编译会报错, 有人遇到了同样的问题.</span><br><span class="line">https://code.google.com/p/jsonrpc4j/issues/detail?id=21--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.portlet&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;portlet-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Code-Generation"><a href="#Code-Generation" class="headerlink" title="Code Generation"></a>Code Generation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--数据库schema代码生成器 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.jooq&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jooq-codegen&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.6.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--数据库代码生成的插件 --&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;!-- Specify the maven code generator plugin --&gt;</span><br><span class="line">    &lt;groupId&gt;org.jooq&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jooq-codegen-maven&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.6.1&lt;/version&gt;</span><br><span class="line">    &lt;!-- The plugin should hook into the generate goal --&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;generate&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">    &lt;/executions&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;!-- JDBC connection parameters --&gt;</span><br><span class="line">        &lt;jdbc&gt;</span><br><span class="line">            &lt;driver&gt;com.mysql.jdbc.Driver&lt;/driver&gt;</span><br><span class="line">            &lt;url&gt;$&#123;db.url&#125;&lt;/url&gt;</span><br><span class="line">            &lt;user&gt;$&#123;db.username&#125;&lt;/user&gt;</span><br><span class="line">            &lt;password&gt;$&#123;db.password&#125;&lt;/password&gt;</span><br><span class="line">        &lt;/jdbc&gt;</span><br><span class="line">        &lt;!-- Generator parameters --&gt;</span><br><span class="line">        &lt;generator&gt;</span><br><span class="line">            &lt;database&gt;</span><br><span class="line">                &lt;name&gt;org.jooq.util.mysql.MySQLDatabase&lt;/name&gt;</span><br><span class="line">                &lt;includes&gt;.*&lt;/includes&gt;</span><br><span class="line">                &lt;inputSchema&gt;$&#123;db.schema&#125;&lt;/inputSchema&gt;</span><br><span class="line">                &lt;forcedTypes&gt;</span><br><span class="line">                    &lt;forcedType&gt;</span><br><span class="line">                        &lt;name&gt;BOOLEAN&lt;/name&gt;</span><br><span class="line">                        &lt;expression&gt;.*\.HANDMADE&lt;/expression&gt;</span><br><span class="line">                        &lt;types&gt;.*&lt;/types&gt;</span><br><span class="line">                    &lt;/forcedType&gt;</span><br><span class="line">                &lt;/forcedTypes&gt;</span><br><span class="line">            &lt;/database&gt;</span><br><span class="line">            &lt;target&gt;</span><br><span class="line">                &lt;packageName&gt;com.study.jooq.common.generated&lt;/packageName&gt;</span><br><span class="line">                &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">            &lt;/target&gt;</span><br><span class="line">        &lt;/generator&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>
<h3 id="With-Flyway"><a href="#With-Flyway" class="headerlink" title="With Flyway"></a>With Flyway</h3><p>Flyway 是独立于数据库的应用、管理并跟踪数据库变更的数据库版本管理工具。</p>
<p><a href="http://www.cnblogs.com/huang0925/p/4409506.html" target="_blank" rel="external">Flyway， 数据库Schema管理利器</a></p>
<p>在pom.xml的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--防止maven改动IDE的language level --&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--数据库迁移所用的参数 --&gt;</span><br><span class="line">    &lt;db.url&gt;jdbc:mysql://localhost:3306&lt;/db.url&gt;</span><br><span class="line">    &lt;db.username&gt;root&lt;/db.username&gt;</span><br><span class="line">    &lt;db.password&gt;zhilaiadmin&lt;/db.password&gt;</span><br><span class="line">    &lt;db.schema&gt;study&lt;/db.schema&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--数据库迁移, 同步的插件 --&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;flyway-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0&lt;/version&gt;</span><br><span class="line">    &lt;!-- Note that we&apos;re executing the Flyway plugin in the &quot;generate-sources&quot; phase --&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;phase&gt;generate-sources&lt;/phase&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;migrate&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">    &lt;/executions&gt;</span><br><span class="line">    &lt;!-- Note that we need to prefix the db/migration path with filesystem:</span><br><span class="line">    to prevent Flyway from looking for our migration scripts only on the classpath --&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;url&gt;$&#123;db.url&#125;&lt;/url&gt;</span><br><span class="line">        &lt;user&gt;$&#123;db.username&#125;&lt;/user&gt;</span><br><span class="line">        &lt;password&gt;$&#123;db.password&#125;&lt;/password&gt;</span><br><span class="line">        &lt;encoding&gt;$&#123;project.build.sourceEncoding&#125;&lt;/encoding&gt;</span><br><span class="line">        &lt;schemas&gt;</span><br><span class="line">            &lt;schema&gt;$&#123;db.schema&#125;&lt;/schema&gt;</span><br><span class="line">        &lt;/schemas&gt;</span><br><span class="line">        &lt;locations&gt;</span><br><span class="line">            &lt;location&gt;filesystem:src/main/resources/db/migration&lt;/location&gt;</span><br><span class="line">        &lt;/locations&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>
<p>在工程：src/main/resources/db/migration目录下，没有目录文件夹时需要先创建文件夹。放入数据库初始化SQL脚本：V1__init_database.sql。注意在maven中配置的db.schema=study，表明需要使用的数据库名称是study，study需要事先不存在。</p>
<p>执行maven -clean、maven -install成功后，发现数据库有了新的数据库study，并且该数据库有了order、user、schema_version三张表，user、order是我们在脚本中定义需要生成的表，而schema_version是flyway生成的，维护数据库版本升级时的信息。对应的在代码中，生成了三个POJO。</p>
<p>代码生成示例：<br><img src="/img/jooq-flyway.png" alt="IDEA使用JOOQ自动生成代码"></p>
<h3 id="With-HikariCp"><a href="#With-HikariCp" class="headerlink" title="With HikariCp"></a>With HikariCp</h3><p>HikariCP号称是现在性能最好的JDBC连接池组件，具体的性能到底如何，我也没有仔细的测试过，不过从它现在的发展来看，其可能确实如它宣传的那样其性能高过目前所有的连接池组件。之前对连接池的记忆一直都是C3P0、DBCP、BoneCP，这三者中BoneCP的性能是最好的，C3P0的性能在现在来说确实是非常差的了，好像C3P0很久都没有更新了，所以我们应该杜绝在项目中使用C3P0，至于是否要使用HikariCP，我觉得可以尝试。HikariCP毕竟是才出来不久，其性能到底如何，也需要实践的检验，若是担心新东西有坑，我推荐使用BoneCP。Spring现在也集成了HikariCP，所以我觉得很有尝试它的必要。前不久我在项目中使用了HikariCP，也没出现什么问题，运行比较稳定。</p>
<p>HikariCP在github上的地址：<a href="https://github.com/brettwooldridge/HikariCP" target="_blank" rel="external">https://github.com/brettwooldridge/HikariCP</a></p>
<p><a href="http://blog.csdn.net/clementad/article/details/46928621" target="_blank" rel="external">为什么HikariCP被号称为性能最好的Java数据库连接池，如何配置使用?</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--JDBC连接池 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.zaxxer&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;HikariCP&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h3 id="简单的CRUD"><a href="#简单的CRUD" class="headerlink" title="简单的CRUD"></a>简单的CRUD</h3><p>为保持example的干净与轻便，不使用Spring进行ORM层的管理，我采用<a href="http://www.oschina.net/question/12_10706" target="_blank" rel="external">ARM</a>的方式来管理SQL链接，在try with resource块结束后自动释放SQL链接。</p>
<p>有需要与Spring进行整合的，Follow这篇文章吧！<br><a href="http://www.jooq.org/doc/3.7/manual/getting-started/tutorials/jooq-with-spring/" target="_blank" rel="external">Using JOOQ with Spring and Apache DBCP</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class="line">    DSLContext create=scopedContext.getDSLContext();</span><br><span class="line">    int uid =180;</span><br><span class="line"></span><br><span class="line">    //add</span><br><span class="line">    UserRecord userRecord=create.newRecord(USER);</span><br><span class="line">    userRecord.setAge((byte) 18);</span><br><span class="line">    userRecord.setMobile(&quot;15985236985&quot;);</span><br><span class="line">    userRecord.setName(&quot;赵六&quot;);</span><br><span class="line">    userRecord.setUid(uid);</span><br><span class="line">    userRecord.setSex((byte) 1);</span><br><span class="line">    userRecord.setPassword(String.valueOf(System.nanoTime()));</span><br><span class="line">    userRecord.setRegisterTime(new Timestamp(System.currentTimeMillis()));</span><br><span class="line">    int insertRet=userRecord.insert();//执行insert sql</span><br><span class="line">    //userRecord.store();//可能会执行insert，也有可能执行update，文档说明的很清晰</span><br><span class="line">    //userRecord.refresh();//从数据库重新加载该记录</span><br><span class="line">    log.info(&quot;insertRet:&#123;&#125;&quot;, insertRet);</span><br><span class="line"></span><br><span class="line">    //index</span><br><span class="line">    int createIndexRet=create.createIndex(&quot;user_index_mobile_unique&quot;)</span><br><span class="line">            .on(USER, USER.MOBILE)</span><br><span class="line">            .execute();//为手机号码字段创建唯一索引</span><br><span class="line">    int dropIndexRet=create.dropIndex(&quot;user_index_mobile_unique&quot;)</span><br><span class="line">            .on(USER)</span><br><span class="line">            .execute();//删除索引</span><br><span class="line">    log.info(&quot;dropIndexRet:&#123;&#125;,createIndexRet:&#123;&#125;&quot;, dropIndexRet, createIndexRet);</span><br><span class="line"></span><br><span class="line">    //select</span><br><span class="line">    Record record=create.select(USER.NAME,USER.UID)</span><br><span class="line">            .from(USER)</span><br><span class="line">            .where(USER.MOBILE.eq(&quot;15985236985&quot;))</span><br><span class="line">            .limit(1)</span><br><span class="line">            .fetchOne();</span><br><span class="line">    log.info(&quot;姓名:&#123;&#125;，uid:&#123;&#125;&quot;, record.getValue(USER.NAME), record.getValue(USER.UID));</span><br><span class="line"></span><br><span class="line">    Result&lt;UserRecord&gt; userRecords=create.selectFrom(USER)</span><br><span class="line">            .where(USER.SEX.eq((byte) 1).and(USER.MOBILE.like(&quot;159%&quot;)))</span><br><span class="line">            .orderBy(USER.MOBILE.asc()).limit(0, 20).fetch();</span><br><span class="line"></span><br><span class="line">    for (UserRecord ur:userRecords)&#123;</span><br><span class="line">        log.info(&quot;mobile:&#123;&#125;,uid:&#123;&#125;,registerTime:&#123;&#125;&quot;, ur.getMobile(), ur.getUid(), ur.getRegisterTime().getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //delete</span><br><span class="line">    int deleteRecordRet=create.deleteFrom(USER).where(USER.UID.eq(uid)).execute();</span><br><span class="line">    log.info(&quot;deleteRecordRet:&#123;&#125;&quot;, deleteRecordRet);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">日志打印信息：</span><br><span class="line">21:01:20.009 INFO  com.zaxxer.hikari.HikariDataSource 72 &lt;init&gt; - Hikari pool HikariPool-0 is starting.</span><br><span class="line">21:01:20.561 INFO  org.jooq.tools.JooqLogger 331 info -</span><br><span class="line"></span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@@@@@@@@@@@@@@@@  @@        @@@@@@@@@@</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@</span><br><span class="line">@@@@@@@@@@@@@@@@  @@  @@    @@@@@@@@@@</span><br><span class="line">@@@@@@@@@@  @@@@  @@  @@    @@@@@@@@@@</span><br><span class="line">@@@@@@@@@@        @@        @@@@@@@@@@</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@@@@@@@@@@        @@        @@@@@@@@@@</span><br><span class="line">@@@@@@@@@@    @@  @@  @@@@  @@@@@@@@@@</span><br><span class="line">@@@@@@@@@@    @@  @@  @@@@  @@@@@@@@@@</span><br><span class="line">@@@@@@@@@@        @@  @  @  @@@@@@@@@@</span><br><span class="line">@@@@@@@@@@        @@        @@@@@@@@@@</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@  @@@@@@@@@@@@@</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  Thank you for using jOOQ 3.6.1</span><br><span class="line"></span><br><span class="line">21:01:20.593 INFO  com.study.jooq.model.Example 42 base - insertRet:1</span><br><span class="line">21:01:21.197 INFO  com.study.jooq.model.Example 51 base - dropIndexRet:0,createIndexRet:0</span><br><span class="line">21:01:21.278 INFO  com.study.jooq.model.Example 59 base - 姓名:赵六，uid:180</span><br><span class="line">21:01:21.282 INFO  com.study.jooq.model.Example 66 base - mobile:15925874536,uid:102,registerTime:1459331629000</span><br><span class="line">21:01:21.282 INFO  com.study.jooq.model.Example 66 base - mobile:15985236985,uid:180,registerTime:1459429281000</span><br><span class="line">21:01:21.285 INFO  com.study.jooq.model.Example 71 base - deleteRecordRet:1</span><br><span class="line">21:01:21.285 INFO  com.zaxxer.hikari.pool.HikariPool 242 shutdown - Hikari pool HikariPool-0 is shutting down.</span><br><span class="line">21:01:21.331 INFO  com.zaxxer.hikari.util.ConcurrentBag 197 add - ConcurrentBag has been closed, ignoring add()</span><br></pre></td></tr></table></figure>
<h2 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h2><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class="line">    DSLContext create=scopedContext.getDSLContext();</span><br><span class="line">    final int[] uid = new int[1];</span><br><span class="line"></span><br><span class="line">    //transaction</span><br><span class="line"></span><br><span class="line">    create.transaction(configuration -&gt; &#123;</span><br><span class="line">        //add</span><br><span class="line">        UserRecord userRecord=create.newRecord(USER);</span><br><span class="line">        userRecord.setAge((byte) 18);</span><br><span class="line">        userRecord.setMobile(&quot;18525874539&quot;);</span><br><span class="line">        userRecord.setName(&quot;赵六&quot;);</span><br><span class="line">        userRecord.setSex((byte) 1);</span><br><span class="line">        userRecord.setPassword(String.valueOf(System.nanoTime()));</span><br><span class="line">        userRecord.setRegisterTime(new Timestamp(System.currentTimeMillis()));</span><br><span class="line">        int insertUserRet=userRecord.insert();//执行insert sql</span><br><span class="line">        uid[0] =userRecord.getUid();</span><br><span class="line">        log.info(&quot;insertUserRet:&#123;&#125;&quot;, insertUserRet);</span><br><span class="line">        //add</span><br><span class="line">        OrderRecord orderRecord=create.newRecord(ORDER);</span><br><span class="line">        orderRecord.setUid(userRecord.getUid());</span><br><span class="line">        orderRecord.setAmout(25000l);</span><br><span class="line">        orderRecord.setOrderId(new BigDecimal(System.nanoTime()).intValue());</span><br><span class="line">        orderRecord.setOrderTime(new Timestamp(System.currentTimeMillis()));</span><br><span class="line">        orderRecord.setStatus((byte)0);</span><br><span class="line">        int insertOrderRet=orderRecord.insert();//执行insert sql</span><br><span class="line">        log.info(&quot;insertOrderRet:&#123;&#125;&quot;, insertOrderRet);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">12:51:14.724 INFO  com.study.jooq.model.Example 90 lambda$advance$0 - insertUserRet:1</span><br><span class="line">12:51:14.743 INFO  com.study.jooq.model.Example 99 lambda$advance$0 - insertOrderRet:1</span><br></pre></td></tr></table></figure>
<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>在处理复杂SQL时，JOOQ的思路是由Java代码以<a href="http://www.jianshu.com/p/540711c1a507" target="_blank" rel="external">链式编程</a>的方式来解决可读性的问题。</p>
<p>下文中的查询语句，等价于：<br>select <code>study</code>.<code>user</code>.<code>mobile</code>, <code>study</code>.<code>user</code>.<code>name</code>, <code>study</code>.<code>user</code>.<code>age</code>, <code>study</code>.<code>order</code>.<code>order_id</code>, <code>study</code>.<code>order</code>.<code>amout</code>, <code>study</code>.<code>order</code>.<code>order_time</code><br>    from <code>study</code>.<code>user</code> left outer join <code>study</code>.<code>order</code><br>    on <code>study</code>.<code>user</code>.<code>uid</code> = <code>study</code>.<code>order</code>.<code>uid</code><br>    where (<code>study</code>.<code>user</code>.<code>uid</code> = ? and <code>study</code>.<code>order</code>.<code>amout</code> &gt;= ?)<br>    limit ?<br>可以发现SQL语句与代码保持了很高的相似性，可读性几乎没有损失。</p>
<p>其他的特性：group by与having、union、union all也都是在api级别支持的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class="line">    DSLContext create=scopedContext.getDSLContext();</span><br><span class="line">    int uid=15874523;</span><br><span class="line"></span><br><span class="line">    //join select</span><br><span class="line"></span><br><span class="line">    Result&lt;Record6&lt;String,String,Byte,Integer,Long,Timestamp&gt;&gt; results=create</span><br><span class="line">            .select(USER.MOBILE,USER.NAME,USER.AGE,ORDER.ORDER_ID,ORDER.AMOUT,ORDER.ORDER_TIME)</span><br><span class="line">            .from(USER).leftOuterJoin(ORDER)</span><br><span class="line">            .on(USER.UID.eq(ORDER.UID))</span><br><span class="line">            .where(USER.UID.eq(uid[0]).and(ORDER.AMOUT.ge(100l)))</span><br><span class="line">            .limit(0,10).fetch();</span><br><span class="line">    for (Record6&lt;String,String,Byte,Integer,Long,Timestamp&gt; record:results)&#123;</span><br><span class="line">        log.info(&quot;姓名:&#123;&#125;，手机号码:&#123;&#125;，年龄:&#123;&#125;，订单号:&#123;&#125;，订单金额:&#123;&#125;，订单时间:&#123;&#125;&quot;,</span><br><span class="line">                record.getValue(USER.NAME),record.getValue(USER.MOBILE),record.getValue(USER.AGE),</span><br><span class="line">                record.getValue(ORDER.ORDER_ID),record.getValue(ORDER.AMOUT),</span><br><span class="line">                record.getValue(ORDER.ORDER_TIME));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">12:51:14.898 INFO  com.study.jooq.model.Example 110 advance - 姓名:赵六，手机号码:18525874539，年龄:18，订单号:-1725080559，订单金额:25000，订单时间:1459486275000</span><br></pre></td></tr></table></figure></p>
<h3 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">//batchInsert</span><br><span class="line">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class="line">    DSLContext create=scopedContext.getDSLContext();</span><br><span class="line">    List&lt;UserRecord&gt; list=new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">     //batchInsert</span><br><span class="line">    UserRecord userRecord=create.newRecord(USER);</span><br><span class="line">    userRecord.setAge((byte) 18);</span><br><span class="line">    userRecord.setMobile(&quot;17058963215&quot;);</span><br><span class="line">    userRecord.setName(&quot;赵六&quot;);</span><br><span class="line">    userRecord.setSex((byte) 1);</span><br><span class="line">    userRecord.setPassword(String.valueOf(System.nanoTime()));</span><br><span class="line">    userRecord.setRegisterTime(new Timestamp(System.currentTimeMillis()));</span><br><span class="line">    list.add(userRecord);</span><br><span class="line"></span><br><span class="line">    UserRecord userRecord2=create.newRecord(USER);</span><br><span class="line">    userRecord2.setAge((byte) 29);</span><br><span class="line">    userRecord2.setMobile(&quot;17058963216&quot;);</span><br><span class="line">    userRecord2.setName(&quot;马七&quot;);</span><br><span class="line">    userRecord2.setSex((byte) 1);</span><br><span class="line">    userRecord2.setPassword(String.valueOf(System.nanoTime()));</span><br><span class="line">    userRecord2.setRegisterTime(new Timestamp(System.currentTimeMillis()));</span><br><span class="line">    list.add(userRecord2);</span><br><span class="line">    //使用batchInsert时，无法获取SQL语句</span><br><span class="line">    int insertRetArr[]=create.batchInsert(list).execute();//返回值是一个int数组，长度与输入的集合size有关。</span><br><span class="line"></span><br><span class="line">    log.info(&quot;insertRetArr:&#123;&#125;&quot;, Arrays.toString(insertRetArr));//数组每个元素为1时，执行成功</span><br><span class="line">    //使用batchInsert时，无法获取数据自增长的主键值</span><br><span class="line">    log.info(&quot;userRecord:uid:&#123;&#125;&quot;, userRecord.getUid());</span><br><span class="line">    log.info(&quot;userRecord2:uid:&#123;&#125;&quot;, userRecord2.getUid());</span><br><span class="line"></span><br><span class="line">    userRecord.refresh();</span><br><span class="line">    userRecord2.refresh();</span><br><span class="line">    log.info(&quot;userRecord:uid:&#123;&#125;&quot;, userRecord.getUid());</span><br><span class="line">    log.info(&quot;userRecord2:uid:&#123;&#125;&quot;, userRecord2.getUid());</span><br><span class="line"></span><br><span class="line">    //batchUpdate</span><br><span class="line">    userRecord.setAge((byte) 38);</span><br><span class="line">    userRecord2.setAge((byte) 78);</span><br><span class="line">    list.clear();</span><br><span class="line">    list.add(userRecord);</span><br><span class="line">    list.add(userRecord2);</span><br><span class="line">    //使用batchUpdate时，无法获取SQL语句</span><br><span class="line">    int updateRetArr[]=create.batchUpdate(list).execute();//返回值是一个int数组，长度与输入的集合size有关。</span><br><span class="line">    log.info(&quot;updateRetArr:&#123;&#125;&quot;, Arrays.toString(updateRetArr));//数组每个元素为1时，执行成功</span><br><span class="line"></span><br><span class="line">    //batchDelete</span><br><span class="line">    //使用batchDelete时，无法获取SQL语句</span><br><span class="line">    int deleteRetArr[]=create.batchDelete(list).execute();//返回值是一个int数组，长度与输入的集合size有关。</span><br><span class="line">    log.info(&quot;deleteRetArr:&#123;&#125;&quot;, Arrays.toString(deleteRetArr));//数组每个元素为1时，执行成功</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">15:06:46.281 INFO  com.study.jooq.model.Example 163 batch - insertRetArr:[1, 1]</span><br><span class="line">15:06:46.281 INFO  com.study.jooq.model.Example 165 batch - userRecord:uid:null</span><br><span class="line">15:06:46.281 INFO  com.study.jooq.model.Example 166 batch - userRecord2:uid:null</span><br><span class="line">15:06:46.287 INFO  com.study.jooq.model.Example 176 batch - updateRetArr:[0, 0]</span><br><span class="line">15:06:46.291 INFO  com.study.jooq.model.Example 182 batch - deleteRetArr:[0, 0]</span><br></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>JOOQ没有提供API对函数进行显式的支持，这意味着不能通过JOOQ进行函数的create/execute/drop。但是JOOQ支持直接执行拼接好的字符串SQL语句，这为我们进行函数execute提供了可行性。实际使用中，使用ORM层对数据库函数进行create/drop的需求几乎不存在。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1. 先在Mysql中添加自定义函数，你也可以使用Flyway的方式来做，在migration文件夹下加一个V2 sql文件。重新执行maven -install即可生效，实际上我更推荐使用这种方式来进行数据库历史SQL执行管理。</span><br><span class="line"></span><br><span class="line">USE study;</span><br><span class="line">DROP FUNCTION IF EXISTS formatDate;</span><br><span class="line"></span><br><span class="line">DELIMITER //</span><br><span class="line">CREATE FUNCTION formatDate(fdate datetime)</span><br><span class="line">RETURNS VARCHAR(255)</span><br><span class="line">RETURN date_format(fdate,&apos;%Y年%m月%d日%h时%i分%s秒&apos;);</span><br><span class="line">//</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line">SELECT formatDate(NOW()) AS &apos;时间&apos;;</span><br><span class="line"></span><br><span class="line">2. 使用JOOQ进行函数execute</span><br><span class="line">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class="line">    DSLContext create=scopedContext.getDSLContext();</span><br><span class="line">    //formatDate是我们在mysql里自定义的函数</span><br><span class="line">    Result&lt;Record&gt; results=create.fetch(&quot;SELECT formatDate(NOW()) AS &apos;时间&apos;;&quot;);</span><br><span class="line">    for (Record record:results)&#123;</span><br><span class="line">        log.info(&quot;执行结果:&#123;&#125;&quot;,record.getValue(0));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">15:54:28.815 INFO  com.study.jooq.model.Example 199 function - 执行结果:2016年04月01日03时54分28秒</span><br></pre></td></tr></table></figure></p>
<h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p>存储过程同函数一样，没有进行显式的create/drop支持。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1. 先在Mysql中添加存储过程</span><br><span class="line">USE study;</span><br><span class="line">DROP PROCEDURE IF EXISTS getAllUid;</span><br><span class="line"></span><br><span class="line">DELIMITER //</span><br><span class="line">CREATE PROCEDURE getAllUid()</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT uid FROM user;</span><br><span class="line">END//</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line">CALL getAllUid();</span><br><span class="line"></span><br><span class="line">2. 使用JOOQ进行存储过程execute</span><br><span class="line">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class="line">    DSLContext create=scopedContext.getDSLContext();</span><br><span class="line">    //getAllUid是我们在mysql里定义的存储过程</span><br><span class="line">    Result&lt;Record&gt; results=create.fetch(&quot;CALL getAllUid()&quot;);</span><br><span class="line">    for (Record record:results)&#123;</span><br><span class="line">        log.info(&quot;执行结果:&#123;&#125;&quot;,record.getValue(0));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">16:08:19.333 INFO  com.study.jooq.model.Example 211 procedure - 执行结果:100</span><br><span class="line">16:08:19.333 INFO  com.study.jooq.model.Example 211 procedure - 执行结果:102</span><br><span class="line">16:08:19.334 INFO  com.study.jooq.model.Example 211 procedure - 执行结果:101</span><br></pre></td></tr></table></figure></p>
<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>通过代码构建视图后，JOOQ不能自动生成视图对应的实体类，需要手工做一次maven -install。以下示例中会生成类文件：Userwithorder.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class="line">    DSLContext create=scopedContext.getDSLContext();</span><br><span class="line">    //创建视图</span><br><span class="line"></span><br><span class="line">    //定义视图名称为：userwithorder</span><br><span class="line">    CreateViewFinalStep step=create.createView(&quot;userwithorder&quot;,USER.UID.getName(),USER.NAME.getName(),ORDER.ORDER_ID.getName(),ORDER.STATUS.getName(),ORDER.AMOUT.getName())</span><br><span class="line">            .as(</span><br><span class="line">                    create.select(USER.UID, USER.NAME, ORDER.ORDER_ID, ORDER.STATUS, ORDER.AMOUT)</span><br><span class="line">                            .from(USER)</span><br><span class="line">                            .leftOuterJoin(ORDER)</span><br><span class="line">                            .on(USER.UID.eq(ORDER.UID))</span><br><span class="line">            );</span><br><span class="line">    log.info(&quot;SQL:&#123;&#125;&quot;,step.getSQL());</span><br><span class="line">    int ret=step.execute();</span><br><span class="line">    log.info(&quot;创建视图,执行结果:&#123;&#125;&quot;,ret);</span><br><span class="line"></span><br><span class="line">    //查询视图</span><br><span class="line">    Result&lt;Record3&lt;Integer,String,Integer&gt;&gt; results=create.select(USERWITHORDER.UID,USERWITHORDER.NAME,USERWITHORDER.ORDER_ID)</span><br><span class="line">            .from(USERWITHORDER).where(USERWITHORDER.AMOUT.ge(200l)).fetch();</span><br><span class="line">    for (Record3&lt;Integer,String,Integer&gt; record:results)&#123;</span><br><span class="line">        log.info(&quot;uid:&#123;&#125;，姓名:&#123;&#125;，订单号:&#123;&#125;&quot;,</span><br><span class="line">                record.getValue(USERWITHORDER.UID),record.getValue(USERWITHORDER.NAME),record.getValue(USERWITHORDER.ORDER_ID));</span><br><span class="line">    &#125;</span><br><span class="line">    //删除视图</span><br><span class="line">    int dropRet=create.dropView(&quot;userwithorder&quot;).execute();</span><br><span class="line">    log.info(&quot;删除视图,执行结果:&#123;&#125;&quot;,dropRet);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">16:54:10.597 INFO  com.study.jooq.model.Example 231 view - SQL:create view `userwithorder`(`uid`, `name`, `order_id`, `status`, `amout`) as select `study`.`user`.`uid`, `study`.`user`.`name`, `study`.`order`.`order_id`, `study`.`order`.`status`, `study`.`order`.`amout` from `study`.`user` left outer join `study`.`order` on `study`.`user`.`uid` = `study`.`order`.`uid`</span><br><span class="line">16:54:10.712 INFO  com.study.jooq.model.Example 233 view - 创建视图,执行结果:0</span><br><span class="line">16:54:10.760 INFO  com.study.jooq.model.Example 239 view - uid:100，姓名:张三，订单号:200</span><br><span class="line">16:54:10.761 INFO  com.study.jooq.model.Example 239 view - uid:100，姓名:张三，订单号:201</span><br><span class="line">16:54:10.761 INFO  com.study.jooq.model.Example 239 view - uid:101，姓名:李四，订单号:202</span><br><span class="line">16:54:10.765 INFO  com.study.jooq.model.Example 244 view - 删除视图,执行结果:0</span><br></pre></td></tr></table></figure></p>
<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><h3 id="获取SQL语句"><a href="#获取SQL语句" class="headerlink" title="获取SQL语句"></a>获取SQL语句</h3><p>JOOQ允许在执行(fetch*、excute)前的SQL构建阶段，获取任一阶段的文本SQL语句。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//2张表完成左外连接构建阶段后的Step</span><br><span class="line">SelectForUpdateStep sfus=create</span><br><span class="line">        .select(USER.MOBILE, USER.NAME, USER.AGE, ORDER.ORDER_ID, ORDER.AMOUT, ORDER.ORDER_TIME)</span><br><span class="line">        .from(USER).leftOuterJoin(ORDER)</span><br><span class="line">        .on(USER.UID.eq(ORDER.UID));</span><br><span class="line"></span><br><span class="line">//2张表查询语句构建结束后的Step</span><br><span class="line">SelectForUpdateStep sfus1=create</span><br><span class="line">        .select(USER.MOBILE,USER.NAME,USER.AGE,ORDER.ORDER_ID,ORDER.AMOUT,ORDER.ORDER_TIME)</span><br><span class="line">        .from(USER).leftOuterJoin(ORDER)</span><br><span class="line">        .on(USER.UID.eq(ORDER.UID))</span><br><span class="line">        .where(USER.UID.eq(uid[0]).and(ORDER.AMOUT.ge(100l)))</span><br><span class="line">        .limit(0, 10);</span><br><span class="line">log.info(&quot;s:&quot; + sfus.getSQL());</span><br><span class="line">log.info(&quot;s1:&quot; + sfus.getSQL());</span><br><span class="line"></span><br><span class="line">14:23:05.305 INFO  com.study.jooq.model.Example 123 advance - s:select `study`.`user`.`mobile`, `study`.`user`.`name`, `study`.`user`.`age`, `study`.`order`.`order_id`, `study`.`order`.`amout`, `study`.`order`.`order_time` from `study`.`user` left outer join `study`.`order` on `study`.`user`.`uid` = `study`.`order`.`uid`</span><br><span class="line"></span><br><span class="line">14:23:05.306 INFO  com.study.jooq.model.Example 124 advance - s1:select `study`.`user`.`mobile`, `study`.`user`.`name`, `study`.`user`.`age`, `study`.`order`.`order_id`, `study`.`order`.`amout`, `study`.`order`.`order_time` from `study`.`user` left outer join `study`.`order` on `study`.`user`.`uid` = `study`.`order`.`uid</span><br></pre></td></tr></table></figure></p>
<h2 id="Some-else"><a href="#Some-else" class="headerlink" title="Some else"></a>Some else</h2><h3 id="JPA与JDBC有什么区别？"><a href="#JPA与JDBC有什么区别？" class="headerlink" title="JPA与JDBC有什么区别？"></a>JPA与JDBC有什么区别？</h3><ul>
<li>JDBC：Java Data Base Connectivity，java数据库连接，用于直接调用SQL 命令，也就是用于执行SQL语句的Java API，是面向数据库的。</li>
<li>JPA：Java Persistence API，Java持久性API，用来操作实体对象，持久性提供了很多实现，编程人员只需要编写实体类，实体类中的主要信息为实体与数据库中表、字段、主键的对应，可以免除编写繁琐的SQL。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从零开始Blogging with Hexo教程]]></title>
      <url>http://amao12580.github.io/post/2016/04/A-new-start/</url>
      <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>　　转眼间3月份也即将过去了，在接受了众多的理论输入以及实践之后，决定要将一些值得分享的事情记录下来，一方面是避免自己重复的掉坑，另一方面也希望通过blog的方式锻炼自己的文字能力。输入+沉淀+输出，形成自我知识攫取过程的闭环。</p>
<p>　　下面记录从零开始的Blogging with Hexo的搭建过程，有一些简单的问题，在文末也会给出答案。</p>
<h2 id="1-你将要做什么？"><a href="#1-你将要做什么？" class="headerlink" title="1.你将要做什么？"></a>1.你将要做什么？</h2><p>　　跟我一起在GiHub上搭建免费无限流量博客，不限速，有版本追溯管理。sadly，免费的背后是低层次的服务。搭建的博客服务器在国外，国内访问的速度没法保障，后文会给出一定的解决方案。内容的维护只能以静态Html的方式发布，意味着没有数据库，因此带来了幂等性，没有各种Web攻击，算作是一件好事？</p>
<p>　　搭建过程中需要的技术：GitHub的使用、安装NodeJS、安装Hexo及系列插件、安装及配置Jacman主题、新文章的发布、Markdown的持续提高。</p>
<h3 id="1-1国内blog平台的现状"><a href="#1-1国内blog平台的现状" class="headerlink" title="1.1国内blog平台的现状"></a>1.1国内blog平台的现状</h3><p>国内的技术blog平台主要有：cnblogs、51cto、iteye、oschina、infoq等；排名没分先后，纯属个人想法。相信以上blogs，作为技术人，大家一定不陌生。平台型的blog，对个人的有利有弊，优势在于：免去软硬件维护管理的麻烦、不用担心流量和各种安全问题、；劣势也比较明显：内容版权、变现很困难、内容受限、内容面临下线风险</p>
<p>引用<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html" target="_blank" rel="external">阮一峰先生的总结</a>：</p>
<ol>
<li>第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。</li>
<li>第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。</li>
<li>第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</li>
</ol>
<p>即技术人对于blog的核心需求是：发布文章、维护文章、随时控制、免去其他管理，也就是输出可控的文章。</p>
<h3 id="1-2如何选择适合自己的blog平台"><a href="#1-2如何选择适合自己的blog平台" class="headerlink" title="1.2如何选择适合自己的blog平台"></a>1.2如何选择适合自己的blog平台</h3><p>国内的blog平台少有让人长期安心逗留的，各种内容审查政策的强压，大环境的逐利性等因素，促使少有blog平台保持良心的同时持续改进其平台，在此不多言。<br>我们希望发出的文章，可以进入一个技术人大都汇聚的环境中，以提高影响力。这样的环境可以是个人blog、blogs平台、微信平台等等。如果你有足够的影响力，也希望在作者与读者之间建立交流通道，常见的就是文章的评论回复功能了，其他的也有读者QQ群等社区型交流方式。引申的说，对于不怀好意的评论者，还需要一个评论审核的功能，甚至禁止评论，这都能在下文中得到解决。</p>
<h3 id="1-3为什么是Hexo？"><a href="#1-3为什么是Hexo？" class="headerlink" title="1.3为什么是Hexo？"></a>1.3为什么是Hexo？</h3><p>我们怎么评价Hexo？</p>
<p>知乎：<a href="https://www.zhihu.com/question/19996679" target="_blank" rel="external">jekyll vs Hexo</a></p>
<h2 id="2-如何做？"><a href="#2-如何做？" class="headerlink" title="2.如何做？"></a>2.如何做？</h2><h3 id="2-1安装和配置NodeJS"><a href="#2-1安装和配置NodeJS" class="headerlink" title="2.1安装和配置NodeJS"></a>2.1安装和配置NodeJS</h3><ol>
<li><p>确认你的配置是windows 7，虽然没有限制一定要windows，但是本教程基于windows。<img src="/img/计算机软硬件配置.png" alt="我的系统环境">。</p>
</li>
<li><p><a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="external">安装NodeJS</a><br>我的安装完成目录：</p>
</li>
</ol>
<p><img src="/img/NodeJS安装完成.png" alt=""></p>
<ol>
<li><a href="http://www.cnblogs.com/enix/p/3635343.html" target="_blank" rel="external">解决npm安装模块慢或失败的问题</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry=&quot;http://registry.npmjs.org&quot;//设置npm源地址</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>确认你的npm配置：</p>
<p><img src="/img/npm配置信息.png" alt=""></p>
<h3 id="2-2获取GitHub账号"><a href="#2-2获取GitHub账号" class="headerlink" title="2.2获取GitHub账号"></a>2.2获取GitHub账号</h3><p>GitHub账号和GitHub Pages 一般都应该有吧，已有的请自动无视这一部分。</p>
<h3 id="2-2yourname-github-io"><a href="#2-2yourname-github-io" class="headerlink" title="2.2yourname.github.io"></a>2.2yourname.github.io</h3><ul>
<li>首先注册一个『GitHub』帐号，已有的默认默认请忽略</li>
<li>建立与你用户名对应的仓库，仓库名必须为『your_user_name.github.com』</li>
</ul>
<h3 id="2-3安装和配置windows-GitHub客户端"><a href="#2-3安装和配置windows-GitHub客户端" class="headerlink" title="2.3安装和配置windows GitHub客户端"></a>2.3安装和配置windows GitHub客户端</h3><p>不建议在<a href="https://desktop.github.com/" target="_blank" rel="external">GitHub官网</a>下载最新客户端，官网下载的客户端大小不到1MB，在本地运行还需要链接Amazon下载具体的安装包，因为国内网络环境，经常下载到一半就断掉.</p>
<p>我个人试了各种方法不得解，最后找到了离线安装版：已存入百度云：链接：<a href="http://pan.baidu.com/s/1eRmoG6Y" target="_blank" rel="external">http://pan.baidu.com/s/1eRmoG6Y</a> 密码：3vus</p>
<p>因为版本控制工具比较耗系统资源，请尽量安装在非系统所在盘，尽量选择剩余容量大的盘。<br>安装完成后，得到2个桌面图标：GitHub、Git Shell。前者是可视化版，后者是命令行版。</p>
<p>我选择使用GitHub,打开后进行GitHub账号登录，第一次登录成功后，绑定邮箱会收到新邮件：[GitHub] A new public key was added to your account</p>
<p>点击左上角“+”号，选择clone，选择自己的yourname.github.io。<br>在下一步中选择存放文件夹，我的选择是：<br><img src="/img/github目录.png" alt=""></p>
<p>简单的使用windows GitHub客户端</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在对话框顶部有“No uncommitted changes”和“History”，点击后可以进行切换。</span><br><span class="line">在版本库所在的文件夹有了文件变化后，这里会有变化“28 uncommitted changes”和“History”，28是指的未提交的更改数量。</span><br><span class="line">填写Summary和Description后，可以进行本地提交：Commit to master。</span><br><span class="line">此时若还想提交到远程GitHub服务器，点击右上角“Sync”按钮进行同步。</span><br></pre></td></tr></table></figure>
<h3 id="2-4安装和配置Hexo"><a href="#2-4安装和配置Hexo" class="headerlink" title="2.4安装和配置Hexo"></a>2.4安装和配置Hexo</h3><p>安装和初始化Hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cd /d/</span><br><span class="line">$ mkdir hexo</span><br><span class="line">$ cd hexo</span><br><span class="line">$ npm install -g hexo</span><br><span class="line">$ hexo init</span><br><span class="line">$ hexo g # 或者hexo generate</span><br><span class="line">$ hexo s # 或者hexo server，可以在http://localhost:4000/查看</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/hexo安装目录.png" alt=""></p>
<p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ git clone https://github.com/wuchong/jacman.git themes/jacman</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jacman主题安装目录.png" alt=""></p>
<p>常用命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo p == hexo publish</span><br><span class="line">hexo g == hexo generate#生成</span><br><span class="line">hexo s == hexo server #启动服务预览</span><br><span class="line">hexo d == hexo deploy#部署</span><br></pre></td></tr></table></figure></p>
<p>部署文章到github.io<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">拷贝Hexo文件夹下的public文件夹里的所有文件</span><br><span class="line">粘贴到yourname.github.io所在磁盘目录中，我的目录是：D:\GitHub\amao12580.github.io</span><br><span class="line">使用GitHub客户端进行提交到远程服务器</span><br><span class="line">打开yourname.github.io网址即可看到效果啦！</span><br></pre></td></tr></table></figure></p>
<h3 id="2-5为什么是Jacman"><a href="#2-5为什么是Jacman" class="headerlink" title="2.5为什么是Jacman?"></a>2.5为什么是Jacman?</h3><p>参见评价<a href="http://wsgzao.github.io/post/hexo-jacman/" target="_blank" rel="external">Jacman基于Pacman修改的Hexo主题</a></p>
<h3 id="2-6私人定制"><a href="#2-6私人定制" class="headerlink" title="2.6私人定制"></a>2.6私人定制</h3><p>在这里贴出我修改过的一些文件，很多修改都给出了备注。</p>
<p>Hexo主配置文件：D:\GitHub\Hexo\_config.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br><span class="line"></span><br><span class="line"># Site</span><br><span class="line">title: Cat&apos;s Blog</span><br><span class="line">subtitle: 一饮一啄，莫非前定.</span><br><span class="line">#为了更便于搜索引擎爬到，添加了网站的keywords</span><br><span class="line">keywords: cat&apos;s,chengliang,amao12580,blog,developers</span><br><span class="line">description: Follw the https://xuanwo.org/2015/03/26/hexo-intor/</span><br><span class="line">author: Steven Cheng</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone:</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: http://amao12580.github.io</span><br><span class="line">root: /</span><br><span class="line">permalink: post/:year/:month/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">about_dir: about</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line">  - README.md</span><br><span class="line">  - 404.html</span><br><span class="line"></span><br><span class="line"># Writing</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: false</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line">datetime_format: YYYY-MM-DD HH:mm:ss.SSS</span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: jacman</span><br><span class="line">stylus:</span><br><span class="line">  compress: true</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Others</span><br><span class="line">index_generator:</span><br><span class="line">  per_page: 5 ##首页默认10篇文章标题 如果值为0不分页</span><br><span class="line"></span><br><span class="line">archive_generator:</span><br><span class="line">    per_page: 0 ##归档页面默认10篇文章标题</span><br><span class="line">    yearly: true  ##生成年视图</span><br><span class="line">    monthly: true ##生成月视图</span><br><span class="line"></span><br><span class="line">tag_generator:</span><br><span class="line">    per_page: 0 ##标签分类页面默认10篇文章</span><br><span class="line"></span><br><span class="line">category_generator:</span><br><span class="line">    per_page: 0 ###分类页面默认10篇文章</span><br><span class="line"></span><br><span class="line">feed:</span><br><span class="line">    type: atom ##feed类型 atom或者rss2</span><br><span class="line">    path: atom.xml ##feed路径</span><br><span class="line">    limit: 20  ##feed文章最小数量</span><br><span class="line"></span><br><span class="line">#访问zipperary/sitemap.xml即可看到站点地图。不过，sitemap的初衷是给搜索引擎看的，为了提高搜索引擎对自己站点的收录效果，我们最好手动到google和百度等搜索引擎提交sitemap.xml。</span><br><span class="line">#sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  - path: sitemap.xml</span><br><span class="line"></span><br><span class="line">baidusitemap:</span><br><span class="line"> - path: baidusitemap.xml</span><br></pre></td></tr></table></figure></p>
<p>Jacman主题的主配置文件：D:\GitHub\Hexo\themes\jacman\ _config.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">##### Menu</span><br><span class="line">menu:</span><br><span class="line">  主页 | Home: /</span><br><span class="line">  索引 | Index: /index</span><br><span class="line">  归档 | Archives: /archives</span><br><span class="line">  简介 | About: /about</span><br><span class="line">## you can create `tags` and `categories` folders in `../source`.</span><br><span class="line">## And create a `index.md` file in each of them.</span><br><span class="line">## set `front-matter`as</span><br><span class="line">## layout: tags (or categories)</span><br><span class="line">## title: tags (or categories)</span><br><span class="line">## ---</span><br><span class="line"></span><br><span class="line">#### Widgets</span><br><span class="line">widgets:</span><br><span class="line">- github-card</span><br><span class="line">- category</span><br><span class="line">- tag</span><br><span class="line">- links</span><br><span class="line">- douban</span><br><span class="line">- rss</span><br><span class="line">- weibo</span><br><span class="line">  ## provide eight widgets:github-card,category,tag,rss,archive,tagcloud,links,weibo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### RSS</span><br><span class="line">rss: /atom.xml ## RSS address.</span><br><span class="line"></span><br><span class="line">#### Image</span><br><span class="line">imglogo:</span><br><span class="line">  enable: true             ## display image logo true/false.</span><br><span class="line">  src: img/logo.png        ## `.svg` and `.png` are recommended,please put image into the theme folder `/jacman/source/img`.</span><br><span class="line">favicon: img/favicon.ico   ## size:32px*32px,`.ico` is recommended,please put image into the theme folder `/jacman/source/img`.</span><br><span class="line">apple_icon: img/jacman.jpg ## size:114px*114px,please put image into the theme folder `/jacman/source/img`.</span><br><span class="line">author_img: img/author.jpg ## size:220px*220px.display author avatar picture.if don&apos;t want to display,please don&apos;t set this.</span><br><span class="line">banner_img: #img/banner.jpg ## size:1920px*200px+. Banner Picture</span><br><span class="line">### Theme Color</span><br><span class="line">theme_color:</span><br><span class="line">    theme: &apos;#2ca6cb&apos;    ##the defaut theme color is blue</span><br><span class="line"></span><br><span class="line"># 代码高亮主题</span><br><span class="line"># available: default | night</span><br><span class="line">highlight_theme: night</span><br><span class="line"></span><br><span class="line">#### index post is expanding or not</span><br><span class="line">index:</span><br><span class="line">  expand: false           ## default is unexpanding,so you can only see the short description of each post.</span><br><span class="line">  excerpt_link: Read More</span><br><span class="line"></span><br><span class="line">close_aside: true  #close sidebar in post page if true</span><br><span class="line">mathjax: true      #enable mathjax if true</span><br><span class="line"></span><br><span class="line">### Creative Commons License Support, see http://creativecommons.org/</span><br><span class="line">### you can choose: by , by-nc , by-nc-nd , by-nc-sa , by-nd , by-sa , zero</span><br><span class="line">creative_commons: none</span><br><span class="line"></span><br><span class="line">#### Author information</span><br><span class="line">author:</span><br><span class="line">  intro_line1:  &quot;Hello ,I&apos;m steven. This is my blog on GitHub.&quot;    ## your introduction on the bottom of the page</span><br><span class="line">  intro_line2:  &quot;Whenever you feel like criticizing any one, just remember that all the people in this world haven’t had the advantages that you’ve had.&quot;  ## the 2nd line</span><br><span class="line">  intro_line3: &quot;每当你觉得想要批评什么人的时候，你切要记着，这个世界上的人并非都具备你禀有的条件。《了不起的盖茨比》&quot;</span><br><span class="line">  weibo: 3201133445     ## e.g. wuchong1014 or 2176287895 for http://weibo.com/2176287895</span><br><span class="line">  weibo_verifier: b3593ceb    ## e.g. b3593ceb Your weibo-show widget verifier ,if you use weibo-show it is needed.</span><br><span class="line">  tsina:      ## e.g. 2176287895  Your weibo ID,It will be used in share button.</span><br><span class="line">  douban:     ## e.g. wuchong1014 or your id for https://www.douban.com/people/wuchong1014</span><br><span class="line">  zhihu:      ## e.g. jark  for http://www.zhihu.com/people/jark</span><br><span class="line">  email : chengliangchengliang888@gmail.com     ## e.g. imjark@gmail.com</span><br><span class="line">  twitter:    ## e.g. jarkwu for https://twitter.com/jarkwu</span><br><span class="line">  github: amao12580     ## e.g. wuchong for https://github.com/wuchong</span><br><span class="line">  facebook:   ## e.g. imjark for https://facebook.com/imjark</span><br><span class="line">  linkedin:   ## e.g. wuchong1014 for https://www.linkedin.com/in/wuchong1014</span><br><span class="line">  google_plus:    ## e.g. &quot;111190881341800841449&quot; for https://plus.google.com/u/0/111190881341800841449, the &quot;&quot; is needed!</span><br><span class="line">  stackoverflow:  ## e.g. 3222790 for http://stackoverflow.com/users/3222790/jark</span><br><span class="line">## if you set them, the corresponding  share button will show on the footer</span><br><span class="line"></span><br><span class="line">#### Toc</span><br><span class="line">toc:</span><br><span class="line">  article: true   ## show contents in article.</span><br><span class="line">  aside: true     ## show contents in aside.</span><br><span class="line">## you can set both of the value to true of neither of them.</span><br><span class="line">## if you don&apos;t want display contents in a specified post,you can modify `front-matter` and add `toc: false`.</span><br><span class="line"></span><br><span class="line">#### Links</span><br><span class="line">links:</span><br><span class="line">  码农圈: https://coderq.com,一个面向程序员交流分享的新一代社区</span><br><span class="line">  Jark&apos;s Blog: http://wuchong.me</span><br><span class="line">  GitHub: https://github.com/amao12580</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### Comment</span><br><span class="line">duoshuo_shortname: amao12580   ## e.g. wuchong   your duoshuo short name.</span><br><span class="line">disqus_shortname:     ## e.g. wuchong   your disqus short name.</span><br><span class="line"></span><br><span class="line">#### Share button</span><br><span class="line">jiathis:</span><br><span class="line">  enable: false ## if you use jiathis as your share tool,the built-in share tool won&apos;t be display.</span><br><span class="line">  id:    ## e.g. 1889330 your jiathis ID.</span><br><span class="line">  tsina: ## e.g. 2176287895 Your weibo id,It will be used in share button.</span><br><span class="line"></span><br><span class="line">#### Analytics</span><br><span class="line">google_analytics:</span><br><span class="line">  enable: true</span><br><span class="line">  id: UA-75497011-1        ## e.g. UA-46321946-2 your google analytics ID.</span><br><span class="line">  site: http://amao12580.github.io      ## e.g. wuchong.me your google analytics site or set the value as auto.</span><br><span class="line">## You MUST upgrade to Universal Analytics first!</span><br><span class="line">## https://developers.google.com/analytics/devguides/collection/upgrade/?hl=zh_CN</span><br><span class="line">baidu_tongji:</span><br><span class="line">  enable: true</span><br><span class="line">  sitecode: e6d1f421bbc9962127a50488f9ed37d1 ## e.g. e6d1f421bbc9962127a50488f9ed37d1 your baidu tongji site code</span><br><span class="line">cnzz_tongji:</span><br><span class="line">  enable: false</span><br><span class="line">  siteid:    ## e.g. 1253575964 your cnzz tongji site id</span><br><span class="line">ibruce_tongji: # 不蒜子计数</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">#### Miscellaneous</span><br><span class="line">ShowCustomFont: true  ## you can change custom font in `variable.styl` and `font.styl` which in the theme folder `/jacman/source/css`.</span><br><span class="line">fancybox: true        ## if you use gallery post or want use fancybox please set the value to true.</span><br><span class="line">totop: true           ## if you want to scroll to top in every post set the value to true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### Custom Search</span><br><span class="line">google_cse:</span><br><span class="line">  enable: false</span><br><span class="line">  cx:   ## e.g. 018294693190868310296:abnhpuysycw your Custom Search ID.</span><br><span class="line">## https://www.google.com/cse/</span><br><span class="line">## To enable the custom search You must create a &quot;search&quot; folder in &apos;/source&apos; and a &quot;index.md&quot; file</span><br><span class="line">## set the &apos;front-matter&apos; as</span><br><span class="line">## layout: search</span><br><span class="line">## title: search</span><br><span class="line">## ---</span><br><span class="line">baidu_search:     ## http://zn.baidu.com/</span><br><span class="line">  enable: false</span><br><span class="line">  id:   ## e.g. &quot;783281470518440642&quot;  for your baidu search id</span><br><span class="line">  site: http://zhannei.baidu.com/cse/search  ## your can change to your site instead of the default site</span><br><span class="line"></span><br><span class="line">tinysou_search:     ## http://tinysou.com/</span><br><span class="line">  enable: false</span><br><span class="line">  id:  ## e.g. &quot;4ac092ad8d749fdc6293&quot; for your tiny search id</span><br></pre></td></tr></table></figure></p>
<p>Jacman主题布局配置文件：D:\GitHub\Hexo\themes\jacman\layout\layout.ejs</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (page.layout==&apos;post&apos; || page.layout==&apos;photo&apos;)&#123; %&gt;</span><br><span class="line"> &lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">      &lt;%- body %&gt;</span><br><span class="line">      &lt;%- partial(&apos;_partial/sidebar&apos;,&#123;item: page,table: true&#125;) %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;footer&gt;&lt;%- partial(&apos;_partial/footer&apos;) %&gt;&lt;/footer&gt;</span><br><span class="line">    &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;% &#125; else if(page.layout==&apos;page&apos;)&#123; %&gt;</span><br><span class="line">  &lt;% if(page.source.match(/\.md$/))&#123; %&gt;</span><br><span class="line">    &lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class="line">      &lt;body&gt;</span><br><span class="line">        &lt;header&gt;</span><br><span class="line">          &lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class="line">        &lt;/header&gt;</span><br><span class="line">        &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">          &lt;%- body %&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;footer&gt;&lt;%- partial(&apos;_partial/footer&apos;) %&gt;&lt;/footer&gt;</span><br><span class="line">        &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;</span><br><span class="line">      &lt;/body&gt;</span><br><span class="line">     &lt;/html&gt;</span><br><span class="line">     &lt;% &#125;else&#123; %&gt;</span><br><span class="line">    &lt;%- page.content %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125; else if(page.layout==&apos;search&apos;)&#123; %&gt;</span><br><span class="line">&lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">      &lt;header&gt;</span><br><span class="line">        &lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line">      &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">        &lt;%- partial(&apos;_partial/search&apos;)%&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;footer&gt;&lt;%- partial(&apos;_partial/footer&apos;) %&gt;&lt;/footer&gt;</span><br><span class="line">      &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">   &lt;/html&gt;</span><br><span class="line">&lt;% &#125; else if(page.layout==&apos;tags&apos;)&#123; %&gt;</span><br><span class="line"> &lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">      &lt;header&gt;</span><br><span class="line">        &lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line">      &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">          &lt;%- partial(&apos;_partial/tags&apos;)%&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;footer&gt;&lt;%- partial(&apos;_partial/footer&apos;) %&gt;&lt;/footer&gt;</span><br><span class="line">      &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">   &lt;/html&gt;</span><br><span class="line">&lt;% &#125; else if(page.layout==&apos;categories&apos;)&#123; %&gt;</span><br><span class="line"> &lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">      &lt;header&gt;</span><br><span class="line">        &lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line">      &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">          &lt;%- partial(&apos;_partial/categories&apos;)%&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;footer&gt;&lt;%- partial(&apos;_partial/footer&apos;) %&gt;&lt;/footer&gt;</span><br><span class="line">      &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">   &lt;/html&gt;</span><br><span class="line">&lt;% &#125; else if(page.category!=null||page.tag!=null||page.archive!=null) &#123; %&gt;</span><br><span class="line">  &lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">      &lt;header&gt;</span><br><span class="line">        &lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line">      &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">        &lt;%- body %&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;footer&gt;&lt;%- partial(&apos;_partial/footer&apos;) %&gt;&lt;/footer&gt;</span><br><span class="line">      &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">   &lt;/html&gt;</span><br><span class="line">&lt;% &#125; else &#123; %&gt;</span><br><span class="line"> &lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">      &lt;%- body %&gt;</span><br><span class="line">      &lt;%- partial(&apos;_partial/sidebar&apos;,&#123;item: page,table: false&#125;) %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;footer&gt;&lt;%- partial(&apos;_partial/footer&apos;) %&gt;&lt;/footer&gt;</span><br><span class="line">    &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;</span><br><span class="line">    &lt;a href=&quot;https://github.com/amao12580&quot;&gt;&lt;img style=&quot;position: absolute; top: 0; right: 0; border: 0;&quot; src=&quot;https://camo.githubusercontent.com/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67&quot; alt=&quot;Fork me on GitHub&quot; data-canonical-src=&quot;https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png&quot;&gt;&lt;/a&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line"> &lt;/html&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>
<p>Jacman主题页面尾部配置文件：D:\GitHub\Hexo\themes\jacman\layout\_partial\footer.ejs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;footer&quot; &gt;</span><br><span class="line">    &lt;% if(theme.author_img)&#123; %&gt;</span><br><span class="line">    &lt;div class=&quot;line&quot;&gt;</span><br><span class="line">        &lt;span&gt;&lt;/span&gt;</span><br><span class="line">        &lt;div class=&quot;author&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;%; &#125; %&gt;</span><br><span class="line">    &lt;% if(theme.author.intro_line1 || theme.author.intro_line2)&#123; %&gt;</span><br><span class="line">    &lt;section class=&quot;info&quot;&gt;</span><br><span class="line">        &lt;p&gt; &lt;%= theme.author.intro_line1 %&gt; &lt;br/&gt;</span><br><span class="line">            &lt;%= theme.author.intro_line2 %&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">     &lt;%; &#125; %&gt;</span><br><span class="line">    &lt;div class=&quot;social-font&quot; class=&quot;clearfix&quot;&gt;</span><br><span class="line">        &lt;% if(theme.author.weibo)&#123; %&gt;</span><br><span class="line">        &lt;a href=&quot;http://weibo.com/&lt;%= theme.author.weibo %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-weibo&quot; title=&quot;微博&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;%; &#125; %&gt;</span><br><span class="line">        &lt;% if(theme.author.github)&#123; %&gt;</span><br><span class="line">        &lt;a href=&quot;https://github.com/&lt;%=theme.author.github %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-github&quot; title=&quot;github&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;%; &#125; %&gt;</span><br><span class="line">        &lt;% if(theme.author.stackoverflow)&#123; %&gt;</span><br><span class="line">        &lt;a href=&quot;http://stackoverflow.com/users/&lt;%=theme.author.stackoverflow %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-stack-overflow&quot; title=&quot;stackoverflow&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;%; &#125; %&gt;</span><br><span class="line">        &lt;% if(theme.author.twitter)&#123; %&gt;</span><br><span class="line">        &lt;a href=&quot;https://twitter.com/&lt;%=theme.author.twitter %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-twitter&quot; title=&quot;twitter&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;%; &#125; %&gt;</span><br><span class="line">        &lt;% if(theme.author.facebook)&#123; %&gt;</span><br><span class="line">        &lt;a href=&quot;https://www.facebook.com/&lt;%=theme.author.facebook %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-facebook&quot; title=&quot;facebook&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;%; &#125; %&gt;</span><br><span class="line">        &lt;% if(theme.author.linkedin)&#123; %&gt;</span><br><span class="line">        &lt;a href=&quot;https://www.linkedin.com/in/&lt;%=theme.author.linkedin %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-linkedin&quot; title=&quot;linkedin&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;%; &#125; %&gt;</span><br><span class="line">        &lt;% if(theme.author.douban)&#123; %&gt;</span><br><span class="line">        &lt;a href=&quot;https://www.douban.com/people/&lt;%=theme.author.douban %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-douban&quot; title=&quot;豆瓣&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;%; &#125; %&gt;</span><br><span class="line">        &lt;% if(theme.author.zhihu)&#123; %&gt;</span><br><span class="line">        &lt;a href=&quot;http://www.zhihu.com/people/&lt;%=theme.author.zhihu %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-zhihu&quot; title=&quot;知乎&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;%; &#125; %&gt;</span><br><span class="line">        &lt;% if(theme.author.google_plus)&#123; %&gt;</span><br><span class="line">        &lt;a href=&quot;https://plus.google.com/&lt;%=theme.author.google_plus %&gt;?rel=author&quot; target=&quot;_blank&quot; class=&quot;icon-google_plus&quot; title=&quot;Google+&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;%; &#125; %&gt;</span><br><span class="line">        &lt;% if(theme.author.email)&#123; %&gt;</span><br><span class="line">        &lt;a href=&quot;mailto:&lt;%=theme.author.email %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-email&quot; title=&quot;Email Me&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;%; &#125; %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">            &lt;%  Array.prototype.S=String.fromCharCode(2);</span><br><span class="line">              Array.prototype.in_array=function(e)&#123; var r=new RegExp(this.S+e+this.S); return (r.test(this.S+this.join(this.S)+this.S)); &#125;;</span><br><span class="line">                var cc = new Array(&apos;by&apos;,&apos;by-nc&apos;,&apos;by-nc-nd&apos;,&apos;by-nc-sa&apos;,&apos;by-nd&apos;,&apos;by-sa&apos;,&apos;zero&apos;); %&gt;</span><br><span class="line">        &lt;% if (cc.in_array(theme.creative_commons) ) &#123; %&gt;</span><br><span class="line">                &lt;div class=&quot;cc-license&quot;&gt;</span><br><span class="line">          &lt;a href=&quot;http://creativecommons.org/licenses/&lt;%= theme.creative_commons %&gt;/4.0&quot; class=&quot;cc-opacity&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;&lt;%- config.root %&gt;img/cc-&lt;%= theme.creative_commons %&gt;.svg&quot; alt=&quot;Creative Commons&quot; /&gt;</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;%; &#125; %&gt;</span><br><span class="line"></span><br><span class="line">        &lt;p class=&quot;copyright&quot;&gt;</span><br><span class="line">        © &lt;%= new Date().getFullYear() %&gt;</span><br><span class="line">        &lt;% if (config.author) &#123; %&gt;</span><br><span class="line">        &lt;a href=&quot;&lt;%= config.root %&gt;about&quot; target=&quot;_blank&quot; title=&quot;&lt;%= config.author %&gt;&quot;&gt;&lt;%= config.author %&gt;&lt;/a&gt;</span><br><span class="line">        &lt;%; &#125; else &#123; %&gt;</span><br><span class="line">        &lt;a href=&quot;&lt;%= config.url %&gt;&quot; title=&quot;&lt;%= config.title %&gt;&quot;&gt;&lt;%= config.title %&gt;&lt;/a&gt;</span><br><span class="line">        &lt;%; &#125; %&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 不蒜子统计 --&gt;</span><br><span class="line">&lt;% if (theme.ibruce_tongji.enable)&#123; %&gt;</span><br><span class="line">&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;span id=&quot;busuanzi_container_site_pv&quot; style=&apos;display:none&apos;&gt;</span><br><span class="line">本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;,本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;，本文总阅读量&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;%; &#125; %&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-7备份的重要性"><a href="#2-7备份的重要性" class="headerlink" title="2.7备份的重要性"></a>2.7备份的重要性</h3><p>刚开始折腾时，经常出现改了很多配置，一运行就报错了，但是无法定位是哪些配置的改动导致的？<br>幸好我用Sublime Text 3修改的，有历史记录，这点真是太赞了！给你要的<a href="http://pan.baidu.com/s/1pLnDKW7" target="_blank" rel="external">链接</a>，密码：3ook</p>
<p>Hexo配置好后，最好做一次网盘私密备份，以免主机故障丢失。而且有了备份，在家或在公司，都可以愉快的写blog啦！</p>
<h2 id="3-可能遇到的问题及答案"><a href="#3-可能遇到的问题及答案" class="headerlink" title="3.可能遇到的问题及答案"></a>3.可能遇到的问题及答案</h2><p>1.hexo系列命令无法执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">D:\GitHub&gt; hexo c</span><br><span class="line">Usage: hexo &lt;command&gt;</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  help     Get help on a command.</span><br><span class="line">  init     Create a new Hexo folder.</span><br><span class="line">  version  Display version information.</span><br><span class="line"></span><br><span class="line">Global Options:</span><br><span class="line">  --config  Specify config file instead of using _config.yml</span><br><span class="line">  --cwd     Specify the CWD</span><br><span class="line">  --debug   Display all verbose messages in the terminal</span><br><span class="line">  --draft   Display draft posts</span><br><span class="line">  --safe    Disable all plugins and scripts</span><br><span class="line">  --silent  Hide output on console</span><br><span class="line"></span><br><span class="line">For more help, you can use &apos;hexo help [command]&apos; for the detailed information</span><br><span class="line">or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure></p>
<p>解决：请切换目录到Hexo安装目录后再执行。这是因为Hexo没有全局环境配置的问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd .\Hexo</span><br></pre></td></tr></table></figure></p>
<p>2.关于404页面的处理<br>搜索很多关于404页面的资料，都是把配置好的404.html，每次在hexo g命令后手工放在hexo的public目录下。这样子有个缺点，每次都需要手工操作一次，这对于程序员来说是极其不人道的，我想到一个点子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将404.html文件放在hexo的source目录下</span><br><span class="line">在hexod的全局配置文件:_config.yml，配置skip_render</span><br><span class="line">skip_render:</span><br><span class="line">  - README.md</span><br><span class="line">  - 404.htm</span><br></pre></td></tr></table></figure></p>
<p>3.如何在文章中插入图片？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在Hexo的source文件夹下，建一个文件夹“img”</span><br><span class="line">将想要插入到文章的图片，放到img文件夹下，图片最好是png格式，文件小而且不变形</span><br><span class="line">使用示例：![图片的名字](/img/图片001.png)</span><br></pre></td></tr></table></figure></p>
<p>4.如何在文章中插入代码段？<br>将需要显示为代码段的内容，用```前后包裹住<br><img src="/img/代码段.png" alt=""></p>
<p>显示的效果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码段1</span><br><span class="line">代码段2</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[记一次redis成功调优的过程]]></title>
      <url>http://amao12580.github.io/post/2016/03/A-successful-redis-tuning-record/</url>
      <content type="html"><![CDATA[<h2 id="我们怎么使用Redis？"><a href="#我们怎么使用Redis？" class="headerlink" title="我们怎么使用Redis？"></a>我们怎么使用Redis？</h2><p>公司目前主力开发的产品，是一个典型的平台电商型产品，包含了平台运营方、商家、消费者等角色。</p>
<p>公司提供电商平台，同时负责系统维护和系统保障；商家与公司进行签约后，入驻平台，将商品投放到平台进行展示；平台依据商家签约信息，进行商品与消费者之间的兴趣推荐，消费者通过商品与商家达成消费订单后，平台按单依据签约与商家抽取利润。商家发现日订单分析有了提升后，可能会与平台达成更多的合作。从而演变出了良好的商业发展模式。</p>
<p>平台电商型产品中，非常满足80/20法则(又称为:<a href="https://zh.wikipedia.org/wiki/%E5%B8%95%E9%9B%B7%E6%89%98%E6%B3%95%E5%88%99" target="_blank" rel="external">帕雷托法则</a>),查询的业务量远远多于写入的业务量，为了提高<a href="http://www.ha97.com/5095.html" target="_blank" rel="external">TPS</a>，降低对数据库的访问。我们也采取常规的做法，选用redis进行缓存常用业务数据。其中典型的就有：1.图片的信息、2.登录后的用户信息、3.全局超时锁、4.验证码。</p>
<p>关于redis的技术选型，其实在我参与产品开发之前就已经完成了，在这个产品里也作为缓存层在使用。产品目前还在雏形孵化阶段，没有考虑太多关于分布式以及高可用的方案，对redis的使用很粗糙，在团队内可能熟悉redis的Developer不多，或者说有空又有耐心还熟悉redis的Developer没有吧？后来与PM的沟通后得知确实如此！</p>
<h3 id="缓存图片信息"><a href="#缓存图片信息" class="headerlink" title="缓存图片信息"></a>缓存图片信息</h3><p>目前有很多业务在使用该缓存：商品的图片编辑，商家店面形象的图文自我介绍，用户针对订单的图文评价.</p>
<p>这一部分的数据，在产品启动时(没有黑科技，就是在web.xml，自定义listener。)，读取Mysql中的File表，load进redis，数据量约120W条，没有做任何的分库分表处理。</p>
<p>File表的结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `file` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;图片ID&apos;,</span><br><span class="line">  `uid` int(11) DEFAULT NULL COMMENT &apos;上传用户Id&apos;,</span><br><span class="line">  `crc32` char(8) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &apos;crc32校验和&apos;,</span><br><span class="line">  `url` varchar(256) COLLATE utf8mb4_unicode_ci DEFAULT &apos;&apos; COMMENT &apos;对外访问的URL&apos;,</span><br><span class="line">  `path` varchar(256) COLLATE utf8mb4_unicode_ci DEFAULT &apos;&apos; COMMENT &apos;存储的相对路径&apos;,</span><br><span class="line">  `filename` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &apos;&apos; COMMENT &apos;文件名字&apos;,</span><br><span class="line">  `size` int(11) DEFAULT NULL COMMENT &apos;图片大小(单位byte)&apos;,</span><br><span class="line">  `ext` char(5) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &apos;&apos; COMMENT &apos;图片后缀&apos;,</span><br><span class="line">  `is_image` tinyint(4) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;是否是图片，0为不是，1为是&apos;,</span><br><span class="line">  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;创建时间&apos;,</span><br><span class="line">  `storage_type` tinyint(4) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;图片存储介质，0为fileSystem，1阿里云,2表示ppw老数据&apos;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `filename` (`filename`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=1146617 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&apos;文件信息表&apos;;</span><br></pre></td></tr></table></figure></p>
<p>有意思的是，每次产品启动时，读取到的所有File表记录，进行for循环，每一次循环中，访问一次redis。而在产品关闭时，删除redis的key，从而清除缓存？如果数据量愈来愈多，不就像做过山车一样，启动时加载全量数据，使用量飚的很高，关闭时删除全量缓存，使用量逐渐落回低谷(redis有<a href="http://wangneng-168.iteye.com/blog/2100379" target="_blank" rel="external">内存释放机制</a>)。对于内存型中间件产品，这样的使用会带来很多的不可靠性。</p>
<p>启动时加载数据到redis时的处理过程,部分为伪码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">File表对应的实体类：</span><br><span class="line">public class File&#123;//与数据库字段名完全的一致</span><br><span class="line">    private int id;</span><br><span class="line">    private int uid;</span><br><span class="line">    private String crc32;</span><br><span class="line">    private String url;</span><br><span class="line">    private String path;</span><br><span class="line">    private String filename;</span><br><span class="line">    private int size;</span><br><span class="line">    private String ext;</span><br><span class="line">    private int is_image;</span><br><span class="line">    private Timestamp create_time;</span><br><span class="line">    private int storage_type;</span><br><span class="line"></span><br><span class="line">    //忽略 getter\setter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//调用Dao层访问Mysql数据库，取回File表的所有记录，每条记录包含所有字段。</span><br><span class="line">List&lt;File&gt; files=this.fileDao.getAll();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//读取File表的SQL：SELECT * FROM FILE;</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;files.size();i++)&#123;</span><br><span class="line">    this.cacheDao.setOneFileToRedis(files.get(i).getId(),files.get(i).getUrl());//调用Dao层访问Redis，将数据存入redis</span><br><span class="line">    //WTF?只需要2个字段，然而取回了所有字段？而且不能批量存入redis?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cacheDao的实现</span><br><span class="line">private final static String PHOTO_CACHE_KEY=&quot;photos&quot;;</span><br><span class="line">public void setOneFileToRedis(int id,String url)&#123;</span><br><span class="line">    this.jedis.hset(PHOTO_CACHE_KEY, id.toString(), url);//1.使用[Hash数据结构](https://redis.readthedocs.org/en/2.4/hash.html)。2.没有设置key有效期，即永久有效。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getOneFileInRedis(int id)&#123;</span><br><span class="line">    return this.jedis.hget(PHOTO_CACHE_KEY, id.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样图片信息缓存的结构看起来是这样:<br><img src="/img/photos在redis的数据结构示例.png" alt="photos在redis的数据结构示例"><br>实际的情况下，size远大于1000，上文说了约在120w左右，我的这个redis可视化工具(redisclient-win32.x86.2.0)无法获取size这样大的key，报SocketTimeOutException。猜测是向redis获取大key时，无法在一个socket包中写入，造成通讯失败。</p>
<p>以上cacheDao的实现中，没有提供一次批量获取所需的多个图片信息，例如“public Map<integer,string> getBatchFileInRedis(int[] ids)”，甚至在cache interface中都没有提供这样的接口定义。</integer,string></p>
<p>这样导致在上层逻辑中，出现大量一次性代码。因为调用不集中，给重构带来很大麻烦。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">这是分页获取商品列表的伪代码实现</span><br><span class="line"></span><br><span class="line">与数据库product表对应的实体类</span><br><span class="line">public class Product&#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private long price;</span><br><span class="line">    private int photoId;</span><br><span class="line"></span><br><span class="line">    //忽略 getter\setter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">真实的返回到app端的对象</span><br><span class="line">public class ProductFull&#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private long price;</span><br><span class="line">    private int photoId;</span><br><span class="line">    private String photoUrl;</span><br><span class="line"></span><br><span class="line">    //忽略 getter\setter</span><br><span class="line">&#125;</span><br><span class="line">public List&lt;ProductFull&gt; findProductByPage(int pageSize,int pageNo)&#123;</span><br><span class="line">    List&lt;Product&gt; products=this.productDao.findByPage(int pageSize,int pageNo);//调用Dao层访问Mysql</span><br><span class="line">    List&lt;ProductFull&gt; results=new ArrayList&lt;&gt;(products.size());</span><br><span class="line">    for(Product product:products)&#123;</span><br><span class="line">        ProductFull pf=new ProductFull();</span><br><span class="line">        pf.setId(product.getId());//其他的属性值都是类似的拷贝，或借助Apache-Common beanUtils组件进行拷贝。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String url=this.cacheDao.getOneFileInRedis(product.getPhotoId());//每一个循环项都访问了redis</span><br><span class="line">        pf.setPhotoUrl(url);</span><br><span class="line">        results.add(pf);</span><br><span class="line">    &#125;</span><br><span class="line">    return results;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">如果每个商品分页是10条，最坏情况下，需要访问1次Mysql+访问10次redis。非常严重的是，每个分页条数的大小由app端决定，服务端不限制，WTF?</span><br></pre></td></tr></table></figure></p>
<h3 id="缓存登录后的用户信息"><a href="#缓存登录后的用户信息" class="headerlink" title="缓存登录后的用户信息"></a>缓存登录后的用户信息</h3><p>在这个产品面向消费者以及商家，都推出了不同的APP。互联网APP为了提高用户体验，以及降低用户登录登出频次(用户的登录/登出操作，对服务器是比较大的开销)，都会对一次登陆成功的用户，默认在一段时间不需要再次登录。即服务器分配Token给APP本地保存，同时服务器保存Token，设置该Token在一段时间不活动后自动失效，APP后续与服务器的通信中，都需要提交该Token鉴权。这是很常规的做法，短时间有效，而且是非关键性小数据，一次写入多次读取，对于服务器来说，没有比memcached或redis更合适的选择了，那为什么没有选择memcached？我个人的猜测是memcached更适合做Object Store Server，而且很重要的redis具有丰富数据结构与<a href="http://www.cnblogs.com/EE-NovRain/p/3268476.html" target="_blank" rel="external">扩容与容灾机制</a>。</p>
<p>用户的第一次登录，服务端进行参数解析，鉴权后，就需要写入2次redis。<br>用户的登出接口中，直接是删除当前会话的redis记录。</p>
<p>第一次：写入本次登入的Token与用户信息的关联<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">登录成功后，从DB或Cache层获取用户数据，构造用户数据JSON</span><br><span class="line">String userLoginSuccessInfo=&quot;&#123;&quot;uid&quot;:12321,&quot;name&quot;:&quot;张三&quot;,&quot;sex&quot;:0,&quot;avatar_id&quot;:345643&#125;&quot;;</span><br><span class="line"></span><br><span class="line">cacheDao的实现</span><br><span class="line">private final static String SESSION_CACHE_KEY=&quot;session:&quot;;</span><br><span class="line">//登录成功</span><br><span class="line">public void setOneLoginSuccessToRedis(String token,String userLoginSuccessInfo)&#123;</span><br><span class="line">    this.jedis.setex(SESSION_CACHE_KEY+token, 30*24*60*60, userLoginSuccessInfo);//1.使用String数据结构。2.设置key有效期30天。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//鉴权</span><br><span class="line">public String getOneLoginSuccessInRedis(String token)&#123;</span><br><span class="line">    return this.jedis.get(SESSION_CACHE_KEY+token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//登出</span><br><span class="line">public void logoutSuccessInRedis(String token)&#123;</span><br><span class="line">    this.jedis.del(SESSION_CACHE_KEY+token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这个以&quot;session:&quot;开头的key里，并没有实现从uid如何获取token值？</span><br><span class="line">这会引发的问题：一个用户的多次登录，会生成多个以&quot;session:&quot;开头的key，没有覆盖之前登录的token。造成内存空间的浪费，以及不安全。正确的做法在下文会提到。</span><br></pre></td></tr></table></figure></p>
<p>第二次：写入本次登入的用户id与24小时内的积分获取信息。</p>
<p>有一个需求定义用户在登录后可以获取积分，但在24小时内的登录只算一次。</p>
<p>那在服务器端的是实现是，用户第一次登录成功后，在redis写入一个与该用户相关的key，并设置24小时后失效，然后再增加积分。用户在24小时内进行第二次登录，先读取redis是否有相关的key，使用exist命令，如果已经有了，就不增加积分了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">登录成功后，从DB或Cache层获取用户数据，构造用户与积分业务数据JSON</span><br><span class="line">int uid=158263;</span><br><span class="line"></span><br><span class="line">cacheDao的实现</span><br><span class="line">private final static String USER_ACTIVITY_CACHE_KEY=&quot;daily_activity_&quot;;</span><br><span class="line">public void setOneUserWithActivityToRedis(int uid)&#123;</span><br><span class="line">    this.jedis.setex(USER_ACTIVITY_CACHE_KEY+uid, 24*60*60, &quot;&quot;);//1.使用String数据结构。2.设置key有效期24h。3.value部分为空字符串？</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean checkOneUserWithActivityToRedis(int uid)&#123;</span><br><span class="line">    this.jedis.exists(USER_ACTIVITY_CACHE_KEY+uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这部分的业务属于典型案例，浪费内存空间。<br>第一个问题，不应该使用长前缀，每个key都需要set进内存，长前缀意味着空间占用，以及效率低下。<br>第二个问题，这不是明显可以使用<a href="https://redis.readthedocs.org/en/2.4/sorted_set.html" target="_blank" rel="external">Sorted Set数据结构</a>?，还可以省掉一次exists检查。</p>
<p>虽然redis的TPS很高，但是我们依旧要避免滥用。</p>
<h2 id="这次的问题的描述？"><a href="#这次的问题的描述？" class="headerlink" title="这次的问题的描述？"></a>这次的问题的描述？</h2><p>测试MM提出在性能测试环境中，有一些API在并发数到250~300时，出现很多报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis的相关错误</span><br><span class="line">Could not get a resource from the pool</span><br></pre></td></tr></table></figure></p>
<p>典型报错的接口有</p>
<ul>
<li>分页获取商品列表</li>
<li>用户登录</li>
</ul>
<p>应用中配置redis连接池上限值是1000，而在redis server端配置maxClients=10000;区区这点并发，就耗尽redis连接池资源了？绝不可能，问题还在更远的地方等着我.</p>
<p>性能测试环境配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">硬件配置</span><br><span class="line">操作系统    Linux Ubuntu 14.04.4 LTS</span><br><span class="line">CPU个数   4</span><br><span class="line">CPU时钟频率 2.6G</span><br><span class="line">内存  4G</span><br><span class="line">有无外部存储  云端存储</span><br><span class="line"></span><br><span class="line">软件配置</span><br><span class="line">docker  1.9.1</span><br><span class="line">mysql   5.6</span><br><span class="line">jdk 1.8.0_72</span><br><span class="line">solr    5.3.0</span><br><span class="line">redis   3.0.5</span><br></pre></td></tr></table></figure></p>
<h2 id="如何一步步的解决问题？"><a href="#如何一步步的解决问题？" class="headerlink" title="如何一步步的解决问题？"></a>如何一步步的解决问题？</h2><p>在描述问题产生背景时，其实也提到了很多不合理的地方，但<em>存在即合理</em>，处在现在的困境，一定有当时的无奈。现在我们一起来总结一下问题所在。</p>
<h3 id="对缓存图片的处理存在的问题"><a href="#对缓存图片的处理存在的问题" class="headerlink" title="对缓存图片的处理存在的问题"></a>对缓存图片的处理存在的问题</h3><ul>
<li>产品初始化时全量塞入redis/产品停止运行是全量卸掉</li>
<li>产品初始化时塞入redis时，没有做批量操作</li>
<li>对批量获取图片信息不支持，在接口层面就已经没有定义，对于可预见的需求没有进行考虑，这是架构设计的缺陷。</li>
<li>引申：大量的数据，放在一个key里，会出现问题，需要进行水平切分(Sharding)。</li>
</ul>
<h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>1.图片的Id数据在File表采用了<em>自增长</em>的方式生成，不会出现重复，并且有顺序。我们可以利用这一点，在产品初始化时，在Mysql数据库File表只查找2个字段：id/url。程序处理时，先写入reids一个key，使用Hash数据结构，isInitIng:photos-true，标明到正在初始化，其他产品节点不需要重复初始化。使用hmset的方式，一次性将多个键值对存入到redis。完成后，修改isInitIng:photos-false。当有了新图片时，先在Mysql数据库File表进行保存，得到这个图片的Id以及url，使用hset加入该图片到redis。如果需要修改某一张图片的url，也可以用hset。这样在产品停止运行时，是不需要删除redis关于图片的数据的。</p>
<p>2.cache层加入新接口，支持批量获取图片信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private final static String PHOTO_CACHE_KEY=&quot;photos&quot;;</span><br><span class="line">public void setFileToRedis(Map&lt;Integer,String&gt; photos)&#123;</span><br><span class="line">    this.jedis.hmset(PHOTO_CACHE_KEY, photos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Map&lt;Integer,String&gt; getBatchFileInRedis(int[] ids)&#123;</span><br><span class="line">    return this.jedis.hmget(PHOTO_CACHE_KEY, coverArrayToString(ids));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static String[] coverArrayToString(int[] ids)&#123;</span><br><span class="line">    String[] results=new String[ids.length];</span><br><span class="line">    for (int i = 0; i &lt; ids.length; i++) &#123;</span><br><span class="line">        results[i]=ids[i]+&quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对之前循环调用的上层代码进行修改，改为调用批量获取接口。</p>
<p>3.对于单个key承载大量的数据的情况，方案是对key下的values hash key进行分割，使用一定的算法将块状的数据均匀分布在多个key里。给一个<a href="http://blog.nosqlfan.com/html/3379.html" target="_blank" rel="external">参考链接</a>。</p>
<h3 id="对缓存用户登录的处理存在的问题"><a href="#对缓存用户登录的处理存在的问题" class="headerlink" title="对缓存用户登录的处理存在的问题"></a>对缓存用户登录的处理存在的问题</h3><ul>
<li>session的存储不合理，每次登陆都会生成一个新的key值</li>
<li>对USER_ACTIVITY_CACHE_KEY在value部分的数据结构不合理，应采用Sorted Set</li>
<li>对USER_ACTIVITY_CACHE_KEY的命名不合适，过长导致空间浪费和效率低下</li>
<li>因采用错误数据结构，USER_ACTIVITY_CACHE_KEY需要进行多一次的exists判断。</li>
</ul>
<h4 id="方案-1"><a href="#方案-1" class="headerlink" title="方案"></a>方案</h4><p>session的存储不合理的解决，通过新的key(uid:token)来反向标记uid与token的关系，2个key的超时时间保持一致，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uid:158742-token001</span><br></pre></td></tr></table></figure></p>
<p>在写入SESSION_CACHE_KEY时，同时写入到redis，为保证2次写入的原子性，需要使用<a href="https://redis.readthedocs.org/en/2.4/transaction.html" target="_blank" rel="external">redis的事务</a>。如果支持用户的多设备在线，只需要将key(uid:token)更改为Sorted Set结构。因为不存在资源的争夺，这个事务几乎不会失败。在用户登出时，删除掉当前会话信息以及用户关联的会话信息(同样是使用redis事务)。</p>
<p>注意，单机redis环境下，事务命令被完整的支持。扩展到多机redis协同工作时，如果使用了twemproxy，则事务命令不受支持，无法应用该方案。<a href="https://github.com/twitter/twemproxy/blob/master/notes/redis.md" target="_blank" rel="external">查看twemproxy对redis命令的支持情况</a>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">cacheDao的实现</span><br><span class="line">private final static String SESSION_CACHE_KEY=&quot;se:&quot;;//全称：&quot;session:&quot;，改善key命名，按业务进行简略，提升网络传输和存储效率。</span><br><span class="line">private final static String USER_TOKEN_CACHE_KEY=&quot;u:t:&quot;;//uid:token:</span><br><span class="line">//登录成功，保存用户登录Token。接收建议的token参数值，返回实际保存的token值。</span><br><span class="line">public String setOneLoginSuccessToRedis(int uid,String token,String userLoginSuccessInfo)&#123;//重构</span><br><span class="line">    if(checkOneUserTokenExists(uid))&#123;</span><br><span class="line">        token=getOneUserToken(uid);</span><br><span class="line">    &#125;</span><br><span class="line">    long expireTime=30*24*60*60;//设置key有效期30天。</span><br><span class="line">    String ret=this.jedis.watch(SESSION_CACHE_KEY+token,USER_TOKEN_CACHE_KEY+uid);//乐观锁，重试，在这里几乎不存在</span><br><span class="line">    if(ret==null||!ret.equals(&quot;OK&quot;))&#123;</span><br><span class="line">        log.error(&quot;redis watch 操作失败.ret:&#123;&#125;&quot;,ret);</span><br><span class="line">        this.jedis.unwatch();</span><br><span class="line">    &#125;</span><br><span class="line">    Transaction tx = this.jedis.multi();</span><br><span class="line">    tx.setex(SESSION_CACHE_KEY+token, expireTime, userLoginSuccessInfo);</span><br><span class="line">    tx.setex(USER_TOKEN_CACHE_KEY+uid, expireTime, token);</span><br><span class="line">    List&lt;Object&gt; results = tx.exec();</span><br><span class="line">    return token;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//检查用户登录Token是否已经存在</span><br><span class="line">public boolean checkOneUserTokenExists(int uid)&#123;//新方法</span><br><span class="line">    return this.jedis.exists(USER_TOKEN_CACHE_KEY+uid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//获取用户登录Token信息</span><br><span class="line">public String getOneUserToken(int uid)&#123;//新方法</span><br><span class="line">    return this.jedis.get(USER_TOKEN_CACHE_KEY+uid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//鉴权</span><br><span class="line">public String getOneLoginSuccessInRedis(String token)&#123;//不改动</span><br><span class="line">    return this.jedis.get(SESSION_CACHE_KEY+token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//登出</span><br><span class="line">public void logoutSuccessInRedis(String token)&#123;</span><br><span class="line">    String ret=this.jedis.watch(SESSION_CACHE_KEY+token,USER_TOKEN_CACHE_KEY+uid);//乐观锁，重试，在这里几乎不存在</span><br><span class="line">    if(ret==null||!ret.equals(&quot;OK&quot;))&#123;</span><br><span class="line">        log.error(&quot;redis watch 操作失败.ret:&#123;&#125;&quot;,ret);</span><br><span class="line">        this.jedis.unwatch();</span><br><span class="line">    &#125;</span><br><span class="line">    Transaction tx = this.jedis.multi();</span><br><span class="line">    tx.del(SESSION_CACHE_KEY+token);</span><br><span class="line">    tx.del(USER_TOKEN_CACHE_KEY+uid);</span><br><span class="line">    List&lt;Object&gt; results = tx.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="隐患和思考"><a href="#隐患和思考" class="headerlink" title="隐患和思考"></a>隐患和思考</h4><p>redis事务带来的问题，redis的事务设计比较暴力，这给应用层带来了麻烦。</p>
<ul>
<li>Redis的基本事务（basic transaction）需要用到MULTI命令和EXEC命令，这种事务可以让一个客户端在不被其他客户端打断的情况下执行多个命令。和关系数据库那种可以在执行的过程中进行回滚（rollback）的事务不同，在Redis里面，被MULTI命令和EXEC命令包围的所有命令会一个接一个地执行，直到所有命令都执行完毕为止。当一个事务执行完毕之后，Redis才会处理其他客户端的命令。</li>
<li><a href="http://redisdoc.com/topic/transaction.html" target="_blank" rel="external">Redis 在事务失败时不进行回滚，而是继续执行余下的命令</a></li>
</ul>
<p>基于此，redis事务会在客户端高并发时，其他客户端命令产生阻塞，而且事务回滚需要应用层自己解决。关于事务无法自动回滚，这在NoSQL领域是常见问题了。</p>
<h4 id="redis时间线设计"><a href="#redis时间线设计" class="headerlink" title="redis时间线设计"></a>redis时间线设计</h4><p>接下来对用户在24小时内的积分信息的处理进行改进，以及redis不支持对Set内的单个Element进行有效期设置，我们采用Sorted Set结构，结合Score特性和Quartz来达到元素过期被删除的目的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cacheDao的实现</span><br><span class="line">private final static String USER_ACTIVITY_CACHE_KEY=&quot;a:d&quot;;//全称：&quot;activity:daily:&quot;，改善key命名，按业务进行简略，提升网络传输和存储效率。</span><br><span class="line">public void setOneUserWithActivityToRedis(int uid)&#123;</span><br><span class="line">    this.jedis.zadd(USER_ACTIVITY_CACHE_KEY,System.currentTimeMillis(),uid+&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean checkOneUserWithActivityToRedis(int uid)&#123;</span><br><span class="line">    this.jedis.sismember(USER_ACTIVITY_CACHE_KEY,uid+&quot;&quot;);</span><br><span class="line">    long score=this.jedis.zscore(USER_ACTIVITY_CACHE_KEY,uid+&quot;&quot;);</span><br><span class="line">    if(score&gt;0)&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">另外加入一个计划任务，借助Quartz即可。</span><br><span class="line">String corn=*/1 * * * * ?  //每1秒钟执行1次</span><br><span class="line">public void cleanExpireUserWithActivity()&#123;</span><br><span class="line">    long now=System.currentTimeMillis();</span><br><span class="line">    long 1MAgo=now-60*1000;//1分钟前的时间</span><br><span class="line">    long remCount=this.jedis.zremrangeByScore(USER_ACTIVITY_CACHE_KEY,1MAgo,now);</span><br><span class="line">    log.info(&quot;成功删除的元素数量是：&#123;&#125;，执行时间是：&#123;&#125;&quot;,remCount,now);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="隐患和思考-1"><a href="#隐患和思考-1" class="headerlink" title="隐患和思考"></a>隐患和思考</h4><p>在上文给出的代码中，我们做了一定的容错性，每次删除过去1分钟的所有Element，这样Quartz出现故障时，如果在1分钟内得到fixed，影响的数据只限于1分钟内的Element。每1秒钟触发一次Quartz与删除过去1分钟的所有Element，这2个维度的频率需要权衡。</p>
<ul>
<li>过高频率的访问redis是否会有稳定性问题？</li>
<li>删除Element的时间区间过大，是否会影响redis执行效率(时间复杂度:<a href="http://redisdoc.com/sorted_set/zrevrangebyscore.html" target="_blank" rel="external">O(log(N)+M)</a>)，导致阻塞？</li>
<li>高频率删除Element，是否会影响redis的RDB与AOF备份，因此造成额外的问题？</li>
</ul>
<p>借助Quartz还有misfire的隐患，如何保障Quartz在每一秒钟都顺畅执行一次(Once and only once)，这涉及到操作系统、内存的可靠性，这是一个大的命题，我们不过多讨论。</p>
<p>记录一下对这类问题的思考</p>
<ul>
<li>可以对这个计划任务进行多机并行运行。例如：A计划与B计划都处于运行状态，A在奇数秒触发，B在偶数秒触发。进一步降低2秒内misfire的概率。</li>
<li>在Quartz启动Job时，检测到是业务高峰期，另开启一个异步线程，调用cleanExpireUserWithActivity方法，而cleanExpireUserWithActivity需要承受并发，即redis需要对zremrangeByScore命令支持并发，但redis是<a href="http://www.blogjava.net/caojianhua/archive/2013/01/28/394847.html" target="_blank" rel="external">单进程单线程模型</a>。</li>
<li>异步线程受制于redis，还可以进行改进，使用队列，如ActiveMQ。调用cleanExpireUserWithActivity逻辑进行调整，将命令序列化后写入到点对点队列，另外使用程序监听队列(即消费者端)，有新命令时取出，这里实际调用cleanExpireUserWithActivity，仅在调用成功后释放命令。</li>
<li>现在问题在于如何保障ActiveMQ的稳定运行了，应该还有改进方案。</li>
</ul>
<p>按照以上的方案进行重构后，性能得到显著提升，按理论来说稳定性会有提高，因为不具备稳定性测试的条件，没法比较。</p>
<h2 id="遇到了一些问题"><a href="#遇到了一些问题" class="headerlink" title="遇到了一些问题"></a>遇到了一些问题</h2><p>1.redis一次批量hmset过多时报错<br>hmset操作时，对于一次传入参数数量上限有要求。这取决于你的网络环境下，socket一次写入的字节数上限。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public String hmset(final String key, final Map&lt;String, String&gt; hash);</span><br></pre></td></tr></table></figure></p>
<p>在我本机的环境下(应用与redis都在本机，不同端口，redis以默认配置运行)，Map<string, string=""> hash的size大于5w左右就会报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketException: Software caused connection abort: socket write error</span><br><span class="line">    at redis.clients.jedis.Protocol.sendCommand(Protocol.java:98)</span><br><span class="line">    at redis.clients.jedis.Protocol.sendCommand(Protocol.java:78)</span><br><span class="line">    at redis.clients.jedis.Connection.sendCommand(Connection.java:101)</span><br><span class="line">    at redis.clients.jedis.BinaryClient.hmset(BinaryClient.java:246)</span><br><span class="line">    at redis.clients.jedis.Client.hmset(Client.java:171)</span><br><span class="line">    at redis.clients.jedis.Jedis.hmset(Jedis.java:652)</span><br></pre></td></tr></table></figure></string,></p>
<p>在这种情况下，必需要将大Map切分成一块块的Map，循环调用hmset<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">final static int maxEveryTurn=5000;//定义每次最多批量塞入redis的key数量</span><br><span class="line">    /**</span><br><span class="line">     * 批量存储到redis的key数量太多，必需切分成小块存储</span><br><span class="line">     */</span><br><span class="line">    private static void setTooManyToJedis(Jedis jedis, Map&lt;String, String&gt; map) &#123;</span><br><span class="line">        int size=map.size();</span><br><span class="line">        int pieceNum=size/maxEveryTurn;</span><br><span class="line">        if(size&gt;(pieceNum*maxEveryTurn))&#123;</span><br><span class="line">            pieceNum+=1;</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line">        List&lt;Map&lt;String, String&gt;&gt; list=new ArrayList&lt;&gt;(pieceNum);</span><br><span class="line">        for (int i=0;i&lt;pieceNum;i++)&#123;</span><br><span class="line">            list.add(new HashMap&lt;&gt;(maxEveryTurn));</span><br><span class="line">        &#125;</span><br><span class="line">        while (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;String, String&gt; entry = iterator.next();</span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            int hashCode = Math.abs(String.valueOf(key).hashCode());</span><br><span class="line">            int index=hashCode % pieceNum;</span><br><span class="line">            list.get(index).put(key, map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        map.clear();</span><br><span class="line">        for (Map&lt;String, String&gt; pieceMap:list)&#123;</span><br><span class="line">            setToJedis(jedis, pieceMap);</span><br><span class="line">        &#125;</span><br><span class="line">        list.clear();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>2.持续写redis时遇到rdb问题<br>在完成以上方案的改进后，测试人员的用户登录这个接口在进行性能回归测试时，使用gatling配置250个工作线程进行并发，一共完成50w的用户登录后就算是结束，再根据生成的测试报告分析。<br>刚开始每次压到20多w的用户登录时，就会报错，redis连接池无连接了。分析代码是配置了testOnBorrow:true，这个配置会在获取到连接后检查该连接的有效性，如果无效就丢弃，即在连接池删掉一个连接。而此时redis因为问题无法执行用户端的任何命令，所以所有连接都被当做无效连接被丢弃？直到连接池空了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在redis命令行执行</span><br><span class="line">set test 12321</span><br><span class="line">返回错误：</span><br><span class="line">(error) MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.</span><br></pre></td></tr></table></figure></p>
<p>这是因为默认的redis配置是以<a href="http://shanks.leanote.com/post/Untitled-55ca439338f41148cd000759-22" target="_blank" rel="external">RDB的方式</a>进行定期存盘，而存盘时，会拒绝所有外部命令的写入(存盘失败后也会拒绝写入)。因为目前在redis的数据都处于可丢，解决方式也相当的粗暴。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.保证redis处于运行状态，查询系统6379端口的监听情况</span><br><span class="line">2.顺序执行以下命令行，遇到错误请终止</span><br><span class="line">docker exec -it test_redis_1 /bin/bash</span><br><span class="line">cd usr/local/bin</span><br><span class="line">./redis-cli.sh</span><br><span class="line">config set stop-writes-on-bgsave-error no</span><br><span class="line">config set save &quot;&quot;</span><br><span class="line">quit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure></p>
<p>执行完以后，重启应用，再压测，呵呵，bug关闭。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.在最后一步提到RDB定期存盘，解决方案存在问题，强行关闭，会导致redis中的数据存在丢失风险，在这里建议有条件的，配置redis为1主1从，Master不进行任何形式的存盘，而Slave配置RDB和AOF方式的存盘，双保险。应用只连接Master即可。。注意Slave与Master第一次进行同步时会使用全量复制，对资源会有比较大的消耗，尽量选择在业务平峰期进行。<br>引申阅读，Master在这里成为了单点，为了Master的高可用，还有进一步的方案，1个Master下挂2个Slave，其中1个Slave(称为A)负责2种方式的存盘，另一个Slave(称为B)作为Master的热备，在Master故障后，参与到投票，成为新的Master，而B节点切换到A，接受A的增量同步。注意自动failover时，外部需要关闭写入命令。完成failover后，使用ip映射切换，使应用层重新恢复使用，相应的，应用层需要做到一定的容错性。实际生产中，不会要求应用层去做容错性措施，会有各种中间件(twemproxy)自动处理。</p>
<p>2.以上业务中对<a href="https://www.ttlsa.com/redis/redis-database/" target="_blank" rel="external">redis的16个数据库</a>没有使用好，可以按业务将数据存储到不同数据库，隔离影响。</p>
<h3 id="常用命令合集"><a href="#常用命令合集" class="headerlink" title="常用命令合集"></a>常用命令合集</h3><p>调试过程中，由于可视化工具对redis支持的不够好，使用了很多redis的命令行，现在我们总结一下吧！<br>由于docker的风行，好处多多，我们在测试环境、线上环境也使用了docker/docker-compose</p>
<h4 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker-compose ps          //查看yml文件中所有容器的运行情况</span><br><span class="line">docker-compose up -d xw    //将yml文件中容器名称定义为xw的容器，以后台运行的方式运行起来，如果是tomcat镜像，会调用tomcat的startup.sh.</span><br><span class="line">docker-compose stop xw     //将yml文件中容器名称定义为xw的容器停止，如果是tomcat镜像，会调用tomcat的shutdown.sh</span><br><span class="line">docker-compose stop        //查看yml文件中所有容器进行停止</span><br><span class="line">docker-compose rm xw       //移除xw镜像</span><br><span class="line">docker-compose build xw    //对xw进行镜像构建</span><br></pre></td></tr></table></figure>
<h4 id="redis-cli-sh-info"><a href="#redis-cli-sh-info" class="headerlink" title="./redis-cli.sh/info"></a>./redis-cli.sh/info</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">F:\Redis&gt; ./redis-cli</span><br><span class="line">127.0.0.1:6379&gt; info</span><br><span class="line"># Server</span><br><span class="line">redis_version:3.0.501</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">redis_build_id:ba05b51e58eb9205</span><br><span class="line">redis_mode:standalone</span><br><span class="line">os:Windows</span><br><span class="line">arch_bits:64</span><br><span class="line">multiplexing_api:WinSock_IOCP</span><br><span class="line">process_id:1552</span><br><span class="line">run_id:d3f2efa1c6cf26c7cf9246c2fcaca89b8e109439</span><br><span class="line">tcp_port:6379</span><br><span class="line">uptime_in_seconds:462095</span><br><span class="line">uptime_in_days:5</span><br><span class="line">hz:10</span><br><span class="line">lru_clock:16404129</span><br><span class="line">config_file:F:\Redis\redis.windows.conf</span><br><span class="line"></span><br><span class="line"># Clients</span><br><span class="line">connected_clients:1</span><br><span class="line">client_longest_output_list:0</span><br><span class="line">client_biggest_input_buf:0</span><br><span class="line">blocked_clients:0</span><br><span class="line"></span><br><span class="line"># Memory</span><br><span class="line">used_memory:842704</span><br><span class="line">used_memory_human:822.95K</span><br><span class="line">used_memory_rss:804920</span><br><span class="line">used_memory_peak:374731600</span><br><span class="line">used_memory_peak_human:357.37M</span><br><span class="line">used_memory_lua:36864</span><br><span class="line">mem_fragmentation_ratio:0.96</span><br><span class="line">mem_allocator:jemalloc-3.6.0</span><br><span class="line"></span><br><span class="line"># Persistence</span><br><span class="line">loading:0</span><br><span class="line">rdb_changes_since_last_save:0</span><br><span class="line">rdb_bgsave_in_progress:0</span><br><span class="line">rdb_last_save_time:1459242952</span><br><span class="line">rdb_last_bgsave_status:ok</span><br><span class="line">rdb_last_bgsave_time_sec:1</span><br><span class="line">rdb_current_bgsave_time_sec:-1</span><br><span class="line">aof_enabled:0</span><br><span class="line">aof_rewrite_in_progress:0</span><br><span class="line">aof_rewrite_scheduled:0</span><br><span class="line">aof_last_rewrite_time_sec:-1</span><br><span class="line">aof_current_rewrite_time_sec:-1</span><br><span class="line">aof_last_bgrewrite_status:ok</span><br><span class="line">aof_last_write_status:ok</span><br><span class="line"></span><br><span class="line"># Stats</span><br><span class="line">total_connections_received:1010</span><br><span class="line">total_commands_processed:49859</span><br><span class="line">instantaneous_ops_per_sec:0</span><br><span class="line">total_net_input_bytes:1822381802</span><br><span class="line">total_net_output_bytes:3650427</span><br><span class="line">instantaneous_input_kbps:0.00</span><br><span class="line">instantaneous_output_kbps:0.00</span><br><span class="line">rejected_connections:0</span><br><span class="line">sync_full:0</span><br><span class="line">sync_partial_ok:0</span><br><span class="line">sync_partial_err:0</span><br><span class="line">expired_keys:1073</span><br><span class="line">evicted_keys:0</span><br><span class="line">keyspace_hits:20782</span><br><span class="line">keyspace_misses:738</span><br><span class="line">pubsub_channels:0</span><br><span class="line">pubsub_patterns:0</span><br><span class="line">latest_fork_usec:388023</span><br><span class="line">migrate_cached_sockets:0</span><br><span class="line"></span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_repl_offset:0</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"></span><br><span class="line"># CPU</span><br><span class="line">used_cpu_sys:9.45</span><br><span class="line">used_cpu_user:38.25</span><br><span class="line">used_cpu_sys_children:0.00</span><br><span class="line">used_cpu_user_children:0.00</span><br><span class="line"></span><br><span class="line"># Cluster</span><br><span class="line">cluster_enabled:0</span><br><span class="line"></span><br><span class="line"># Keyspace</span><br><span class="line">db0:keys=1,expires=0,avg_ttl=0</span><br></pre></td></tr></table></figure>
<h4 id="set-get"><a href="#set-get" class="headerlink" title="set/get"></a>set/get</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set test 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get test</span><br><span class="line">&quot;123456&quot;</span><br></pre></td></tr></table></figure>
<h4 id="hset-hmset-hget-hmget"><a href="#hset-hmset-hget-hmget" class="headerlink" title="hset/hmset/hget/hmget"></a>hset/hmset/hget/hmget</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset testHash key1 value11</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hget testHash</span><br><span class="line">(error) ERR wrong number of arguments for &apos;hget&apos; command</span><br><span class="line">127.0.0.1:6379&gt; hget testHash key1</span><br><span class="line">&quot;value11&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hset testHash key1 value11 key2 value22</span><br><span class="line">(error) ERR wrong number of arguments for &apos;hset&apos; command</span><br><span class="line">127.0.0.1:6379&gt; hmset testHash key1 value11 key2 value22</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget testHash key1 key2</span><br><span class="line">1) &quot;value11&quot;</span><br><span class="line">2) &quot;value22&quot;</span><br></pre></td></tr></table></figure>
<h4 id="hlen-keys"><a href="#hlen-keys" class="headerlink" title="hlen/keys"></a>hlen/keys</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; len test</span><br><span class="line">(error) ERR unknown command &apos;len&apos;</span><br><span class="line">127.0.0.1:6379&gt; hlen testHash</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; keys test</span><br><span class="line">1) &quot;test&quot;</span><br><span class="line">127.0.0.1:6379&gt; keys testHash</span><br><span class="line">1) &quot;testHash&quot;</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;testHash&quot;</span><br><span class="line">2) &quot;test&quot;</span><br><span class="line">3) &quot;message-queue-sms&quot;</span><br></pre></td></tr></table></figure>
<h4 id="config-set-get"><a href="#config-set-get" class="headerlink" title="config set/get"></a>config set/get</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get *</span><br><span class="line">  1) &quot;dbfilename&quot;</span><br><span class="line">  2) &quot;dump.rdb&quot;</span><br><span class="line">  3) &quot;requirepass&quot;</span><br><span class="line">  4) &quot;&quot;</span><br><span class="line">  5) &quot;masterauth&quot;</span><br><span class="line">  6) &quot;&quot;</span><br><span class="line">  7) &quot;unixsocket&quot;</span><br><span class="line">  8) &quot;&quot;</span><br><span class="line">  9) &quot;logfile&quot;</span><br><span class="line"> 10) &quot;&quot;</span><br><span class="line"> 11) &quot;pidfile&quot;</span><br><span class="line"> 12) &quot;/var/run/redis.pid&quot;</span><br><span class="line"> 13) &quot;maxmemory&quot;</span><br><span class="line"> 14) &quot;512000000&quot;</span><br><span class="line"> 15) &quot;maxmemory-samples&quot;</span><br><span class="line"> 16) &quot;5&quot;</span><br><span class="line"> 17) &quot;timeout&quot;</span><br><span class="line"> 18) &quot;0&quot;</span><br><span class="line"> 19) &quot;tcp-keepalive&quot;</span><br><span class="line"> 20) &quot;0&quot;</span><br><span class="line"> 21) &quot;auto-aof-rewrite-percentage&quot;</span><br><span class="line"> 22) &quot;100&quot;</span><br><span class="line"> 23) &quot;auto-aof-rewrite-min-size&quot;</span><br><span class="line"> 24) &quot;67108864&quot;</span><br><span class="line"> 25) &quot;hash-max-ziplist-entries&quot;</span><br><span class="line"> 26) &quot;512&quot;</span><br><span class="line"> 27) &quot;hash-max-ziplist-value&quot;</span><br><span class="line"> 28) &quot;64&quot;</span><br><span class="line"> 29) &quot;list-max-ziplist-entries&quot;</span><br><span class="line"> 30) &quot;512&quot;</span><br><span class="line"> 31) &quot;list-max-ziplist-value&quot;</span><br><span class="line"> 32) &quot;64&quot;</span><br><span class="line"> 33) &quot;set-max-intset-entries&quot;</span><br><span class="line"> 34) &quot;512&quot;</span><br><span class="line"> 35) &quot;zset-max-ziplist-entries&quot;</span><br><span class="line"> 36) &quot;128&quot;</span><br><span class="line"> 37) &quot;zset-max-ziplist-value&quot;</span><br><span class="line"> 38) &quot;64&quot;</span><br><span class="line"> 39) &quot;hll-sparse-max-bytes&quot;</span><br><span class="line"> 40) &quot;3000&quot;</span><br><span class="line"> 41) &quot;lua-time-limit&quot;</span><br><span class="line"> 42) &quot;5000&quot;</span><br><span class="line"> 43) &quot;slowlog-log-slower-than&quot;</span><br><span class="line"> 44) &quot;10000&quot;</span><br><span class="line"> 45) &quot;latency-monitor-threshold&quot;</span><br><span class="line"> 46) &quot;0&quot;</span><br><span class="line"> 47) &quot;slowlog-max-len&quot;</span><br><span class="line"> 48) &quot;128&quot;</span><br><span class="line"> 49) &quot;port&quot;</span><br><span class="line"> 50) &quot;6379&quot;</span><br><span class="line"> 51) &quot;tcp-backlog&quot;</span><br><span class="line"> 52) &quot;511&quot;</span><br><span class="line"> 53) &quot;databases&quot;</span><br><span class="line"> 54) &quot;16&quot;</span><br><span class="line"> 55) &quot;repl-ping-slave-period&quot;</span><br><span class="line"> 56) &quot;10&quot;</span><br><span class="line"> 57) &quot;repl-timeout&quot;</span><br><span class="line"> 58) &quot;60&quot;</span><br><span class="line"> 59) &quot;repl-backlog-size&quot;</span><br><span class="line"> 60) &quot;1048576&quot;</span><br><span class="line"> 61) &quot;repl-backlog-ttl&quot;</span><br><span class="line"> 62) &quot;3600&quot;</span><br><span class="line"> 63) &quot;maxclients&quot;</span><br><span class="line"> 64) &quot;10000&quot;</span><br><span class="line"> 65) &quot;watchdog-period&quot;</span><br><span class="line"> 66) &quot;0&quot;</span><br><span class="line"> 67) &quot;slave-priority&quot;</span><br><span class="line"> 68) &quot;100&quot;</span><br><span class="line"> 69) &quot;min-slaves-to-write&quot;</span><br><span class="line"> 70) &quot;0&quot;</span><br><span class="line"> 71) &quot;min-slaves-max-lag&quot;</span><br><span class="line"> 72) &quot;10&quot;</span><br><span class="line"> 73) &quot;hz&quot;</span><br><span class="line"> 74) &quot;10&quot;</span><br><span class="line"> 75) &quot;cluster-node-timeout&quot;</span><br><span class="line"> 76) &quot;15000&quot;</span><br><span class="line"> 77) &quot;cluster-migration-barrier&quot;</span><br><span class="line"> 78) &quot;1&quot;</span><br><span class="line"> 79) &quot;cluster-slave-validity-factor&quot;</span><br><span class="line"> 80) &quot;10&quot;</span><br><span class="line"> 81) &quot;repl-diskless-sync-delay&quot;</span><br><span class="line"> 82) &quot;5&quot;</span><br><span class="line"> 83) &quot;cluster-require-full-coverage&quot;</span><br><span class="line"> 84) &quot;yes&quot;</span><br><span class="line"> 85) &quot;no-appendfsync-on-rewrite&quot;</span><br><span class="line"> 86) &quot;no&quot;</span><br><span class="line"> 87) &quot;slave-serve-stale-data&quot;</span><br><span class="line"> 88) &quot;yes&quot;</span><br><span class="line"> 89) &quot;slave-read-only&quot;</span><br><span class="line"> 90) &quot;yes&quot;</span><br><span class="line"> 91) &quot;stop-writes-on-bgsave-error&quot;</span><br><span class="line"> 92) &quot;yes&quot;</span><br><span class="line"> 93) &quot;daemonize&quot;</span><br><span class="line"> 94) &quot;no&quot;</span><br><span class="line"> 95) &quot;rdbcompression&quot;</span><br><span class="line"> 96) &quot;yes&quot;</span><br><span class="line"> 97) &quot;rdbchecksum&quot;</span><br><span class="line"> 98) &quot;yes&quot;</span><br><span class="line"> 99) &quot;activerehashing&quot;</span><br><span class="line">100) &quot;yes&quot;</span><br><span class="line">101) &quot;repl-disable-tcp-nodelay&quot;</span><br><span class="line">102) &quot;no&quot;</span><br><span class="line">103) &quot;repl-diskless-sync&quot;</span><br><span class="line">104) &quot;no&quot;</span><br><span class="line">105) &quot;aof-rewrite-incremental-fsync&quot;</span><br><span class="line">106) &quot;yes&quot;</span><br><span class="line">107) &quot;aof-load-truncated&quot;</span><br><span class="line">108) &quot;yes&quot;</span><br><span class="line">109) &quot;appendonly&quot;</span><br><span class="line">110) &quot;no&quot;</span><br><span class="line">111) &quot;dir&quot;</span><br><span class="line">112) &quot;F:\\Redis&quot;</span><br><span class="line">113) &quot;maxmemory-policy&quot;</span><br><span class="line">114) &quot;noeviction&quot;</span><br><span class="line">115) &quot;appendfsync&quot;</span><br><span class="line">116) &quot;everysec&quot;</span><br><span class="line">117) &quot;save&quot;</span><br><span class="line">118) &quot;jd 900 jd 300 jd 60&quot;</span><br><span class="line">119) &quot;loglevel&quot;</span><br><span class="line">120) &quot;verbose&quot;</span><br><span class="line">121) &quot;client-output-buffer-limit&quot;</span><br><span class="line">122) &quot;normal 0 0 0 slave 268435456 67108864 60 pubsub 33554432 8388608 60&quot;</span><br><span class="line">123) &quot;unixsocketperm&quot;</span><br><span class="line">124) &quot;0&quot;</span><br><span class="line">125) &quot;slaveof&quot;</span><br><span class="line">126) &quot;&quot;</span><br><span class="line">127) &quot;notify-keyspace-events&quot;</span><br><span class="line">128) &quot;&quot;</span><br><span class="line">129) &quot;bind&quot;</span><br><span class="line">130) &quot;&quot;</span><br><span class="line">127.0.0.1:6379&gt; config set save &quot;&quot;</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<h4 id="flushdb-flushall"><a href="#flushdb-flushall" class="headerlink" title="flushdb/flushall"></a>flushdb/flushall</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; flushall</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li>redis删除有序集合部分过期元素：<a href="http://caozm.blog.51cto.com/1118764/1389168" target="_blank" rel="external">http://caozm.blog.51cto.com/1118764/1389168</a></li>
<li>节约内存：Instagram的Redis实践：<a href="http://blog.nosqlfan.com/html/3379.html" target="_blank" rel="external">http://blog.nosqlfan.com/html/3379.html</a></li>
<li>redis持久化机制：<a href="http://shanks.leanote.com/post/Untitled-55ca439338f41148cd000759-22" target="_blank" rel="external">http://shanks.leanote.com/post/Untitled-55ca439338f41148cd000759-22</a></li>
<li>Redis事务的分析及改进：<a href="https://segmentfault.com/a/1190000002594059" target="_blank" rel="external">https://segmentfault.com/a/1190000002594059</a></li>
<li>redis 多数据库：<a href="https://www.ttlsa.com/redis/redis-database/" target="_blank" rel="external">https://www.ttlsa.com/redis/redis-database/</a></li>
<li>利用Sorted Set数据结构，为元素设置有效期：<a href="http://stackoverflow.com/questions/7577923/redis-possible-to-expire-an-element-in-an-array-or-sorted-set" target="_blank" rel="external">http://stackoverflow.com/questions/7577923/redis-possible-to-expire-an-element-in-an-array-or-sorted-set</a></li>
<li>redis的Slave选举与优先级：<a href="https://segmentfault.com/a/1190000002685515" target="_blank" rel="external">https://segmentfault.com/a/1190000002685515</a></li>
<li>利用代理中间件实现大规模Redis集群：<a href="http://www.imooc.com/article/4343" target="_blank" rel="external">http://www.imooc.com/article/4343</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL查询提高篇：捋清连接查询的那些事儿]]></title>
      <url>http://amao12580.github.io/post/2016/03/SQL-improve-elegant-use-join-query/</url>
      <content type="html"><![CDATA[<p>数据库中的表可通过外键将彼此联系起来。主键（Primary Key）是一个列，在这个列中的每一行的值都是唯一的。在表中，每个主键的值都是唯一的。这样做的目的是在不重复每个表中的所有数据的情况下，把表间的数据交叉捆绑在一起。</p>
<p>而在两个表之间建立关联关系，是不要求任何一个表的关联列(column)是主键的，这个关联列可以是任何类型的列，但是要求，两个表的关联列可以做关联关系的条件计算，为避免转换影响效率，两个关联列最好保持类型、长度一致。</p>
<p>为方便说明，定义以下2张表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">用户信息表</span><br><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `uid` int(11) NOT NULL COMMENT &apos;用户id&apos;,</span><br><span class="line">  `name` varchar(10) DEFAULT NULL COMMENT &apos;姓名&apos;,</span><br><span class="line">  `sex` tinyint(1) DEFAULT NULL COMMENT &apos;性别&apos;,</span><br><span class="line">  `age` tinyint(2) DEFAULT NULL COMMENT &apos;年龄&apos;,</span><br><span class="line">  `mobile` varchar(11) DEFAULT NULL COMMENT &apos;手机号码&apos;,</span><br><span class="line">  `password` varchar(64) NOT NULL COMMENT &apos;密码&apos;,</span><br><span class="line">  `register_time` datetime NOT NULL COMMENT &apos;注册时间&apos;,</span><br><span class="line">  PRIMARY KEY (`uid`),</span><br><span class="line">  UNIQUE KEY `index_mobile` (`mobile`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO `user` VALUES (&apos;100&apos;, &apos;张三&apos;, &apos;1&apos;, &apos;28&apos;, &apos;13547521456&apos;, &apos;ASDAWQ@!#SDF@#$%XCF&apos;, &apos;2016-03-30 17:47:51&apos;);</span><br><span class="line">INSERT INTO `user` VALUES (&apos;101&apos;, &apos;李四&apos;, &apos;2&apos;, &apos;35&apos;, &apos;17025856329&apos;, &apos;234ASD@#$@#$AFSDFRT&apos;, &apos;2016-03-30 17:48:34&apos;);</span><br><span class="line">INSERT INTO `user` VALUES (&apos;102&apos;, &apos;王五&apos;, &apos;1&apos;, &apos;48&apos;, &apos;15925874536&apos;, &apos;#$%SDFSDR@#$%@#$#@&apos;, &apos;2016-03-30 17:53:49&apos;);</span><br><span class="line"></span><br><span class="line">订单信息表</span><br><span class="line">CREATE TABLE `order` (</span><br><span class="line">  `order_id` int(11) NOT NULL COMMENT &apos;订单编号&apos;,</span><br><span class="line">  `uid` int(11) DEFAULT NULL COMMENT &apos;用户Id&apos;,</span><br><span class="line">  `amout` mediumtext NOT NULL COMMENT &apos;订单金额(单位为分)&apos;,</span><br><span class="line">  `status` tinyint(2) DEFAULT NULL COMMENT &apos;订单状态&apos;,</span><br><span class="line">  `order_time` datetime DEFAULT NULL COMMENT &apos;订单时间&apos;,</span><br><span class="line">  PRIMARY KEY (`order_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO `order` VALUES (&apos;200&apos;, &apos;100&apos;, &apos;5899&apos;, &apos;0&apos;, &apos;2016-03-30 17:54:20&apos;);</span><br><span class="line">INSERT INTO `order` VALUES (&apos;201&apos;, &apos;100&apos;, &apos;6799&apos;, &apos;0&apos;, &apos;2016-03-30 17:54:38&apos;);</span><br><span class="line">INSERT INTO `order` VALUES (&apos;202&apos;, &apos;101&apos;, &apos;12699&apos;, &apos;0&apos;, &apos;2016-03-30 17:55:01&apos;);</span><br></pre></td></tr></table></figure></p>
<p>数据库现在2张表的数据看起来是这样：<br>user表</p>
<table>
<thead>
<tr>
<th>uid</th>
<th style="text-align:center">name</th>
<th style="text-align:right">sex</th>
<th style="text-align:right">age</th>
<th style="text-align:right">mobile</th>
<th style="text-align:right">password</th>
<th style="text-align:right">register_time</th>
</tr>
</thead>
<tbody>
<tr>
<td>100</td>
<td style="text-align:center">张三</td>
<td style="text-align:right">1</td>
<td style="text-align:right">28</td>
<td style="text-align:right">13547521456</td>
<td style="text-align:right">password</td>
<td style="text-align:right">2016-03-30 17:47:51</td>
</tr>
<tr>
<td>101</td>
<td style="text-align:center">李四</td>
<td style="text-align:right">2</td>
<td style="text-align:right">35</td>
<td style="text-align:right">17025856329</td>
<td style="text-align:right">password</td>
<td style="text-align:right">2016-03-30 17:48:34</td>
</tr>
<tr>
<td>102</td>
<td style="text-align:center">王五</td>
<td style="text-align:right">1</td>
<td style="text-align:right">48</td>
<td style="text-align:right">15925874536</td>
<td style="text-align:right">password</td>
<td style="text-align:right">2016-03-30 17:53:49</td>
</tr>
</tbody>
</table>
<p>order表</p>
<table>
<thead>
<tr>
<th>order_id</th>
<th style="text-align:center">uid</th>
<th style="text-align:right">amout</th>
<th style="text-align:right">status</th>
<th style="text-align:right">order_time</th>
</tr>
</thead>
<tbody>
<tr>
<td>200</td>
<td style="text-align:center">100</td>
<td style="text-align:right">5899</td>
<td style="text-align:right">0</td>
<td style="text-align:right">2016-03-30 17:54:20</td>
</tr>
<tr>
<td>201</td>
<td style="text-align:center">100</td>
<td style="text-align:right">6799</td>
<td style="text-align:right">0</td>
<td style="text-align:right">2016-03-30 17:54:38</td>
</tr>
<tr>
<td>202</td>
<td style="text-align:center">101</td>
<td style="text-align:right">12699</td>
<td style="text-align:right">0</td>
<td style="text-align:right">2016-03-30 17:55:01</td>
</tr>
</tbody>
</table>
<h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><p>查询所有用户的订单信息，订单信息不能为空，要求返回的字段有：用户姓名、手机号码、订单号、订单状态、订单金额。</p>
<h3 id="left-join-VS-right-join"><a href="#left-join-VS-right-join" class="headerlink" title="left join VS right join"></a>left join VS right join</h3><p>规律：</p>
<ul>
<li>A表 left join B表；则返回A表的所有符合条件(on条件、where条件)的记录。A表的字段不会为null，而B表没有对应记录时,字段值返回null。</li>
<li><p>B表 left join A表；则返回B表的所有符合条件(on条件、where条件)的记录。B表的字段不会为null，而A表没有对应记录时,字段值返回null。</p>
</li>
<li><p>A表 left join B表 等价于 B表 right join A表.</p>
</li>
<li>A表 right join B表 等价于 B表 left join A表.</li>
</ul>
<p>正确的SQL语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class="line"> FROM `user` RIGHT JOIN `order` ON `user`.uid=`order`.uid</span><br><span class="line"></span><br><span class="line">等价于</span><br><span class="line"></span><br><span class="line">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class="line"> FROM `order` LEFT JOIN `user` ON `user`.uid=`order`.uid</span><br></pre></td></tr></table></figure></p>
<p>结果集是：</p>
<table>
<thead>
<tr>
<th>name</th>
<th style="text-align:center">mobile</th>
<th style="text-align:right">order_id</th>
<th style="text-align:right">status</th>
<th style="text-align:right">amout</th>
</tr>
</thead>
<tbody>
<tr>
<td>张三</td>
<td style="text-align:center">13547521456</td>
<td style="text-align:right">200</td>
<td style="text-align:right">0</td>
<td style="text-align:right">5899</td>
</tr>
<tr>
<td>张三</td>
<td style="text-align:center">13547521456</td>
<td style="text-align:right">201</td>
<td style="text-align:right">0</td>
<td style="text-align:right">6799</td>
</tr>
<tr>
<td>李四</td>
<td style="text-align:center">17025856329</td>
<td style="text-align:right">202</td>
<td style="text-align:right">0</td>
<td style="text-align:right">12699</td>
</tr>
</tbody>
</table>
<p>错误的SQL语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class="line"> FROM `user` LEFT JOIN `order` ON `user`.uid=`order`.uid</span><br><span class="line"></span><br><span class="line">等价于</span><br><span class="line"></span><br><span class="line">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class="line"> FROM `order` RIGHT JOIN `user` ON `user`.uid=`order`.uid</span><br></pre></td></tr></table></figure></p>
<p>结果集是：</p>
<table>
<thead>
<tr>
<th>name</th>
<th style="text-align:center">mobile</th>
<th style="text-align:right">order_id</th>
<th style="text-align:right">status</th>
<th style="text-align:right">amout</th>
</tr>
</thead>
<tbody>
<tr>
<td>张三</td>
<td style="text-align:center">13547521456</td>
<td style="text-align:right">200</td>
<td style="text-align:right">0</td>
<td style="text-align:right">5899</td>
</tr>
<tr>
<td>张三</td>
<td style="text-align:center">13547521456</td>
<td style="text-align:right">201</td>
<td style="text-align:right">0</td>
<td style="text-align:right">6799</td>
</tr>
<tr>
<td>李四</td>
<td style="text-align:center">17025856329</td>
<td style="text-align:right">202</td>
<td style="text-align:right">0</td>
<td style="text-align:right">12699</td>
</tr>
<tr>
<td>王五</td>
<td style="text-align:center">15925874536</td>
<td style="text-align:right">null</td>
<td style="text-align:right">null</td>
<td style="text-align:right">null</td>
</tr>
</tbody>
</table>
<p>可以看出错误的SQL语句中，查出了没有订单的用户“王五”</p>
<h3 id="inner-join"><a href="#inner-join" class="headerlink" title="inner join"></a>inner join</h3><p>规律：</p>
<ul>
<li>A表 inner join B表；则返回A表和B表同时符合条件(on条件、where条件)的记录。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">两种写法，后者使用的居多</span><br><span class="line"></span><br><span class="line">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class="line"> FROM `order` INNER JOIN `user` ON `user`.uid=`order`.uid;</span><br><span class="line"></span><br><span class="line">等价于</span><br><span class="line"></span><br><span class="line">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class="line"> FROM `order`,`user` WHERE `user`.uid=`order`.uid;</span><br></pre></td></tr></table></figure>
<h3 id="left-outter-join-VS-right-outter-join"><a href="#left-outter-join-VS-right-outter-join" class="headerlink" title="left outter join VS right outter join"></a>left outter join VS right outter join</h3><p>left join 是left outer join的简写，left join默认是outer属性的。</p>
<p>在某些数据库(如Oracle)中， left join 称为 left outer join；相应的right join 称为 right outter join</p>
<h3 id="full-join"><a href="#full-join" class="headerlink" title="full join"></a>full join</h3><ul>
<li>在某些数据库中， FULL JOIN 称为 FULL OUTER JOIN。</li>
<li>只要其中某个表存在匹配，FULL JOIN 关键字就会返回行，意思是只需要有一个以上的表满足条件即可。</li>
<li><p>Oracle 、DB2、SQL Server、PostgreSQL 支持 Full JOIN，但是 MySQL 是不支持的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MySQL使用FULL JOIN报错</span><br><span class="line">[Err] 1054 - Unknown column &apos;order.uid&apos; in &apos;on clause&apos;</span><br></pre></td></tr></table></figure>
</li>
<li><p>MySQL可以通过 LEFT JOIN + UNION + RIGHT JOIN 的方式 来实现Full JOIN。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class="line"> from `order` left join `user` on `user`.uid=`order`.uid</span><br><span class="line"> union</span><br><span class="line">select `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class="line"> from `order` right join `user` on `user`.uid=`order`.uid;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="cross-join"><a href="#cross-join" class="headerlink" title="cross join"></a>cross join</h3><p>除了在FROM子句中使用逗号间隔连接的表外，SQL还支持另一种被称为交叉连接的操作，它们都返回被连接的两个表所有数据行的笛卡尔积，返回到的数据行数等于第一个表中符合查询条件的数据行数乘以第二个表中符合查询条件的数据行数。惟一的不同在于，交叉连接分开列名时，使用CROSS JOIN关键字而不是逗号。</p>
<p>实际上，下面两个表达式是完全等价的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT  *  FROM  table1, table2 WHERE table1.name=table2.name;</span><br><span class="line">SELECT  *  FROM  table1  CROSS JOIN  table2 WHERE table1.name=table2.name;</span><br></pre></td></tr></table></figure></p>
<p>在使用CROSS JOIN关键字交叉连接表时，因为生成的是两个表的笛卡尔积，因而不能使用ON关键字，只能在WHERE子句中定义搜索条件。</p>
<p>事实上，直接使用CROSS JOIN很少得到想要的结果，但是，正如实例所示，作为查询的第一步，DBMS通常在FROM子句中，对连接的表进行CROSS JOIN，然后过滤得到的中间表。</p>
<h3 id="union-union-all"><a href="#union-union-all" class="headerlink" title="union,union all"></a>union,union all</h3><p>在数据库中，union和union all关键字都是将两个结果集合并为一个，但这两者从使用和效率上来说都有所不同。</p>
<p>union在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复的记录再返回结果。</p>
<p>如：<br> select <em> from test_union1<br>   union<br> select </em> from test_union2</p>
<p>这个SQL在运行时先取出两个表的结果，再用排序空间进行排序删除重复的记录，最后返回结果集，如果表数据量大的话可能会导致用磁盘进行排序。而union all只是简单的将两个结果合并后就返回。这样，如果返回的两个结果集中有重复的数据，那么返回的结果集就会包含重复的数据了。从效率上说，union all要比union快很多，所以，如果可以确认合并的两个结果集中不包含重复的数据的话，那么就使用union all，</p>
<p>如下：<br>select <em> from test_union1<br>union all<br>select </em> from test_union2</p>
<p>使用 union 组合查询的结果集有两个最基本的规则：<br>1。所有查询中的列数和列的顺序必须相同。<br>2。数据类型必须兼容</p>
<h3 id="Apache-Hive连接查询"><a href="#Apache-Hive连接查询" class="headerlink" title="Apache Hive连接查询"></a>Apache Hive连接查询</h3><p>Hive支持连接查询，但有一些条件必须遵守，比如只支持相等查询，其它查询如不等式查询则不支持，还支持外连接，左半连接查询。另外Hive支持多于两个表以上的连接查询。</p>
<ul>
<li><a href="http://blog.csdn.net/skywalker_only/article/details/39205973" target="_blank" rel="external">Hive学习之连接查询</a></li>
<li><a href="http://shiyanjun.cn/archives/588.html" target="_blank" rel="external">Hive JOIN使用详解</a><h3 id="结合explain进行执行分析"><a href="#结合explain进行执行分析" class="headerlink" title="结合explain进行执行分析"></a>结合explain进行执行分析</h3></li>
<li><a href="http://blog.csdn.net/mchdba/article/details/9190771" target="_blank" rel="external">MySQL EXPLAIN 命令详解学习</a></li>
</ul>
<h3 id="数据库设计准则"><a href="#数据库设计准则" class="headerlink" title="数据库设计准则"></a>数据库设计准则</h3><ul>
<li><p>一范式就是属性不可分割。属性是什么？就是表中的字段。不可分割的意思就按字面理解就是最小单位，不能再分成更小单位了。这个字段只能是一个值，不能被拆分成多个字段，否则的话，它就是可分割的，就不符合一范式。不过能不能分割并没有绝对的答案，看需求，也就是看你的设计目标而定。</p>
</li>
<li><p>二范式就是要有主键，要求其他字段都依赖于主键。为什么要有主键？没有主键就没有唯一性，没有唯一性在集合中就定位不到这行记录，所以要主键。其他字段为什么要依赖于主键？因为不依赖于主键，就找不到他们。更重要的是，其他字段组成的这行记录和主键表示的是同一个东西，而主键是唯一的，它们只需要依赖于主键，也就成了唯一的。</p>
</li>
<li><p>三范式就是要消除传递依赖，方便理解，可以看做是“消除冗余”。消除冗余应该比较好理解一些，就是各种信息只在一个地方存储，不出现在多张表中。</p>
</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
