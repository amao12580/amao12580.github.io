<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[开源贡献 - 升级Solr中文分词器 mmseg4j-solr]]></title>
      <url>http://amao12580.github.io/post/2016/07/mmseg4j-solr-compatible-solr-6-1/</url>
      <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近因为团队职责变动，接手了Solr的维护工作。仔细比对各个环境的使用版本才发现，都是使用的5.3，查了一下这个就快发布一年了。为什么不用最新版的6.1呢？有点忍不住技痒了，整一下升级到6.1的方案吧！</p>
<h2 id="简单介绍Solr"><a href="#简单介绍Solr" class="headerlink" title="简单介绍Solr"></a>简单介绍Solr</h2><p>Apache Solr (读音: SOLer) 是一个开源的搜索服务器。Solr 使用 Java 语言开发，主要基于 HTTP 和 Apache Lucene 实现。Apache Solr 中存储的资源是以 Document 为对象进行存储的。每个文档由一系列的 Field 构成，每个 Field 表示资源的一个属性。Solr 中的每个 Document 需要有能唯一标识其自身的属性，默认情况下这个属性的名字是 id，在 Schema 配置文件中使用：id进行描述。 Solr是一个高性能，采用Java开发，基于Lucene的全文搜索服务器。文档通过Http利用XML加到一个搜索集合中。查询该集合也是通过 http收到一个XML/JSON响应来实现。它的主要特性包括：高效、灵活的缓存功能，垂直搜索功能，高亮显示搜索结果，通过索引复制来提高可用性，提 供一套强大Data Schema来定义字段，类型和设置文本分析，提供基于Web的管理界面等。</p>
<h2 id="什么是mmseg4j-solr？"><a href="#什么是mmseg4j-solr？" class="headerlink" title="什么是mmseg4j-solr？"></a>什么是mmseg4j-solr？</h2><p>mmseg4j 用 Chih-Hao Tsai 的 <a href="http://technology.chtsai.org/mmseg/" target="_blank" rel="external">MMSeg 算法</a>实现的中文分词器，并实现 lucene 的 analyzer 和 solr 的TokenizerFactory 以方便在Lucene和Solr中使用。</p>
<p>2、MMSeg 算法有两种分词方法：Simple和Complex，都是基于正向最大匹配。Complex 加了四个规则过虑。官方说：词语的正确识别率达到了 98.41%。mmseg4j 已经实现了这两种分词算法。 <em> 1.5版的分词速度simple算法是 1100kb/s左右、complex算法是 700kb/s左右，（测试机：AMD athlon 64 2800+ 1G内存 xp）。 </em> 1.6版在complex基础上实现了最多分词(max-word)。“很好听” -&gt; “很好|好听”; “中华人民共和国” -&gt; “中华|华人|共和|国”; “中国人民银行” -&gt; “中国|人民|银行”。 <em> 1.7-beta 版, 目前 complex 1200kb/s左右, simple 1900kb/s左右, 但内存开销了50M左右. 上几个版都是在10M左右. </em> 1.8 后,增加 CutLetterDigitFilter过虑器，切分“字母和数”混在一起的过虑器。</p>
<h2 id="升级方案"><a href="#升级方案" class="headerlink" title="升级方案"></a>升级方案</h2><h3 id="尝试强制升级"><a href="#尝试强制升级" class="headerlink" title="尝试强制升级"></a>尝试强制升级</h3><p>首先尝试直接强制升级。下载6.1版的zip，解压后，将5.3版本的核心配置文件、lib包拷贝并覆盖过来，启动时大量报错了：</p>
<p>lib包主要是:</p>
<ul>
<li>mmseg4j-core-1.10.0.jar</li>
<li>mmseg4j-solr-2.3.0.jar</li>
<li>pinyin4j-2.5.jar</li>
<li>pinyinFilter-0.2.jar</li>
</ul>
<p><img src="/img/solr-libs.png" alt=""></p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">启动solr时报错</span><br><span class="line"></span><br><span class="line">cd /solr/bin</span><br><span class="line">solr <span class="keyword">start</span> -m <span class="number">1</span>g -f</span><br><span class="line"></span><br><span class="line"><span class="number">2016</span>-<span class="number">07</span>-<span class="number">25</span> <span class="number">05</span>:<span class="number">03</span>:<span class="number">45.776</span> WARN  (coreLoadExecutor-<span class="number">6</span>-thread-<span class="number">1</span>) [   ] o.a.s.s.FieldTypePluginLoader TokenFilterFactory is using deprecated <span class="number">5.3</span>.<span class="number">0</span> emulation. You should at <span class="keyword">some</span> point <span class="keyword">declare</span> and reindex <span class="keyword">to</span> at <span class="keyword">least</span> <span class="number">6.0</span>, because <span class="number">5</span>.x emulation is deprecated and will be removed <span class="keyword">in</span> <span class="number">7.0</span></span><br><span class="line"><span class="number">2016</span>-<span class="number">07</span>-<span class="number">25</span> <span class="number">05</span>:<span class="number">03</span>:<span class="number">45.783</span> ERROR (coreLoadExecutor-<span class="number">6</span>-thread-<span class="number">2</span>) [   ] o.a.s.c.CoreContainer Error creating core [opportunity]: org.apache.solr.core.SolrResourceLoader.getInstanceDir()Ljava/lang/String;</span><br><span class="line">java.lang.NoSuchMethodError: org.apache.solr.core.SolrResourceLoader.getInstanceDir()Ljava/lang/String;</span><br><span class="line">    at com.chenlb.mmseg4j.solr.Utils.getDict(Utils.java:<span class="number">18</span>)</span><br><span class="line">    at com.chenlb.mmseg4j.solr.MMSegTokenizerFactory.inform(MMSegTokenizerFactory.java:<span class="number">65</span>)</span><br><span class="line">    at org.apache.solr.core.SolrResourceLoader.inform(SolrResourceLoader.java:<span class="number">699</span>)</span><br><span class="line">    at org.apache.solr.<span class="keyword">schema</span>.IndexSchema.&lt;init&gt;(IndexSchema.java:<span class="number">184</span>)</span><br><span class="line">    at org.apache.solr.<span class="keyword">schema</span>.IndexSchemaFactory.create(IndexSchemaFactory.java:<span class="number">56</span>)</span><br><span class="line">    at org.apache.solr.<span class="keyword">schema</span>.IndexSchemaFactory.buildIndexSchema(IndexSchemaFactory.java:<span class="number">75</span>)</span><br><span class="line">    at org.apache.solr.core.ConfigSetService.createIndexSchema(ConfigSetService.java:<span class="number">108</span>)</span><br><span class="line">    at org.apache.solr.core.ConfigSetService.getConfig(ConfigSetService.java:<span class="number">79</span>)</span><br><span class="line">    at org.apache.solr.core.CoreContainer.create(CoreContainer.java:<span class="number">810</span>)</span><br><span class="line">    at org.apache.solr.core.CoreContainer.lambda$load$0(CoreContainer.java:<span class="number">466</span>)</span><br><span class="line">    at java.util.concurrent.FutureTask.run(FutureTask.java:<span class="number">266</span>)</span><br><span class="line">    at org.apache.solr.common.util.ExecutorUtil$MDCAwareThreadPoolExecutor.lambda$execute$22(ExecutorUtil.java:<span class="number">229</span>)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1142</span>)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">617</span>)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br></pre></td></tr></table></figure>
<p>看样子是mmseg4j-solr.jar包中，文件com.chenlb.mmseg4j.solr.Utils.java，第18行有方法调用错误，猜测可能是因为API变动，导致版本不兼容。</p>
<p>Google一些关于mmseg4j-solr对solr版本的兼容情况，发现mmseg4j-solr还停留在对5.3版本的支持，没人维护了，那我们自食其力，看能否解决？</p>
<p>好在<a href="https://github.com/chenlb/mmseg4j-solr/blob/master/README.md(https://github.com/chenlb/mmseg4j-solr/blob/master/README.md" target="_blank" rel="external">mmseg4j-solr已经在GitHub开放了源码</a>，开始干吧！</p>
<h3 id="改源码进行兼容"><a href="#改源码进行兼容" class="headerlink" title="改源码进行兼容"></a>改源码进行兼容</h3><p>首先fork源码，clone到本机，对文件com.chenlb.mmseg4j.solr.Utils.java，第18行修改，这一行果然报Compile error。这就完了吗？试试package一下吧！maven install过程中，执行MMSegTokenizerFactoryTest case也报错了。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Tests <span class="keyword">run</span>: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 10.921 sec &lt;&lt;&lt; FAILURE! - <span class="keyword">in</span> com.chenlb.mmseg4j.solr.MMSegTokenizerFactoryTest</span><br><span class="line">com.chenlb.mmseg4j.solr.MMSegTokenizerFactoryTest  Time elapsed: 10.905 sec  &lt;&lt;&lt; <span class="keyword">ERROR</span>!</span><br><span class="line">java.lang.RuntimeException: org.apache.solr.common.SolrException: Solr <span class="keyword">no</span> longer supports forceful unlocking via the 'unlockOnStartup' option.  This is <span class="keyword">no</span> longer necessary <span class="keyword">for</span> the default lockType except <span class="keyword">in</span> situations where it would be dangerous and should not be done.  <span class="keyword">For</span> other lockTypes and/or directoryFactory options it may also be dangerous and users must resolve problematic locks manually.</span><br><span class="line">    at com.chenlb.mmseg4j.solr.MMSegTokenizerFactoryTest.beforeClass(MMSegTokenizerFactoryTest.java:33)</span><br><span class="line">Caused <span class="keyword">by</span>: org.apache.solr.common.SolrException: Solr <span class="keyword">no</span> longer supports forceful unlocking via the 'unlockOnStartup' option.  This is <span class="keyword">no</span> longer necessary <span class="keyword">for</span> the default lockType except <span class="keyword">in</span> situations where it would be dangerous and should not be done.  <span class="keyword">For</span> other lockTypes and/or directoryFactory options it may also be dangerous and users must resolve problematic locks manually.</span><br><span class="line">    at com.chenlb.mmseg4j.solr.MMSegTokenizerFactoryTest.beforeClass(MMSegTokenizerFactoryTest.java:33)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Results :</span><br><span class="line"></span><br><span class="line">Tests <span class="keyword">in</span> <span class="keyword">error</span>:</span><br><span class="line">  MMSegTokenizerFactoryTest.beforeClass:33-&gt;SolrTestCaseJ4.initCore:443-&gt;SolrTestCaseJ4.initCore:436-&gt;SolrTestCaseJ4.initCore:594-&gt;SolrTestCaseJ4.createCore:601 ? Runtime</span><br><span class="line"></span><br><span class="line">Tests <span class="keyword">run</span>: 6, Failures: 0, Errors: 1, Skipped: 0</span><br><span class="line"></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD FAILURE</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] <span class="keyword">Total</span> time: 17.375 <span class="built_in">s</span></span><br><span class="line">[INFO] Finished at: 2016-07-25T13:18:43+08:00</span><br><span class="line">[INFO] Final <span class="keyword">Memory</span>: 32M/218M</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[<span class="keyword">ERROR</span>] Failed to execute goal org.apache.maven.plugins:maven-surefire-<span class="keyword">plugin</span>:2.19.1:<span class="keyword">test</span> (default-<span class="keyword">test</span>) <span class="keyword">on</span> project mmseg4j-solr: There are <span class="keyword">test</span> failures.</span><br><span class="line">[<span class="keyword">ERROR</span>]</span><br><span class="line">[<span class="keyword">ERROR</span>] Please refer to <span class="keyword">D</span>:\GitHub\mmseg4j-solr\target\surefire-reports <span class="keyword">for</span> the individual <span class="keyword">test</span> results.</span><br><span class="line">[<span class="keyword">ERROR</span>] -&gt; [<span class="keyword">Help</span> 1]</span><br><span class="line">[<span class="keyword">ERROR</span>]</span><br><span class="line">[<span class="keyword">ERROR</span>] To see the full <span class="keyword">stack</span> trace of the errors, re-<span class="keyword">run</span> Maven with the -<span class="keyword">e</span> switch.</span><br><span class="line">[<span class="keyword">ERROR</span>] Re-<span class="keyword">run</span> Maven using the -X switch to enable full debug logging.</span><br><span class="line">[<span class="keyword">ERROR</span>]</span><br><span class="line">[<span class="keyword">ERROR</span>] <span class="keyword">For</span> <span class="keyword">more</span> information <span class="keyword">about</span> the errors and possible solutions, please <span class="keyword">read</span> the following articles:</span><br><span class="line">[<span class="keyword">ERROR</span>] [<span class="keyword">Help</span> 1] http:<span class="comment">//cwiki.apache.org/confluence/display/MAVEN/MojoFailureException</span></span><br></pre></td></tr></table></figure>
<p>看样子是unlockOnStartup选项不再受支持，需要移除，我们移除一下试试吧，找到该选项位于Test Resource包下的文件solrconfig.xml中，删掉了。再尝试install！还是报错！</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Tests <span class="keyword">run</span>: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 3.586 sec &lt;&lt;&lt; FAILURE! - <span class="keyword">in</span> com.chenlb.mmseg4j.solr.MMSegTokenizerFactoryTest</span><br><span class="line">test_mmseg4j(com.chenlb.mmseg4j.solr.MMSegTokenizerFactoryTest)  Time elapsed: 0.012 sec  &lt;&lt;&lt; <span class="keyword">ERROR</span>!</span><br><span class="line">org.apache.solr.common.SolrException: SolrCore 'mmseg4j_core' is not available due to init failure: <span class="keyword">Error</span> loading <span class="keyword">class</span> 'org.apache.solr.handler.admin.AdminHandlers'</span><br><span class="line">    at com.chenlb.mmseg4j.solr.MMSegTokenizerFactoryTest.getDictionaryByFieldType(MMSegTokenizerFactoryTest.java:37)</span><br><span class="line">    at com.chenlb.mmseg4j.solr.MMSegTokenizerFactoryTest.test_mmseg4j(MMSegTokenizerFactoryTest.java:79)</span><br><span class="line">Caused <span class="keyword">by</span>: org.apache.solr.common.SolrException: <span class="keyword">Error</span> loading <span class="keyword">class</span> 'org.apache.solr.handler.admin.AdminHandlers'</span><br><span class="line">Caused <span class="keyword">by</span>: org.apache.solr.common.SolrException: <span class="keyword">Error</span> loading <span class="keyword">class</span> 'org.apache.solr.handler.admin.AdminHandlers'</span><br><span class="line">Caused <span class="keyword">by</span>: java.lang.ClassNotFoundException: org.apache.solr.handler.admin.AdminHandlers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Results :</span><br><span class="line"></span><br><span class="line">Tests <span class="keyword">in</span> <span class="keyword">error</span>:</span><br><span class="line">  MMSegTokenizerFactoryTest.test_mmseg4j:79-&gt;getDictionaryByFieldType:37 ? Solr ...</span><br><span class="line"></span><br><span class="line">Tests <span class="keyword">run</span>: 6, Failures: 0, Errors: 1, Skipped: 0</span><br><span class="line"></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD FAILURE</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] <span class="keyword">Total</span> time: 6.131 <span class="built_in">s</span></span><br><span class="line">[INFO] Finished at: 2016-07-25T13:20:50+08:00</span><br><span class="line">[INFO] Final <span class="keyword">Memory</span>: 23M/226M</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[<span class="keyword">ERROR</span>] Failed to execute goal org.apache.maven.plugins:maven-surefire-<span class="keyword">plugin</span>:2.19.1:<span class="keyword">test</span> (default-<span class="keyword">test</span>) <span class="keyword">on</span> project mmseg4j-solr: There are <span class="keyword">test</span> failures.</span><br><span class="line">[<span class="keyword">ERROR</span>]</span><br><span class="line">[<span class="keyword">ERROR</span>] Please refer to <span class="keyword">D</span>:\GitHub\mmseg4j-solr\target\surefire-reports <span class="keyword">for</span> the individual <span class="keyword">test</span> results.</span><br><span class="line">[<span class="keyword">ERROR</span>] -&gt; [<span class="keyword">Help</span> 1]</span><br><span class="line">[<span class="keyword">ERROR</span>]</span><br><span class="line">[<span class="keyword">ERROR</span>] To see the full <span class="keyword">stack</span> trace of the errors, re-<span class="keyword">run</span> Maven with the -<span class="keyword">e</span> switch.</span><br><span class="line">[<span class="keyword">ERROR</span>] Re-<span class="keyword">run</span> Maven using the -X switch to enable full debug logging.</span><br><span class="line">[<span class="keyword">ERROR</span>]</span><br><span class="line">[<span class="keyword">ERROR</span>] <span class="keyword">For</span> <span class="keyword">more</span> information <span class="keyword">about</span> the errors and possible solutions, please <span class="keyword">read</span> the following articles:</span><br><span class="line">[<span class="keyword">ERROR</span>] [<span class="keyword">Help</span> 1] http:<span class="comment">//cwiki.apache.org/confluence/display/MAVEN/MojoFailureException</span></span><br></pre></td></tr></table></figure>
<p>看样子是org.apache.solr.handler.admin.AdminHandlers无法加载，该配置位于solrconfig.xml。google发现该api已经换了，与5.3版不再兼容。找了一份6.1的basic solrconfig.xml进行替换，再试着install就成功啦！</p>
<h2 id="PR"><a href="#PR" class="headerlink" title="PR"></a>PR</h2><p>看来改源码，也没有很难嘛！持续几个问题解决后，我们也得到了兼容性的jar包，实验在测试环境可以用！考虑到很多人也需要版本升级，本着取之于开源，反哺开源，则不竭的精神。对源repo提交了pull request。PR地址：<a href="https://github.com/chenlb/mmseg4j-solr/pull/26" target="_blank" rel="external">https://github.com/chenlb/mmseg4j-solr/pull/26</a>。</p>
<p>该PR还没有meger到master，如果等不及请下载我提供的：<a href="/file/mmseg4j-solr-2.3.2.rar">mmseg4j-solr-2.3.2.jar</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL集锦 - IN 真会导致全表扫描吗？]]></title>
      <url>http://amao12580.github.io/post/2016/07/MySQL-in-operator-must-lead-to-full-scan/</url>
      <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>项目版本迭代慢了下来，有了段空闲时间，就对近些阶段的代码进行Code review，主要还是保持设计正确性和易维护性吧。</p>
<h1 id="有意思的代码"><a href="#有意思的代码" class="headerlink" title="有意思的代码"></a>有意思的代码</h1><p>由于积累了数个里程碑，review的工作量还挺大，我们分工协作，我这块主要看推荐模块，发现了几段有意思的代码，贴出来看看吧。</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Result&lt;Record1&lt;<span class="built_in">Integer</span>&gt;&gt; ids = create.<span class="keyword">select</span>(SITING_OPPORTUNITY_DISTRICT.OPPORTUNITY_ID).</span><br><span class="line">        from(SITING_OPPORTUNITY_DISTRICT).</span><br><span class="line">        <span class="keyword">where</span>(SITING_OPPORTUNITY_DISTRICT.DISTRICT_ID.like(districtId + <span class="string">"%"</span>)).</span><br><span class="line">        groupBy(SITING_OPPORTUNITY_DISTRICT.OPPORTUNITY_ID).</span><br><span class="line">        fetch();</span><br><span class="line"><span class="built_in">Set</span>&lt;<span class="built_in">Integer</span>&gt; opportunityIds = <span class="literal">new</span> HashSet&lt;&gt;(ids.size());</span><br><span class="line">for (Record1&lt;<span class="built_in">Integer</span>&gt; r : ids) &#123;</span><br><span class="line">    opportunityIds.add(r.getValue(SITING_OPPORTUNITY_DISTRICT.OPPORTUNITY_ID));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (opportunityIds.size() == <span class="number">1</span>) &#123;</span><br><span class="line">    condition = condition.<span class="keyword">and</span>(SITING_OPPORTUNITY.OPPORTUNITY_ID.<span class="literal">eq</span>(getSetFirstElement(opportunityIds)));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    condition = condition.<span class="keyword">and</span>(SITING_OPPORTUNITY.OPPORTUNITY_ID.<span class="keyword">in</span>(opportunityIds));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码的大意是：在MySQL数据库，表SITING_OPPORTUNITY_DISTRICT中，查询符合DISTRICT_ID字段条件的不重复OPPORTUNITY_ID字段，将这些字段放到一个集合。为描述方便，这个集合下文用ids代替。</p>
<p>1.如果ids的大小等于一，则拼上了一个SQL where条件，使用equal过滤ids中的第一个元素值，我们称这个SQL为A。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SQL A template</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SITING_OPPORTUNITY <span class="keyword">WHERE</span> OPPORTUNITY_ID=?;</span><br></pre></td></tr></table></figure>
<p>2.如果ids的大小大于一，则拼上了一个SQL where条件，使用in过滤ids中的所有元素值，我们称这个SQL为B。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SQL B template</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SITING_OPPORTUNITY <span class="keyword">WHERE</span> OPPORTUNITY_ID <span class="keyword">in</span>(?,?,?,?,?...);</span><br></pre></td></tr></table></figure>
<h1 id="存疑"><a href="#存疑" class="headerlink" title="存疑"></a>存疑</h1><p>项目中，类似这样的写法大概有10多处，都是按照集合大小来动态build SQL语句。ids的大小是跟用户的个性化数据有关的，统计了一下，超过70%的用户数据，ids大小是小于等于一的，所以这样调整代码的目的是为了降低全表扫描的概率？问了一下，得到确定的答复！但是SITING_OPPORTUNITY表在数据库结构设计评审时，已经加上了UNIQUE索引，为什么还需要这样写代码呢？难道MySQL强大的SQL优化器不能自动来完成？非得要在应用层来做？</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">目标表SITING_OPPORTUNITY结构示意：</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`siting_opportunity`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'ID'</span>,</span><br><span class="line">  <span class="string">`opportunity_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'商机ID'</span>,</span><br><span class="line">  <span class="string">`industry_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'行业id'</span>,</span><br><span class="line">  <span class="string">`min_area`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'最小面积'</span>,</span><br><span class="line">  <span class="string">`max_area`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'最大面积'</span>,</span><br><span class="line">  <span class="string">`min_rent`</span> <span class="built_in">bigint</span>(<span class="number">15</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'最小租金'</span>,</span><br><span class="line">  <span class="string">`max_rent`</span> <span class="built_in">bigint</span>(<span class="number">15</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'最大租金'</span>,</span><br><span class="line">  <span class="string">`is_deal`</span> tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'是否成交。0=未成交；1=已成交'</span>,</span><br><span class="line">  <span class="string">`slogan`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'广告语'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`opportunity_id`</span> (<span class="string">`opportunity_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`fk_sitingOpportunity_industry`</span> (<span class="string">`industry_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`fk_sitingOpportunity_industry`</span> FOREIGN <span class="keyword">KEY</span> (<span class="string">`industry_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`industry`</span> (<span class="string">`code`</span>) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_unicode_ci <span class="keyword">COMMENT</span>=<span class="string">'选址商机表'</span>;</span><br></pre></td></tr></table></figure>
<h1 id="解谜"><a href="#解谜" class="headerlink" title="解谜"></a>解谜</h1><p>我们绝大多数人，对in操作是否会带来全表扫描开销，还停留在MySQL很古老的版本认识上。网上一篇<a href="http://itindex.net/detail/55421-mysql-sql-%E8%AF%AD%E5%8F%A5" target="_blank" rel="external">30条SQL优化军规</a>流传甚广，大多数人奉此为神道。</p>
<p>其中有一条这样描述：“5.in 和 not in 也要慎用，否则会导致全表扫描”，但没说为什么这样认为，以及面向的MySQL版本和配置也没有说明。</p>
<p>这句话在Google上查询，至少在2004年7月就已经发布到网上了，起始发布的站点出自<a href="http://hovertree.com/h/bjaf/u935eb54.htm" target="_blank" rel="external">《SQL语句优化原则_Sql Server_何问起》</a>，整整12年过去了，还有很多圈内知名IT站点在发布同样的文章。</p>
<ul>
<li>segmentfault：<a href="https://segmentfault.com/a/1190000005008401" target="_blank" rel="external">《mysql语句优化建议-2016年4月26日发布》</a></li>
</ul>
<ul>
<li>红黑联盟：<a href="http://www.2cto.com/database/201606/514022.html" target="_blank" rel="external">《数据库查询优化方法总结-2016年6月1日发布》</a></li>
</ul>
<p>首先，起始发布的文章是针对SQL server数据库的47条优化建议，已经太过久远，这些优化技巧是否还完全适用现今的数据库呢？更别提是否还适用于MySQL数据库了。我猜想是哪位“DBA大牛”应付交差，东抄一段西抄一段放上网，哪想到会有人当了真，更惨的是还完全信了。还真是：尽信书，不如无书。干我们这行，获取信息很容易，但甄别信息很难，希望大家引以为戒。</p>
<h1 id="求是"><a href="#求是" class="headerlink" title="求是"></a>求是</h1><p>怀抱求是精神，我们一起来实践，看看MySQL对于IN操作符的处理。</p>
<p>下文中用的MySQL版本：5.7.13 windows x64 解压安装版.</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">MySQL配置文件:</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line"><span class="attr">default-character-set=utf8</span></span><br><span class="line">[mysql]</span><br><span class="line"><span class="attr">default-character-set=utf8</span></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment">########basic settings########</span></span><br><span class="line"><span class="comment">#skip-grant-tables,默认注释掉。重置root密码时用得上：http://www.apelearn.com/bbs/thread-9205-1-1.html</span></span><br><span class="line"><span class="comment">#skip-grant-tables</span></span><br><span class="line"></span><br><span class="line">skip-ssl</span><br><span class="line"><span class="attr">secure-file-priv</span> = NULL</span><br><span class="line"><span class="comment">#服务器唯一ID，默认是1，一般取IP最后一段</span></span><br><span class="line"><span class="attr">log-bin=mysql-bin</span></span><br><span class="line"><span class="attr">server-id</span> = <span class="number">100</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="attr">user</span> = mysql</span><br><span class="line"><span class="attr">bind_address</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">autocommit</span> = <span class="number">0</span></span><br><span class="line"><span class="comment">#character_set_server=utf8mb4</span></span><br><span class="line"><span class="attr">character_set_server=utf8</span></span><br><span class="line"><span class="attr">skip_name_resolve</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">max_connections</span> = <span class="number">8000</span></span><br><span class="line"><span class="attr">max_connect_errors</span> = <span class="number">10000</span></span><br><span class="line"><span class="attr">basedir</span> =<span class="string">"F:\mysql/"</span></span><br><span class="line"><span class="attr">datadir</span> =<span class="string">"F:\mysql/data/"</span></span><br><span class="line"><span class="attr">tmpdir</span> =<span class="string">"F:\mysql/temp/"</span></span><br><span class="line"><span class="attr">socket</span> =<span class="string">"F:\mysql/data/mysql.sock"</span></span><br><span class="line"><span class="attr">pid-file="F:\mysql/data/current.pid"</span></span><br><span class="line"><span class="attr">transaction_isolation</span> = READ-COMMITTED</span><br><span class="line"><span class="attr">explicit_defaults_for_timestamp</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">join_buffer_size</span> = <span class="number">134217728</span></span><br><span class="line"><span class="attr">tmp_table_size</span> = <span class="number">67108864</span></span><br><span class="line"><span class="attr">max_allowed_packet</span> = <span class="number">128</span>MB</span><br><span class="line"><span class="attr">sql_mode</span> = <span class="string">"STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER"</span></span><br><span class="line"><span class="attr">interactive_timeout</span> = <span class="number">1800</span></span><br><span class="line"><span class="attr">wait_timeout</span> = <span class="number">1800</span></span><br><span class="line"><span class="attr">read_buffer_size</span> = <span class="number">16777216</span></span><br><span class="line"><span class="attr">read_rnd_buffer_size</span> = <span class="number">33554432</span></span><br><span class="line"><span class="attr">sort_buffer_size</span> = <span class="number">33554432</span></span><br><span class="line"><span class="comment">########log settings########</span></span><br><span class="line"><span class="attr">log-error="F:\mysql/log/error/error.log"</span></span><br><span class="line"><span class="attr">slow_query_log</span> = ON</span><br><span class="line"><span class="attr">slow_query_log_file</span> = <span class="string">"F:\mysql/log/slow/slow.log"</span></span><br><span class="line"><span class="attr">log_queries_not_using_indexes</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">log_slow_admin_statements</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">log_slow_slave_statements</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">log_throttle_queries_not_using_indexes</span> = <span class="number">10</span></span><br><span class="line"><span class="comment">#保留7天的日志</span></span><br><span class="line"><span class="attr">expire_logs_days</span> = <span class="number">7</span></span><br><span class="line"><span class="comment">#记录执行时间超过5秒的慢查询</span></span><br><span class="line"><span class="attr">long_query_time</span> = <span class="number">5</span></span><br><span class="line"><span class="attr">min_examined_row_limit</span> = <span class="number">100</span></span><br><span class="line"><span class="comment">########replication settings########</span></span><br><span class="line"><span class="attr">master_info_repository</span> = TABLE</span><br><span class="line"><span class="attr">relay_log_info_repository</span> = TABLE</span><br><span class="line"><span class="attr">log_bin</span> = bin.log</span><br><span class="line"><span class="attr">sync_binlog</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">gtid_mode</span> = on</span><br><span class="line"><span class="attr">enforce_gtid_consistency</span> = <span class="number">1</span></span><br><span class="line">log_slave_updates</span><br><span class="line"><span class="attr">binlog_format</span> = row</span><br><span class="line"><span class="attr">relay_log</span> = relay.log</span><br><span class="line"><span class="attr">relay_log_recovery</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">binlog_gtid_simple_recovery</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">slave_skip_errors</span> = ddl_exist_errors</span><br><span class="line"><span class="comment">########innodb settings########</span></span><br><span class="line"><span class="attr">innodb_page_size</span> = <span class="number">16384</span></span><br><span class="line"><span class="comment">#innodb_buffer_pool_size = 6G</span></span><br><span class="line"><span class="attr">innodb_buffer_pool_instances</span> = <span class="number">8</span></span><br><span class="line"><span class="attr">innodb_buffer_pool_load_at_startup</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">innodb_buffer_pool_dump_at_shutdown</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">innodb_lru_scan_depth</span> = <span class="number">2000</span></span><br><span class="line"><span class="attr">innodb_lock_wait_timeout</span> = <span class="number">5</span></span><br><span class="line"><span class="attr">innodb_io_capacity</span> = <span class="number">4000</span></span><br><span class="line"><span class="attr">innodb_io_capacity_max</span> = <span class="number">8000</span></span><br><span class="line"><span class="comment">#innodb_flush_method = O_DIRECT</span></span><br><span class="line"><span class="attr">innodb_flush_method=normal</span></span><br><span class="line"><span class="comment">#innodb_file_format = Barracuda</span></span><br><span class="line"><span class="comment">#innodb_file_format_max = Barracuda</span></span><br><span class="line"><span class="attr">innodb_log_group_home_dir</span> = <span class="string">"F:\mysql/log/redolog\"</span></span><br><span class="line"><span class="attr">innodb_undo_directory</span> = <span class="string">"F:\mysql/log/undolog/"</span></span><br><span class="line"><span class="attr">innodb_undo_logs</span> = <span class="number">128</span></span><br><span class="line"><span class="attr">innodb_undo_tablespaces</span> = <span class="number">3</span></span><br><span class="line"><span class="attr">innodb_flush_neighbors</span> = <span class="number">0</span></span><br><span class="line"><span class="comment">#innodb_log_file_size = 4G</span></span><br><span class="line"><span class="attr">innodb_log_file_size</span> = <span class="number">256</span>MB</span><br><span class="line"><span class="attr">innodb_log_buffer_size</span> = <span class="number">16777216</span></span><br><span class="line"><span class="attr">innodb_purge_threads</span> = <span class="number">4</span></span><br><span class="line"><span class="attr">innodb_large_prefix</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">innodb_thread_concurrency</span> = <span class="number">64</span></span><br><span class="line"><span class="attr">innodb_print_all_deadlocks</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">innodb_strict_mode</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">innodb_sort_buffer_size</span> = <span class="number">67108864</span></span><br><span class="line"><span class="attr">innodb_flush_log_at_trx_commit</span> = <span class="number">2</span></span><br><span class="line"><span class="comment">########semi sync replication settings########</span></span><br><span class="line"><span class="attr">plugin_dir="F:\mysql/lib/plugin"</span></span><br><span class="line"><span class="attr">plugin_load</span> = <span class="string">"rpl_semi_sync_master=semisync_master.dll;rpl_semi_sync_slave=semisync_slave.dll"</span></span><br><span class="line"><span class="attr">loose_rpl_semi_sync_master_enabled</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">loose_rpl_semi_sync_slave_enabled</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">loose_rpl_semi_sync_master_timeout</span> = <span class="number">5000</span></span><br><span class="line"></span><br><span class="line">[mysqld-<span class="number">5.7</span>]</span><br><span class="line"><span class="attr">innodb_buffer_pool_dump_pct</span> = <span class="number">40</span></span><br><span class="line"><span class="attr">innodb_page_cleaners</span> = <span class="number">4</span></span><br><span class="line"><span class="attr">innodb_undo_log_truncate</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">innodb_max_undo_log_size</span> = <span class="number">2</span>G</span><br><span class="line"><span class="attr">innodb_purge_rseg_truncate_frequency</span> = <span class="number">128</span></span><br><span class="line"><span class="attr">binlog_gtid_simple_recovery=1</span></span><br><span class="line"><span class="attr">log_timestamps=system</span></span><br><span class="line"><span class="comment">#transaction_write_set_extraction=MURMUR32</span></span><br><span class="line"><span class="attr">show_compatibility_56=on</span></span><br></pre></td></tr></table></figure>
<p>先用show index from siting_opportunity;语句查看一下索引情况。</p>
<p><img src="/img/showIndexFromSitingOpportunity.png" alt=""><br>由于索引opportunity_id（key_name）是unique类型，可以看到其散列程度（Cardinality）是非常高的，因此该索引是很有效的。相应的该表的记录数是：476772行。</p>
<h2 id="无索引"><a href="#无索引" class="headerlink" title="无索引"></a>无索引</h2><p>字段min_area没有索引，<code>min_area</code> int(11) NOT NULL DEFAULT ‘0’ COMMENT ‘最小面积’。<br><img src="/img/withoutIndex.png" alt=""></p>
<p>很显然，优化器告诉我们，需要进行476772行扫描才能完成计算，也就是全表扫描了。</p>
<h2 id="Unique索引"><a href="#Unique索引" class="headerlink" title="Unique索引"></a>Unique索引</h2><p>先看在表SITING_OPPORTUNITY，OPPORTUNITY_ID字段的处理情况。<br><img src="/img/userUniqueIndex.png" alt=""><br>明显的可以看到，MySQL优化器是选择了索引，没有进行全表扫描，而且rows也为7。</p>
<h2 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h2><p>我们知道主键一定是唯一性索引,那情况应该跟上一节差不多？动动手吧！<br><img src="/img/userPrimaryIndex.png" alt=""><br>情况确实跟Unique索引差不多，pass！</p>
<h2 id="外键索引"><a href="#外键索引" class="headerlink" title="外键索引"></a>外键索引</h2><p>在设置外键时，数据库会同时为这个字段设置一个普通索引，所以外键的设置也应该遵循索引的设置策略。<br><img src="/img/useFKIndex.png" alt=""><br>使用外键字段时，使用in操作符，也使用了索引。</p>
<h2 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h2><p>我们换一个有普通索引，但该字段不是外键的表来验证。<br><img src="/img/userNormalIndex.png" alt=""></p>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>1.在in操作中，集合体积过大时，索引还会生效吗？</p>
<p>2.在嵌套查询中，内层查询使用in，是否会有效率问题？</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文中的存储引擎都是innodb，因时间有限，没有对Myisam等其他存储引擎进行类似实验，希望动手能力强的你可以完成！</p>
<p>MySQL在2010年发布5.5版本中，优化器对in操作符可以自动完成优化，针对建立了索引的列可以使用索引，没有索引的列还是会走全表扫描。因此应用层不需要再进行画蛇添足啦，当然优化的精神是可嘉的，但在猜测中进行的优化可能与实际背离甚远！</p>
<p>互联网上的信息太过广泛，但这不应该成为我们掉以轻心的借口，抱着存疑求是的精神进行甄别，任何信息只有在我们实践验证后方可全信，用在生产开发上的知识，不容有失！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode刷题 - 求三个和为零的整数组合]]></title>
      <url>http://amao12580.github.io/post/2016/06/LeetCode-training-3-elements-sum-zero/</url>
      <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>完整的代码整理好了，请移步GitHub：</p>
<ul>
<li><a href="https://github.com/amao12580/algorithm/tree/master/src/main/java/leetcode/sumEqualZero" target="_blank" rel="external">https://github.com/amao12580/algorithm/tree/master/src/main/java/leetcode/sumEqualZero</a></li>
</ul>
<p>知乎《职人介绍所》中，请到了不论是技术水平还是名气（也许包括薪水）都在业界名列前茅的<a href="https://www.zhihu.com/people/ec03b8e839a6fb763e1b8113455362db" target="_blank" rel="external">@winter</a>和<a href="https://www.zhihu.com/people/78e3b98074a915b222ae1be4ab038a6e" target="_blank" rel="external">@赵劼</a>。链接在这里：<a href="http://daily.zhihu.com/story/8467704" target="_blank" rel="external">《职人介绍所》第 21 期：中国特别有名的两位程序员 winter 和赵劼来了</a></p>
<p>在围观这期剪辑版的视频后，对手写代码的那道题目产生了高昂的兴趣，细想下来这道题还是挺难的，尤其是现场还不准掀桌呢！哈哈！</p>
<h1 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h1><p>有一个随机整数数组，从中挑ABC三个整数，让ABC三个整数加起来等于零，看有多少个不重复的组合？</p>
<p>在LeetCode上也有这道题：<a href="https://leetcode.com/problems/3sum/" target="_blank" rel="external">3Sum _ LeetCode OJ</a></p>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>很简单，就是把正负数配对，然后看他们的和的取反是不是存在，存在就说明这是一个合法的结果。</p>
<p>例如发现1和-3这两个正负数，求和为-2，再取反得到2，只需要在剩余数组中找到2即可，若存在则是一个预备结果（还要考虑去重复）。</p>
<p>其实相当暴力，但关键在于正负数配对，导致性能可以很大提升。</p>
<p>因为三个数之和要等于零，必然是++-、–+和000（我们把0归到+或-之一）这三种情况中的一种。</p>
<h2 id="荷兰国旗问题"><a href="#荷兰国旗问题" class="headerlink" title="荷兰国旗问题"></a>荷兰国旗问题</h2><p>刚开始的思路走偏了，想到了荷兰国旗问题。<a href="http://www.cnblogs.com/junyuhuang/p/4390780.html" target="_blank" rel="external">”荷兰国旗难题“</a>是计算机科学中的一个程序难题，它是由Edsger Dijkstra提出，荷兰国旗是由红、白、蓝三色组成的。要求将数值种类固定的乱序数组排列为 “AAA,BBB,CCC” 的形式，其实对两端排好，中间的那部分就自然排好了。</p>
<p>原题还是很不一样的，首先在原题中数组是随机整数，而荷兰国旗问题中，数组是种类固定的数据（不一定是Number类型哦）。其次是相关性，荷兰国旗问题只需要按数据进行分类在找到位置即可（计数排序算法）。</p>
<h1 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h1><p>时间复杂度：O(n<sup>3</sup>)</p>
<p>空间复杂度：O(n)</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class <span class="type">SolutionForSimple</span> &#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="built_in">void</span> main(<span class="type">String</span>[] args) &#123;</span><br><span class="line">        <span class="built_in">int</span>[] originArray = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, -<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">3</span>, -<span class="number">4</span>, -<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"input:"</span> + <span class="type">Arrays</span>.toString(originArray));</span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"-------      simple        -------"</span>);</span><br><span class="line">        println(simple(originArray, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> <span class="built_in">void</span> println(<span class="built_in">int</span>[][] <span class="literal">result</span>) &#123;</span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"-------      begin        -------"</span>);</span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"-------      count:"</span> + <span class="literal">result</span>.length + <span class="string">"        -------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="literal">result</span>.length; i++) &#123;</span><br><span class="line">            <span class="type">System</span>.<span class="keyword">out</span>.println((i + <span class="number">1</span>) + <span class="string">":"</span> + <span class="type">Arrays</span>.toString(<span class="literal">result</span>[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"-------      end        -------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 简单实现，<span class="number">3</span>重<span class="keyword">for</span>循环，同时去重</span><br><span class="line">     *</span><br><span class="line">     * @param originArray 原始数组</span><br><span class="line">     * @param number      几个数相加？</span><br><span class="line">     * @<span class="keyword">return</span> 结果组合</span><br><span class="line">     */</span><br><span class="line">    private <span class="keyword">static</span> <span class="built_in">int</span>[][] simple(<span class="built_in">int</span>[] originArray, <span class="built_in">int</span> number) &#123;</span><br><span class="line">        <span class="built_in">int</span> length = originArray.length;</span><br><span class="line">        <span class="built_in">int</span>[][] <span class="literal">result</span> = new <span class="built_in">int</span>[length][number];</span><br><span class="line">        <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = i + <span class="number">1</span>; j &lt; length; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> k = j + <span class="number">1</span>; k &lt; length; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((originArray[i] + originArray[j] + originArray[k]) == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">int</span>[] group = &#123;originArray[i], originArray[j], originArray[k]&#125;;</span><br><span class="line">                        <span class="keyword">if</span> (index &gt;= <span class="literal">result</span>.length) &#123;</span><br><span class="line">                            <span class="literal">result</span> = resize(<span class="literal">result</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="literal">result</span>[index] = group;</span><br><span class="line">                        index++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="literal">result</span>.length - index) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="literal">result</span> = trim(<span class="literal">result</span>, index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> <span class="built_in">int</span>[][] trim(<span class="built_in">int</span>[][] <span class="literal">result</span>, <span class="built_in">int</span> index) &#123;</span><br><span class="line">        <span class="built_in">int</span>[][] newResult = new <span class="built_in">int</span>[index][<span class="literal">result</span>[<span class="number">0</span>].length];</span><br><span class="line">        <span class="type">System</span>.arraycopy(<span class="literal">result</span>, <span class="number">0</span>, newResult, <span class="number">0</span>, newResult.length);</span><br><span class="line">        <span class="keyword">return</span> newResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> <span class="built_in">int</span>[][] resize(<span class="built_in">int</span>[][] <span class="literal">result</span>) &#123;</span><br><span class="line">        <span class="built_in">int</span>[][] newResult = new <span class="built_in">int</span>[<span class="literal">result</span>.length + <span class="literal">result</span>[<span class="number">0</span>].length][<span class="literal">result</span>[<span class="number">0</span>].length];</span><br><span class="line">        <span class="type">System</span>.arraycopy(<span class="literal">result</span>, <span class="number">0</span>, newResult, <span class="number">0</span>, <span class="literal">result</span>.length);</span><br><span class="line">        <span class="keyword">return</span> newResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以下是打印的结果：<span class="type">OK</span></span><br><span class="line"></span><br><span class="line">input:[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, -<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">3</span>, -<span class="number">4</span>, -<span class="number">5</span>]</span><br><span class="line">-------      simple        -------</span><br><span class="line"></span><br><span class="line">-------      begin        -------</span><br><span class="line">-------      count:<span class="number">13</span>        -------</span><br><span class="line"><span class="number">1</span>:[<span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line"><span class="number">2</span>:[<span class="number">0</span>, <span class="number">2</span>, -<span class="number">2</span>]</span><br><span class="line"><span class="number">3</span>:[<span class="number">0</span>, <span class="number">3</span>, -<span class="number">3</span>]</span><br><span class="line"><span class="number">4</span>:[<span class="number">0</span>, <span class="number">4</span>, -<span class="number">4</span>]</span><br><span class="line"><span class="number">5</span>:[<span class="number">0</span>, <span class="number">5</span>, -<span class="number">5</span>]</span><br><span class="line"><span class="number">6</span>:[<span class="number">1</span>, <span class="number">2</span>, -<span class="number">3</span>]</span><br><span class="line"><span class="number">7</span>:[<span class="number">1</span>, <span class="number">3</span>, -<span class="number">4</span>]</span><br><span class="line"><span class="number">8</span>:[<span class="number">1</span>, <span class="number">4</span>, -<span class="number">5</span>]</span><br><span class="line"><span class="number">9</span>:[<span class="number">2</span>, <span class="number">3</span>, -<span class="number">5</span>]</span><br><span class="line"><span class="number">10</span>:[<span class="number">3</span>, -<span class="number">1</span>, -<span class="number">2</span>]</span><br><span class="line"><span class="number">11</span>:[<span class="number">4</span>, -<span class="number">1</span>, -<span class="number">3</span>]</span><br><span class="line"><span class="number">12</span>:[<span class="number">5</span>, -<span class="number">1</span>, -<span class="number">4</span>]</span><br><span class="line"><span class="number">13</span>:[<span class="number">5</span>, -<span class="number">2</span>, -<span class="number">3</span>]</span><br><span class="line">-------      <span class="keyword">end</span>        -------</span><br></pre></td></tr></table></figure>
<h1 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h1><p>简单实现的代码，虽然清晰易懂，但可复用性很低。例如现在将求三个数的和换为求四个数，基本上代码就得大改了，所以做了可重用的版本（OO思想的潜意识啊！），使用递归实现。</p>
<p>时间复杂度：O(n<sup>3</sup>)</p>
<p>空间复杂度：O(n)</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">public class <span class="type">SolutionForRecursion</span> &#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="built_in">void</span> main(<span class="type">String</span>[] args) &#123;</span><br><span class="line">        <span class="built_in">int</span>[] originArray = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, -<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">3</span>, -<span class="number">4</span>, -<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"input:"</span> + <span class="type">Arrays</span>.toString(originArray));</span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"-------      recursion        -------"</span>);</span><br><span class="line">        println(recursion(originArray, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> <span class="built_in">void</span> println(<span class="built_in">int</span>[][] <span class="literal">result</span>) &#123;</span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"-------      begin        -------"</span>);</span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"-------      count:"</span> + <span class="literal">result</span>.length + <span class="string">"        -------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="literal">result</span>.length; i++) &#123;</span><br><span class="line">            <span class="type">System</span>.<span class="keyword">out</span>.println((i + <span class="number">1</span>) + <span class="string">":"</span> + <span class="type">Arrays</span>.toString(<span class="literal">result</span>[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"-------      end        -------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * <span class="number">3</span>重<span class="keyword">for</span>循环的递归版本</span><br><span class="line">     *</span><br><span class="line">     * @param originArray 原始数组</span><br><span class="line">     * @param number      几个数相加？</span><br><span class="line">     * @<span class="keyword">return</span> 结果组合</span><br><span class="line">     */</span><br><span class="line">    private <span class="keyword">static</span> <span class="built_in">int</span>[][] recursion(<span class="built_in">int</span>[] originArray, <span class="built_in">int</span> number) &#123;</span><br><span class="line">        topLayer = number;</span><br><span class="line">        resultArray = new <span class="built_in">int</span>[number * <span class="number">2</span>][number];</span><br><span class="line">        loop(originArray, new <span class="built_in">int</span>[topLayer], <span class="number">0</span>, <span class="number">0</span>, number);</span><br><span class="line">        <span class="keyword">if</span> ((resultArray.length - currentOffset) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            resultArray = trim(resultArray, currentOffset);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> <span class="built_in">int</span>[][] resultArray = null;</span><br><span class="line">    private <span class="keyword">static</span> <span class="built_in">int</span> currentOffset = <span class="number">0</span>;</span><br><span class="line">    private <span class="keyword">static</span> <span class="built_in">int</span> topLayer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> <span class="type">Integer</span> loop(<span class="built_in">int</span>[] originArray, <span class="built_in">int</span>[] chain, <span class="built_in">int</span> beginIndex, <span class="built_in">int</span> expectSumValue, <span class="built_in">int</span> currentLayer) &#123;</span><br><span class="line">        <span class="type">Integer</span> currentLayerLoopResult = null;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = beginIndex; i &lt; originArray.length; i++) &#123;</span><br><span class="line">            <span class="built_in">int</span> currentValue = originArray[i];</span><br><span class="line">            <span class="keyword">if</span> (topLayer == currentLayer) &#123;//最顶层loop时将结果链置空</span><br><span class="line">                chain = new <span class="built_in">int</span>[topLayer];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                chain = copy(chain);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (currentLayer &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">Integer</span> nextLayerLoopResult;</span><br><span class="line">                chain[topLayer - currentLayer] = currentValue;</span><br><span class="line">                <span class="keyword">if</span> (currentLayer == <span class="number">1</span>) &#123;//最底层不需要再向下loop</span><br><span class="line">                    nextLayerLoopResult = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    nextLayerLoopResult = loop(originArray, chain, i + <span class="number">1</span>, expectSumValue - currentValue, currentLayer - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">int</span> currentLayerSumValue = currentValue;</span><br><span class="line">                <span class="keyword">if</span> (nextLayerLoopResult == null) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    currentLayerSumValue += nextLayerLoopResult;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (currentLayerSumValue == expectSumValue) &#123;</span><br><span class="line">                    currentLayerLoopResult = currentValue;</span><br><span class="line">                    <span class="keyword">if</span> (currentLayer == <span class="number">1</span>) &#123;</span><br><span class="line">                        mergeArray(chain);</span><br><span class="line">                        <span class="keyword">return</span> currentLayerLoopResult;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> currentLayerLoopResult;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> currentLayerLoopResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> <span class="built_in">int</span>[] copy(<span class="built_in">int</span>[] chain) &#123;</span><br><span class="line">        <span class="built_in">int</span>[] <span class="literal">result</span> = new <span class="built_in">int</span>[chain.length];</span><br><span class="line">        <span class="type">System</span>.arraycopy(chain, <span class="number">0</span>, <span class="literal">result</span>, <span class="number">0</span>, chain.length);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> <span class="built_in">void</span> mergeArray(<span class="built_in">int</span>[] chain) &#123;</span><br><span class="line">        <span class="keyword">if</span> (currentOffset &gt;= resultArray.length) &#123;</span><br><span class="line">            resultArray = resize(resultArray);</span><br><span class="line">        &#125;</span><br><span class="line">        resultArray[currentOffset] = chain;</span><br><span class="line">        currentOffset++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> <span class="built_in">int</span>[][] trim(<span class="built_in">int</span>[][] <span class="literal">result</span>, <span class="built_in">int</span> index) &#123;</span><br><span class="line">        <span class="built_in">int</span>[][] newResult = new <span class="built_in">int</span>[index][<span class="literal">result</span>[<span class="number">0</span>].length];</span><br><span class="line">        <span class="type">System</span>.arraycopy(<span class="literal">result</span>, <span class="number">0</span>, newResult, <span class="number">0</span>, newResult.length);</span><br><span class="line">        <span class="keyword">return</span> newResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> <span class="built_in">int</span>[][] resize(<span class="built_in">int</span>[][] <span class="literal">result</span>) &#123;</span><br><span class="line">        <span class="built_in">int</span>[][] newResult = new <span class="built_in">int</span>[<span class="literal">result</span>.length + <span class="literal">result</span>[<span class="number">0</span>].length][<span class="literal">result</span>[<span class="number">0</span>].length];</span><br><span class="line">        <span class="type">System</span>.arraycopy(<span class="literal">result</span>, <span class="number">0</span>, newResult, <span class="number">0</span>, <span class="literal">result</span>.length);</span><br><span class="line">        <span class="keyword">return</span> newResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以下是打印的结果：<span class="type">OK</span></span><br><span class="line"></span><br><span class="line">input:[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, -<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">3</span>, -<span class="number">4</span>, -<span class="number">5</span>]</span><br><span class="line">-------      recursion        -------</span><br><span class="line"></span><br><span class="line">-------      begin        -------</span><br><span class="line">-------      count:<span class="number">13</span>        -------</span><br><span class="line"><span class="number">1</span>:[<span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line"><span class="number">2</span>:[<span class="number">0</span>, <span class="number">2</span>, -<span class="number">2</span>]</span><br><span class="line"><span class="number">3</span>:[<span class="number">0</span>, <span class="number">3</span>, -<span class="number">3</span>]</span><br><span class="line"><span class="number">4</span>:[<span class="number">0</span>, <span class="number">4</span>, -<span class="number">4</span>]</span><br><span class="line"><span class="number">5</span>:[<span class="number">0</span>, <span class="number">5</span>, -<span class="number">5</span>]</span><br><span class="line"><span class="number">6</span>:[<span class="number">1</span>, <span class="number">2</span>, -<span class="number">3</span>]</span><br><span class="line"><span class="number">7</span>:[<span class="number">1</span>, <span class="number">3</span>, -<span class="number">4</span>]</span><br><span class="line"><span class="number">8</span>:[<span class="number">1</span>, <span class="number">4</span>, -<span class="number">5</span>]</span><br><span class="line"><span class="number">9</span>:[<span class="number">2</span>, <span class="number">3</span>, -<span class="number">5</span>]</span><br><span class="line"><span class="number">10</span>:[<span class="number">3</span>, -<span class="number">1</span>, -<span class="number">2</span>]</span><br><span class="line"><span class="number">11</span>:[<span class="number">4</span>, -<span class="number">1</span>, -<span class="number">3</span>]</span><br><span class="line"><span class="number">12</span>:[<span class="number">5</span>, -<span class="number">1</span>, -<span class="number">4</span>]</span><br><span class="line"><span class="number">13</span>:[<span class="number">5</span>, -<span class="number">2</span>, -<span class="number">3</span>]</span><br><span class="line">-------      <span class="keyword">end</span>        -------</span><br></pre></td></tr></table></figure>
<h1 id="动态规划思想"><a href="#动态规划思想" class="headerlink" title="动态规划思想"></a>动态规划思想</h1><p>动态规划(Dynamic Programming)的基本思想是：将待求解的问题分解成若干个相互联系的子问题，先求解子问题，然后从这些子问题的解得到原问题的解；对于重复出现的子问题，只在第一次遇到的时候对它进行求解，并把答案保存起来，让以后再次遇到时直接引用答案，不必重新求解。动态规划算法将问题的解决方案视为一系列决策的结果，与贪婪算法不同的是，在贪婪算法中，每采用一次贪婪准则，便做出一个不可撤回的决策；而在动态规划算法中，还要考察每个最优决策序列中是否包含一个最优决策子序列，即问题是否具有最优子结构性质。</p>
<p>下面贴出解法，假设数组长度为N，需要M个数相加为零。则时间复杂度为：<code>N*M</code>，空间复杂度为：<code>N*</code>M<sup>2</sup>。</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line">public class <span class="type">SolutionForDynamicPrograming</span> &#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="built_in">void</span> main(<span class="type">String</span>[] args) &#123;</span><br><span class="line">        <span class="built_in">int</span>[] originArray = &#123;-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"input:"</span> + <span class="type">Arrays</span>.toString(originArray));</span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"-------      dynamicPrograming        -------"</span>);</span><br><span class="line">        <span class="built_in">int</span> count = <span class="number">3</span>;//<span class="number">3</span>个数相加</span><br><span class="line">        <span class="built_in">int</span> expectSumValue = <span class="number">0</span>;//期望累加值为零</span><br><span class="line">        <span class="type">SolutionForDynamicPrograming</span> solutionForDynamicPrograming = new <span class="type">SolutionForDynamicPrograming</span>(count);</span><br><span class="line">        solutionForDynamicPrograming.dynamicPrograming(originArray, <span class="number">0</span>, count, expectSumValue);</span><br><span class="line">        solutionForDynamicPrograming.println(solutionForDynamicPrograming.toArray(solutionForDynamicPrograming.getSolution()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="built_in">int</span> count;</span><br><span class="line">    private <span class="type">Set</span>&lt;<span class="type">String</span>&gt; uniques = new <span class="type">HashSet</span>&lt;&gt;();</span><br><span class="line">    private <span class="type">Map</span>&lt;<span class="type">Integer</span>, <span class="type">Map</span>&lt;<span class="type">Integer</span>, <span class="type">List</span>&lt;<span class="type">List</span>&lt;<span class="type">Integer</span>&gt;&gt;&gt;&gt; existedSolution = new <span class="type">HashMap</span>&lt;&gt;();</span><br><span class="line">    private <span class="type">List</span>&lt;<span class="type">List</span>&lt;<span class="type">Integer</span>&gt;&gt; solution = new <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public <span class="type">List</span>&lt;<span class="type">List</span>&lt;<span class="type">Integer</span>&gt;&gt; getSolution() &#123;</span><br><span class="line">        <span class="keyword">return</span> solution;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">SolutionForDynamicPrograming</span>(<span class="built_in">int</span> count) &#123;</span><br><span class="line">        this.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="built_in">int</span>[][] toArray(<span class="type">List</span>&lt;<span class="type">List</span>&lt;<span class="type">Integer</span>&gt;&gt; solution) &#123;</span><br><span class="line">        <span class="built_in">int</span>[][] <span class="literal">result</span> = new <span class="built_in">int</span>[solution.size()][count];</span><br><span class="line">        <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">List</span>&lt;<span class="type">Integer</span>&gt; list : solution) &#123;</span><br><span class="line">            <span class="literal">result</span>[index] = fromIntegerList(list);</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="built_in">int</span>[] fromIntegerList(<span class="type">List</span>&lt;<span class="type">Integer</span>&gt; list) &#123;</span><br><span class="line">        <span class="type">Integer</span>[] part = new <span class="type">Integer</span>[count];</span><br><span class="line">        part = list.toArray(part);</span><br><span class="line">        <span class="built_in">int</span>[] <span class="literal">result</span> = new <span class="built_in">int</span>[count];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; part.length; i++) &#123;</span><br><span class="line">            <span class="literal">result</span>[i] = part[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="built_in">void</span> println(<span class="built_in">int</span>[][] <span class="literal">result</span>) &#123;</span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"-------      begin        -------"</span>);</span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"-------      count:"</span> + <span class="literal">result</span>.length + <span class="string">"        -------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="literal">result</span>.length; i++) &#123;</span><br><span class="line">            <span class="type">System</span>.<span class="keyword">out</span>.println((i + <span class="number">1</span>) + <span class="string">":"</span> + <span class="type">Arrays</span>.toString(<span class="literal">result</span>[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"-------      end        -------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 运用<span class="type">DP</span>思想来降低递归次数</span><br><span class="line">     */</span><br><span class="line">    private <span class="type">List</span>&lt;<span class="type">List</span>&lt;<span class="type">Integer</span>&gt;&gt; dynamicPrograming(<span class="built_in">int</span>[] <span class="built_in">array</span>, <span class="built_in">int</span> beginIndex, <span class="built_in">int</span> number, <span class="built_in">int</span> expectValue) &#123;</span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">0</span> || beginIndex == <span class="built_in">array</span>.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> null;</span><br><span class="line">        &#125;</span><br><span class="line">        //尝试从已知的答案中获取</span><br><span class="line">        <span class="type">List</span>&lt;<span class="type">List</span>&lt;<span class="type">Integer</span>&gt;&gt; existed = getExistedSolution(number, expectValue);</span><br><span class="line">        <span class="keyword">if</span> (existed != null &amp;&amp; !existed.isEmpty()) &#123;</span><br><span class="line">            //命中了，但有可能不符合beginIndex要求</span><br><span class="line">            //校验命中项，是否符合要求</span><br><span class="line">            <span class="type">List</span>&lt;<span class="type">List</span>&lt;<span class="type">Integer</span>&gt;&gt; vailds = filterVailds(existed, <span class="built_in">array</span>, beginIndex);</span><br><span class="line">            <span class="keyword">if</span> (vailds != null &amp;&amp; !vailds.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> vailds;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">List</span>&lt;<span class="type">List</span>&lt;<span class="type">Integer</span>&gt;&gt; thisPartGroup = new <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = beginIndex; i &lt; <span class="built_in">array</span>.length; i++) &#123;</span><br><span class="line">            <span class="built_in">int</span> currentValue = <span class="built_in">array</span>[i];</span><br><span class="line">            <span class="keyword">if</span> (number == <span class="number">1</span>) &#123;//最底层不再需要向下分解</span><br><span class="line">                <span class="keyword">if</span> (currentValue == expectValue) &#123;</span><br><span class="line">                    <span class="type">List</span>&lt;<span class="type">Integer</span>&gt; underlying = new <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line">                    underlying.add(currentValue);</span><br><span class="line">                    thisPartGroup.add(underlying);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                //将问题分解为同性质的子问题</span><br><span class="line">                <span class="type">List</span>&lt;<span class="type">List</span>&lt;<span class="type">Integer</span>&gt;&gt; nextPartGroup = dynamicPrograming(<span class="built_in">array</span>, i + <span class="number">1</span>, number - <span class="number">1</span>, expectValue - currentValue);</span><br><span class="line">                <span class="keyword">if</span> (nextPartGroup != null) &#123;</span><br><span class="line">                    buildFullGroups(thisPartGroup, nextPartGroup, currentValue);</span><br><span class="line">                    <span class="keyword">if</span> (number == count) &#123;</span><br><span class="line">                        //找到了多组可行的解法</span><br><span class="line">                        solution.addAll(thisPartGroup);</span><br><span class="line">                        thisPartGroup.clear();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (number != count) &#123;</span><br><span class="line">            //如果不是最顶层，就将答案缓存起来</span><br><span class="line">            putExistedSolution(number, expectValue, thisPartGroup);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (thisPartGroup.isEmpty()) &#123;</span><br><span class="line">            thisPartGroup = null;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> thisPartGroup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="type">List</span>&lt;<span class="type">List</span>&lt;<span class="type">Integer</span>&gt;&gt; filterVailds(<span class="type">List</span>&lt;<span class="type">List</span>&lt;<span class="type">Integer</span>&gt;&gt; existed, <span class="built_in">int</span>[] <span class="built_in">array</span>, <span class="built_in">int</span> beginIndex) &#123;</span><br><span class="line">        <span class="type">List</span>&lt;<span class="type">List</span>&lt;<span class="type">Integer</span>&gt;&gt; noRepeats = new <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">List</span>&lt;<span class="type">Integer</span>&gt; list : existed) &#123;</span><br><span class="line">            boolean isOutOfRange = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">Integer</span> key : list) &#123;</span><br><span class="line">                <span class="built_in">int</span> index = <span class="type">Arrays</span>.binarySearch(<span class="built_in">array</span>, beginIndex, <span class="built_in">array</span>.length - <span class="number">1</span>, key);</span><br><span class="line">                <span class="keyword">if</span> (index &lt; beginIndex) &#123;</span><br><span class="line">                    isOutOfRange = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!isOutOfRange) &#123;</span><br><span class="line">                noRepeats.add(list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> noRepeats;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="built_in">void</span> buildFullGroups(<span class="type">List</span>&lt;<span class="type">List</span>&lt;<span class="type">Integer</span>&gt;&gt; thisPartGroup, <span class="type">List</span>&lt;<span class="type">List</span>&lt;<span class="type">Integer</span>&gt;&gt; nextPartGroup, <span class="built_in">int</span> currentValue) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">List</span>&lt;<span class="type">Integer</span>&gt; list : nextPartGroup) &#123;</span><br><span class="line">            <span class="type">List</span>&lt;<span class="type">Integer</span>&gt; resultList = new <span class="type">ArrayList</span>&lt;&gt;(list);</span><br><span class="line">            resultList.add(currentValue);</span><br><span class="line">            <span class="type">Collections</span>.sort(resultList);</span><br><span class="line">            <span class="keyword">if</span> (uniques.add(resultList.toString())) &#123;</span><br><span class="line">                thisPartGroup.add(resultList);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="built_in">void</span> putExistedSolution(<span class="built_in">int</span> number, <span class="built_in">int</span> expectValue, <span class="type">List</span>&lt;<span class="type">List</span>&lt;<span class="type">Integer</span>&gt;&gt; <span class="literal">result</span>) &#123;</span><br><span class="line">        <span class="type">Map</span>&lt;<span class="type">Integer</span>, <span class="type">List</span>&lt;<span class="type">List</span>&lt;<span class="type">Integer</span>&gt;&gt;&gt; expects = new <span class="type">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (existedSolution.containsKey(number)) &#123;</span><br><span class="line">            expects = existedSolution.get(number);</span><br><span class="line">        &#125;</span><br><span class="line">        expects.put(expectValue, <span class="literal">result</span>);</span><br><span class="line">        existedSolution.put(number, expects);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="type">List</span>&lt;<span class="type">List</span>&lt;<span class="type">Integer</span>&gt;&gt; getExistedSolution(<span class="built_in">int</span> number, <span class="built_in">int</span> expectValue) &#123;</span><br><span class="line">        <span class="keyword">if</span> (existedSolution.containsKey(number)) &#123;</span><br><span class="line">            <span class="type">Map</span>&lt;<span class="type">Integer</span>, <span class="type">List</span>&lt;<span class="type">List</span>&lt;<span class="type">Integer</span>&gt;&gt;&gt; expects = existedSolution.get(number);</span><br><span class="line">            <span class="keyword">if</span> (expects.containsKey(expectValue)) &#123;</span><br><span class="line">                <span class="keyword">return</span> expects.get(expectValue);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以下是打印的结果：<span class="type">OK</span></span><br><span class="line"></span><br><span class="line">input:[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, -<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">3</span>, -<span class="number">4</span>, -<span class="number">5</span>]</span><br><span class="line">-------      dynamicPrograming        -------</span><br><span class="line"></span><br><span class="line">-------      begin        -------</span><br><span class="line">-------      count:<span class="number">13</span>        -------</span><br><span class="line"><span class="number">1</span>:[-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">2</span>:[-<span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">3</span>:[-<span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">4</span>:[-<span class="number">4</span>, <span class="number">4</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">5</span>:[-<span class="number">5</span>, <span class="number">5</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">6</span>:[-<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="number">7</span>:[-<span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line"><span class="number">8</span>:[-<span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line"><span class="number">9</span>:[-<span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line"><span class="number">10</span>:[-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line"><span class="number">11</span>:[-<span class="number">3</span>, -<span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line"><span class="number">12</span>:[-<span class="number">4</span>, -<span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line"><span class="number">13</span>:[-<span class="number">3</span>, -<span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line">-------      <span class="keyword">end</span>        -------</span><br></pre></td></tr></table></figure>
<p>尝试优化解法的过程中，让我获益良多，尤其是对于动态规划思想理解的更深刻。在对动态规划解法的研究中，遇到了二维数组去重复的问题，例如二维数组：[[1,-1,0],[0,-1,1]]，这是重复的两个组合，需要去除重复，当时还想到了利用先挨个排好序，再用KMP算法（更简单的利用字符串来equals）来做模式匹配，后来想到了一个巧妙的解法，用beginIndex值来进行判定（filterVailds）就可以了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何更开心的写博客？]]></title>
      <url>http://amao12580.github.io/post/2016/06/How-to-better-write-the-blog/</url>
      <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>不知不觉中，在GitHub Pages写博客快有半年了，工作一直比较忙，但还是想在闲暇更新。既想锻炼自己的文字能力，也反向促使自己思考更多，博客愈发繁茂时，读者也多了，这更给了我继续下去的动力。Keep Moving！习惯了利用碎片化的时间来更新blog，但是回头想想，每次发布blog的过程是比较繁琐的。如何解放自己，专注于写文章呢？现在就让我们一起好好利用Powershell脚本吧！</p>
<p>最开始主要依靠图形界面进行blog发布，来看看有哪些操作吧！</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">在windows DOS下的步骤是：</span><br><span class="line"></span><br><span class="line">1.按下“<span class="keyword">win</span>”+“R”键</span><br><span class="line"></span><br><span class="line">2.在打开的对话框中输入“cmd”</span><br><span class="line"></span><br><span class="line">3.在打开的黑窗口中输入：</span><br><span class="line">Microsoft Windows [版本 6.1.7601]</span><br><span class="line">版权所有 (c) 2009 Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;<span class="keyword">D</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">D</span>:\&gt;<span class="keyword">cd</span> GitHub</span><br><span class="line"></span><br><span class="line"><span class="keyword">D</span>:\GitHub&gt;<span class="keyword">cd</span> Hexo</span><br><span class="line"></span><br><span class="line"><span class="keyword">D</span>:\GitHub\Hexo&gt;hexo <span class="keyword">g</span></span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded <span class="keyword">in</span> 2.14 <span class="built_in">s</span></span><br><span class="line">INFO  Generated: atom.xml</span><br><span class="line">INFO  Generated: <span class="keyword">search</span>.xml</span><br><span class="line">INFO  Generated: sitemap.xml</span><br><span class="line">INFO  Generated: <span class="keyword">about</span>/index.html</span><br><span class="line">INFO  Generated: tags/index.html</span><br><span class="line">INFO  Generated: categories/index.html</span><br><span class="line">INFO  Generated: <span class="keyword">post</span>/2016/06/What-is-a-transaction/index.html</span><br><span class="line">.........<span class="comment">//都是一些HTML Generated信息，就不贴出了。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INFO  119 files generated <span class="keyword">in</span> 4.33 <span class="built_in">s</span></span><br><span class="line"></span><br><span class="line">3.清理不必要的文件：将文件夹<span class="keyword">D</span>:\GitHub\Hexo\public\vendors删除</span><br><span class="line"></span><br><span class="line">4.将<span class="keyword">D</span>:\GitHub\Hexo\public文件夹拷贝到发布文件夹<span class="keyword">D</span>:\GitHub\amao12580.github.io</span><br><span class="line"></span><br><span class="line">5.使用GitHub <span class="keyword">For</span> Windows可视化工具进行提交和同步。</span><br></pre></td></tr></table></figure>
<p>整个过程大约需要10分钟，因为很多都在图形化界面中操作，感觉效率很低。起初的想法是在DOS下做一个批处理，以下是我之前实际在用的命令。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一整行实在不美观，折行让大家看得舒服点！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">cd</span> <span class="keyword">D</span>:\GitHub\Hexo &amp; hexo clean &amp; hexo <span class="keyword">g</span></span><br><span class="line">&amp; rd <span class="keyword">D</span>:\GitHub\Hexo\public\vendors /S /<span class="built_in">Q</span></span><br><span class="line">&amp; gulp</span><br><span class="line">&amp; XCOPY <span class="keyword">D</span>:\GitHub\Hexo\public\*.* <span class="keyword">D</span>:\GitHub\amao12580.github.io /Q /<span class="keyword">D</span> /<span class="keyword">E</span> /C /<span class="built_in">Y</span></span><br><span class="line">&amp; hexo <span class="built_in">s</span></span><br></pre></td></tr></table></figure>
<p>如你所想，还差了最后向github提交呢？并且还不够自动化，需要手动在DOS触发，这明显不符合极客范啊！</p>
<h1 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h1><p>Gulp是一个构建系统，它能通过自动执行常见任务，比如编译预处理CSS，压缩JavaScript和刷新浏览器，来改进网站开发的过程。我主要使用gulp来压缩CSS、HTML、javascript、images。加速blog的访问速度，效果还是很好的！在这里贴一下我在用的gulpfile.js，放在D:\GitHub\Hexo目录下就可以了。还是很好使的，直接给压缩了20%体积。</p>
<p>目前访问速度还算可以了，想进一步优化，需要自建VPS，用Nginx合并一些请求（<a href="https://github.com/alibaba/nginx-http-concat" target="_blank" rel="external">nginx-http-concat</a> 模块），别忘了Nginx还可以缓存静态资源哦！</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="comment">//html压缩</span></span><br><span class="line"><span class="built_in">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="built_in">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="comment">//js压缩</span></span><br><span class="line"><span class="built_in">var</span> jsmin = <span class="built_in">require</span>(<span class="string">'gulp-jsmin'</span>);</span><br><span class="line"><span class="built_in">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="comment">//文件重命名</span></span><br><span class="line"><span class="built_in">var</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);</span><br><span class="line"><span class="comment">//图片压缩png/jpg/gif</span></span><br><span class="line"><span class="built_in">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"><span class="comment">//png压缩</span></span><br><span class="line"><span class="built_in">var</span> pngquant = <span class="built_in">require</span>(<span class="string">'imagemin-pngquant'</span>);</span><br><span class="line"><span class="built_in">var</span> cache = <span class="built_in">require</span>(<span class="string">'gulp-cache'</span>);</span><br><span class="line"><span class="comment">//css压缩</span></span><br><span class="line"><span class="built_in">var</span> csso = <span class="built_in">require</span>(<span class="string">'gulp-csso'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">var</span> root = <span class="string">"./public"</span>;</span><br><span class="line"><span class="built_in">var</span> buildDir = root;</span><br><span class="line"><span class="built_in">var</span> datas=&#123;</span><br><span class="line">    <span class="attribute">html</span>:[root+<span class="string">"/**/*.html"</span>],</span><br><span class="line">    <span class="attribute">image</span>:[root+<span class="string">"/**/*.&#123;png,jpg,jpeg,gif,ico&#125;"</span>],</span><br><span class="line">    <span class="attribute">css</span>:[root+<span class="string">"/**/*.css"</span>],</span><br><span class="line">    <span class="attribute">js</span>:[root+<span class="string">"/**/*.js"</span>,<span class="string">'!*min.js'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 压缩html</span></span><br><span class="line">gulp.task(<span class="string">'htmlmin'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">var</span> options = &#123;</span><br><span class="line">        <span class="attribute">removeComments</span>: <span class="literal">true</span>,<span class="comment">//清除HTML注释</span></span><br><span class="line">        <span class="attribute">collapseWhitespace</span>: <span class="literal">true</span>,<span class="comment">//压缩HTML</span></span><br><span class="line">        <span class="attribute">collapseBooleanAttributes</span>: <span class="literal">true</span>,<span class="comment">//省略布尔属性的值 &lt;input checked="true"/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">        <span class="attribute">removeEmptyAttributes</span>: <span class="literal">true</span>,<span class="comment">//删除所有空格作属性值 &lt;input id="" /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">        <span class="attribute">removeScriptTypeAttributes</span>: <span class="literal">true</span>,<span class="comment">//删除&lt;script&gt;的type="text/javascript"</span></span><br><span class="line">        <span class="attribute">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>,<span class="comment">//删除&lt;style&gt;和&lt;link&gt;的type="text/css"</span></span><br><span class="line">        <span class="attribute">minifyJS</span>: <span class="literal">true</span>,<span class="comment">//压缩页面JS</span></span><br><span class="line">        <span class="attribute">minifyCSS</span>: <span class="literal">true</span><span class="comment">//压缩页面CSS</span></span><br><span class="line">    &#125;;</span><br><span class="line">  gulp.src(datas.html)</span><br><span class="line">  .pipe(htmlclean())</span><br><span class="line">  .pipe(htmlmin(options).on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e);</span><br><span class="line">         &#125;))</span><br><span class="line">  .pipe(gulp.dest(buildDir));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// png图片压缩</span></span><br><span class="line">gulp.task(<span class="string">"imagemin"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(datas.image)</span><br><span class="line">    .pipe(imagemin(&#123;</span><br><span class="line">        <span class="attribute">optimizationLevel</span>: <span class="number">7</span>, <span class="comment">//类型：Number  默认：3  取值范围：0-7（优化等级）</span></span><br><span class="line">        <span class="attribute">progressive</span>: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 无损压缩jpg图片</span></span><br><span class="line">        <span class="attribute">interlaced</span>: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span></span><br><span class="line">        <span class="attribute">multipass</span>: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 多次优化svg直到完全优化</span></span><br><span class="line">        <span class="attribute">svgoPlugins</span>:[&#123;<span class="attribute">removeViewBox</span>:<span class="attribute">false&#125;],</span><br><span class="line">        use</span>:[pngquant()] <span class="comment">//压缩率64%</span></span><br><span class="line">    &#125;).on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e);</span><br><span class="line">         &#125;))</span><br><span class="line">    .pipe(gulp.dest(buildDir));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// js压缩</span></span><br><span class="line">gulp.task(<span class="string">"jsmin"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(datas.js)</span><br><span class="line">    .pipe(uglify().on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="comment">//.pipe(rename(&#123;suffix:'.min'&#125;))</span></span><br><span class="line">    .pipe(gulp.dest(buildDir));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// css压缩</span></span><br><span class="line">gulp.task(<span class="string">"cssmin"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(datas.css)</span><br><span class="line">    .pipe(csso().on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br><span class="line">     &#125;))</span><br><span class="line">    .pipe(gulp.dest(buildDir));</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(<span class="string">"default"</span>,[<span class="string">"htmlmin"</span>,<span class="string">"imagemin"</span>,<span class="string">"jsmin"</span>,<span class="string">"cssmin"</span>]);</span><br></pre></td></tr></table></figure>
<h1 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h1><p>想起了windows 7环境已经支持powershell（增强版DOS！），试想如果有一个ps1脚本可以完成发布blog，再配合windows计划任务，不就可以定时或按用户动作触发了吗？YES，这才是我想要的，不啰嗦，开始干吧！</p>
<p>PS：脚本运行之前，别忘了装一个：Git-2.9.0-64-bit.exe，然后配置好自己的github信息。<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">配置完成后的验证：ssh -T git<span class="meta">@github.com</span></span><br><span class="line">如果提示：Hi <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span> You've successfully authenticated, but GitHub does not provide shell access. 说明你连接成功了</span><br></pre></td></tr></table></figure></p>
<p>设置PowerShell环境，使能“allow scripts to run”选项，步骤如下：<br>以管理员的身份运行PowerShell<br>执行Set-ExecutionPolicy RemoteSigned命令，在对话框中选择Y，如下<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS <span class="string">C:</span>\Windows\system32&gt; Set-ExecutionPolicy RemoteSigned</span><br><span class="line">执行策略更改</span><br><span class="line">执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 <span class="string">http:</span><span class="comment">//go.microsoft.com/fwlink/?LinkID=135170</span></span><br><span class="line">中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?</span><br><span class="line">[Y] 是(Y)  [N] 否(N)  [S] 挂起(S)  [?] 帮助 (默认值为“Y”): Y</span><br><span class="line">PS <span class="string">C:</span>\Windows\system32&gt;</span><br></pre></td></tr></table></figure></p>
<p>Finally，一起来看看我的“syncArticle.ps1”，遇到无数坑（语句块是大坑！），不过还是被我搞定了！</p>
<p>‘D:\Program Files\Git\bin\git.exe’是我的Git安装目录。</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd D:<span class="tag">\<span class="name">GitHub</span></span><span class="tag">\<span class="name">Hexo</span></span></span><br><span class="line">hexo g --silent</span><br><span class="line">Remove-Item D:<span class="tag">\<span class="name">GitHub</span></span><span class="tag">\<span class="name">Hexo</span></span><span class="tag">\<span class="name">public</span></span><span class="tag">\<span class="name">vendors</span></span><span class="tag">\<span class="name">*</span></span> -recurse</span><br><span class="line">Remove-Item D:<span class="tag">\<span class="name">GitHub</span></span><span class="tag">\<span class="name">Hexo</span></span><span class="tag">\<span class="name">public</span></span><span class="tag">\<span class="name">vendors</span></span> -recurse</span><br><span class="line">gulp --silent</span><br><span class="line">XCOPY D:<span class="tag">\<span class="name">GitHub</span></span><span class="tag">\<span class="name">Hexo</span></span><span class="tag">\<span class="name">public</span></span><span class="tag">\<span class="name">*</span></span>.* D:<span class="tag">\<span class="name">GitHub</span></span><span class="tag">\<span class="name">amao</span></span>12580.github.io /Q /D /E /C /Y</span><br><span class="line">cd D:<span class="tag">\<span class="name">GitHub</span></span><span class="tag">\<span class="name">amao</span></span>12580.github.io</span><br><span class="line">&amp; 'D:<span class="tag">\<span class="name">Program</span></span> Files<span class="tag">\<span class="name">Git</span></span><span class="tag">\<span class="name">bin</span></span><span class="tag">\<span class="name">git</span></span>.exe' add .</span><br><span class="line">&amp; 'D:<span class="tag">\<span class="name">Program</span></span> Files<span class="tag">\<span class="name">Git</span></span><span class="tag">\<span class="name">bin</span></span><span class="tag">\<span class="name">git</span></span>.exe' commit -m "Auto commit by powershell script."</span><br><span class="line">&amp; 'D:<span class="tag">\<span class="name">Program</span></span> Files<span class="tag">\<span class="name">Git</span></span><span class="tag">\<span class="name">bin</span></span><span class="tag">\<span class="name">git</span></span>.exe' push -f origin master</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<p>在windows计划任务管理，我已经配置好，每晚10点，自动发布有更新的blog啦！来看看导出的windows计划任务XML文件吧！</p>
<p>PC-201402281156\Administrator，这是我的主机名和用户名。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-16"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">Task</span> <span class="attr">version</span>=<span class="string">"1.2"</span> <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/windows/2004/02/mit/task"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">RegistrationInfo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Date</span>&gt;</span>2016-06-15T17:08:16.1670287<span class="tag">&lt;/<span class="name">Date</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Author</span>&gt;</span>PC-201402281156\Administrator<span class="tag">&lt;/<span class="name">Author</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">RegistrationInfo</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Triggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">CalendarTrigger</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">StartBoundary</span>&gt;</span>2016-06-15T22:00:00<span class="tag">&lt;/<span class="name">StartBoundary</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Enabled</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ScheduleByDay</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DaysInterval</span>&gt;</span>1<span class="tag">&lt;/<span class="name">DaysInterval</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ScheduleByDay</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">CalendarTrigger</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Triggers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Principals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Principal</span> <span class="attr">id</span>=<span class="string">"Author"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">UserId</span>&gt;</span>PC-201402281156\Administrator<span class="tag">&lt;/<span class="name">UserId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">LogonType</span>&gt;</span>InteractiveToken<span class="tag">&lt;/<span class="name">LogonType</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">RunLevel</span>&gt;</span>LeastPrivilege<span class="tag">&lt;/<span class="name">RunLevel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Principal</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Principals</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MultipleInstancesPolicy</span>&gt;</span>IgnoreNew<span class="tag">&lt;/<span class="name">MultipleInstancesPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DisallowStartIfOnBatteries</span>&gt;</span>false<span class="tag">&lt;/<span class="name">DisallowStartIfOnBatteries</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">StopIfGoingOnBatteries</span>&gt;</span>true<span class="tag">&lt;/<span class="name">StopIfGoingOnBatteries</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">AllowHardTerminate</span>&gt;</span>true<span class="tag">&lt;/<span class="name">AllowHardTerminate</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">StartWhenAvailable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">StartWhenAvailable</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RunOnlyIfNetworkAvailable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">RunOnlyIfNetworkAvailable</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">IdleSettings</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">StopOnIdleEnd</span>&gt;</span>true<span class="tag">&lt;/<span class="name">StopOnIdleEnd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">RestartOnIdle</span>&gt;</span>false<span class="tag">&lt;/<span class="name">RestartOnIdle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">IdleSettings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">AllowStartOnDemand</span>&gt;</span>true<span class="tag">&lt;/<span class="name">AllowStartOnDemand</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Hidden</span>&gt;</span>false<span class="tag">&lt;/<span class="name">Hidden</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RunOnlyIfIdle</span>&gt;</span>false<span class="tag">&lt;/<span class="name">RunOnlyIfIdle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">WakeToRun</span>&gt;</span>false<span class="tag">&lt;/<span class="name">WakeToRun</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ExecutionTimeLimit</span>&gt;</span>PT10M<span class="tag">&lt;/<span class="name">ExecutionTimeLimit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Priority</span>&gt;</span>7<span class="tag">&lt;/<span class="name">Priority</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Actions</span> <span class="attr">Context</span>=<span class="string">"Author"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Exec</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Command</span>&gt;</span>powershell<span class="tag">&lt;/<span class="name">Command</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Arguments</span>&gt;</span>D:\GitHub\syncArticle.ps1<span class="tag">&lt;/<span class="name">Arguments</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">WorkingDirectory</span>&gt;</span>D:\GitHub<span class="tag">&lt;/<span class="name">WorkingDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Exec</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Actions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Task</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如下图所示，用户可以手动触发计划任务，来看看运行结果吧！点击历史记录还可以查看每次任务计划的运行情况呢！</p>
<p><img src="/img/windowsPlanTask.png" alt=""></p>
<p>现在我的blog就可以每晚10点自动发布到github了，终于可以专注于写文章了！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[消息系统的架构演进之路]]></title>
      <url>http://amao12580.github.io/post/2016/06/Message-system-architecture-evolution/</url>
      <content type="html"><![CDATA[<p>暂时未完成</p>
<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><h1 id="1-0版架构的问题"><a href="#1-0版架构的问题" class="headerlink" title="1.0版架构的问题"></a>1.0版架构的问题</h1><h2 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h2><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><h1 id="2-0版如何改进？"><a href="#2-0版如何改进？" class="headerlink" title="2.0版如何改进？"></a>2.0版如何改进？</h1><h2 id="详细说明-1"><a href="#详细说明-1" class="headerlink" title="详细说明"></a>详细说明</h2><h2 id="缺陷-1"><a href="#缺陷-1" class="headerlink" title="缺陷"></a>缺陷</h2><h2 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h2><h1 id="展望3-0版"><a href="#展望3-0版" class="headerlink" title="展望3.0版"></a>展望3.0版</h1><h2 id="详细说明-2"><a href="#详细说明-2" class="headerlink" title="详细说明"></a>详细说明</h2><h2 id="缺陷-2"><a href="#缺陷-2" class="headerlink" title="缺陷"></a>缺陷</h2><h2 id="优势-2"><a href="#优势-2" class="headerlink" title="优势"></a>优势</h2><p><img src="/img/03-消息系统改进1阶段的总体结构.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[当我们谈事务时，我们在谈什么？]]></title>
      <url>http://amao12580.github.io/post/2016/06/What-is-a-transaction/</url>
      <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>写这篇文章的初衷是记录和总结关于事务的方方面面，还记得以前在面试高工时，被问到数据库事务的实现原理是什么？答了读写锁和表锁，以及myisam和innodb引擎在事务隔离级别的差异。当时面试官不是很满意，自然那家公司最终也没有谈成。面试完了，这个问题却一直萦绕在脑海中挥之不去，经过自己对存储引擎知识的补全，才知道原来事务是这样的妙不可言。如果读者需要对数据库事务进行系统的学习，我推荐一本书<a href="https://www.amazon.cn/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95-InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E-%E5%A7%9C%E6%89%BF%E5%B0%A7/dp/B00ETOV48K/ref=sr_1_1?s=digital-text&amp;ie=UTF8&amp;qid=1465707176&amp;sr=1-1&amp;keywords=MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%EF%BC%9AInnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E" target="_blank" rel="external">《MySQL技术内幕  InnoDB存储引擎 第2版》</a>。</p>
<p>讨论传统关系型数据库内的事务，以及如何与NoSQL领域结合进行事务化。</p>
<h2 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a>什么是事务？</h2><p>数据库事务（简称：事务）是数据库管理系统执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成。这是使用Google Search以“事务”为关键字查找时，第一条是wikipedia给出的描述。通俗地讲，事务就是通过一系列操作来完成一件事情，在进行这些操作的过程中，要么这些操作完全执行，要么这些操作全不执行，不存在中间状态，事务分为事务执行阶段和事务提交阶段。</p>
<h3 id="与文件系统的差异"><a href="#与文件系统的差异" class="headerlink" title="与文件系统的差异"></a>与文件系统的差异</h3><p>以MySQL数据库系统为例，数据被按页（16K）存储在磁盘中，如何组织数据的存储格式，由存储引擎来定义。在数据被插入或修改时，为了提高TPS，规避磁盘写入缓慢的问题，MySQL会将新数据页缓冲到内存（Insert Buffer），达到一定时间，或者积累的数据达到一定量级后，会由Master Thread刷入磁盘，同时清空缓冲区（CheckPoint机制）。在数据需要读取时，先从磁盘按页读取，如果有配置缓冲池，这些取出的数据还会在内存中留一个副本（FIX），只要数据不进行修改，下次读取时就会冲缓冲池命中了，大大加快了访问速度。</p>
<p>一般存储引擎都是采用 btree 或者 lsm tree 来实现索引，但是索引的最小单位不是 K/V 记录对象，而是数据页，数据页的组织关系实现就是存储引擎的数据组织方式。</p>
<p>传统数据库引擎大都是设计一个磁盘和内存完全一样的数据组织方式,这个结构是固定的空间大小（innodb 的 page 是 16KB）,访问它必须遵守严格的 The FIX Rules 规则：1.<br>修改一个 page 需要获得该页的 x-latch lock，2.访问一个 page 需要获得该页的 s-latch lock 或者 x-latch lock。3.持有该 page 的 latch 直到修改或者访问该页的操作完成 latch unlock。</p>
<p>看到这里，我们不经有疑问，在内存与磁盘上，读、写、组织数据，这不是文件系统在干的事情吗？的确，在NTFS、Ext4等文件系统中，这些功能都是被支持的。数据库系统是基于文件系统（Base-on-disk）的，按照不同文件系统(包括不同的操作系统内存分配算法)，在底层调用了不同的API进行数据的读、写、组织。但它最重要的特性是事务的支持，允许有限个的数据库操作进行逻辑单元化，解决文件系统访问无状态的问题。同时也是由于事务一致性的支持，数据库系统相较于文件系统的性能普遍是下降的，隔离级别的支持越高（更强的一致性），性能下降越是厉害。</p>
<h2 id="本地事务"><a href="#本地事务" class="headerlink" title="本地事务"></a>本地事务</h2><p>不同的数据库系统有不同的事务行为。有些数据库系统根本不支持事务。有些数据库系统支持事务，但是不支持双向提交（2PC）协议。这类事务被称为支持本地事务。有些数据库系统既支持本地事务，又支持 2PC。这类事务被称为支持分布式事务，或者全局事务。全局事务也被称为 XA 事务，因为它们包含 XAResource接口。</p>
<h3 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h3><p>一般说到事务，就会想到它的特性— ACID，那么什么是 ACID 呢？我们先用一个现实中的例子来说明：AB 两同学在同一家银行ZSBANK的账号都有 1,000 块钱，A 通过ZSBANK银行转账向 B 转了 100 块钱，这个事务分为两个操作,即从 A 同学账号扣除 100，向 B 同学账号增加 100。</p>
<p>对于应用层程序的同一个线程X来说，逻辑伪码如下：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义转账金额</span></span><br><span class="line"><span class="keyword">double</span> transferAmount=<span class="number">100.00</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.开始事务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.检查A同学账户余额是否大于100元</span></span><br><span class="line"><span class="keyword">double</span> balanceForA=<span class="keyword">select</span> account.balance <span class="keyword">from</span> account <span class="keyword">where</span> uid=A;</span><br><span class="line"><span class="keyword">if</span>(transferAmount&gt;balanceForA)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ErrorResult(<span class="number">100</span>,<span class="string">"账户余额不足."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.将A同学账户扣款100元</span></span><br><span class="line"><span class="keyword">int</span> deductRet=update account <span class="keyword">set</span> balance=balance-transferAmount <span class="keyword">where</span> uid=A and balance &gt;=transferAmount;</span><br><span class="line"><span class="keyword">if</span>(deductRet==<span class="number">1</span>)&#123;</span><br><span class="line">    LogHelper.info(<span class="string">"account A deduct "</span>+transferAmount+<span class="string">" success."</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ErrorResult(<span class="number">200</span>,<span class="string">"账户扣款失败."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.将B同学账户增加100元</span></span><br><span class="line"><span class="keyword">int</span> deductRet=update account <span class="keyword">set</span> balance=balance+transferAmount <span class="keyword">where</span> uid=B;</span><br><span class="line"><span class="keyword">if</span>(deductRet==<span class="number">1</span>)&#123;</span><br><span class="line">    LogHelper.info(<span class="string">"account B add "</span>+transferAmount+<span class="string">" success."</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ErrorResult(<span class="number">300</span>,<span class="string">"账户增加余额失败."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.提交事务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.如果遭遇数据库异常(SQLException)，回滚事务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//7.返回处理结果</span></span><br></pre></td></tr></table></figure>
<p>那在没有事务的情况下会发生什么呢？在步骤1中，同时有2个线程X、Y，线程X先执行查询，发现余额充足，可以扣款，还没有进行步骤2时，Y此时将款项先扣除了，导致X线程的步骤2失败。其他的，在执行的任一阶段，都有可能遭遇不可抗力因素，比如，执行完步骤2，还未执行步骤3时，适逢操作系统crash或断电、存储介质失败等情况，此时没有事务的一致性保证，在系统恢复时将无法回滚，导致数据不一致。</p>
<p>Lost update：<br>两个事务都同时更新一行数据，但是第二个事务却中途失败退出，导致对数据的两个修改都失效了。</p>
<p>Dirty Reads：<br>一个事务开始读取了某行数据，但是另外一个事务已经更新了此数据但没有能够及时提交。这是相当危险的，因为很可能所有的操作都被回滚。</p>
<p>Non-repeatable Reads：<br>一个事务对同一行数据重复读取两次，但是却得到了不同的结果。</p>
<p>Second lost updates problem：<br>无法重复读取的特例。有两个并发事务同时读取同一行数据，然后其中一个对它进行修改提交，而另一个也进行了修改提交。这就会造成第一次写操作失效。</p>
<p>Phantom Reads：<br>事务在操作过程中进行两次查询，第二次查询的结果包含了第一次查询中未出现的数据（这里并不要求两次查询的SQL语句相同）。这是因为在两次查询过程中有另外一个事务插入数据造成的。</p>
<h4 id="原子性（Atomicity）"><a href="#原子性（Atomicity）" class="headerlink" title="原子性（Atomicity）"></a>原子性（Atomicity）</h4><p>不可拆分，组成事务的系列操作是一个整体，要么全执行，要么不执行，不允许部分执行。通过上面例子就是从 A 同学扣除钱和向 B 同学增加 100 是一起发生的，不可能出现扣除了 A 的钱，但没增加 B 的钱的情况。</p>
<h4 id="一致性（Consistency）"><a href="#一致性（Consistency）" class="headerlink" title="一致性（Consistency）"></a>一致性（Consistency）</h4><p>一致性指的是语义上的一致性，即业务逻辑层面的一致。在事务开始之前和事务结束以后，数据库的完整性和状态没有被破坏，而在事务执行阶段，一致性是会被破坏的。这个怎么理解呢？就是 A、B 两人在转账钱的总和是 2,000，转账后两人的总和也必须是 2,000。不会因为这次转账事务破坏这个状态。如果帐户A上的钱减少了，而帐户B上的钱却没有增加(如在执行步骤3时失败)，那么我们认为此时数据处于不一致的状态。</p>
<p>在事务处理的ACID属性中，一致性是最基本的属性，其它的三个属性都为了保证一致性而存在的。MySQL数据库innodb的事务，是通过redo log（innodb log)，undo log，锁机制，来维护这个一致性的。</p>
<h4 id="隔离性（Isolation）"><a href="#隔离性（Isolation）" class="headerlink" title="隔离性（Isolation）"></a>隔离性（Isolation）</h4><p>多个事务在并发执行时，事务执行的中间状态是其他事务不可访问的。A 转出 100 但事务没有确认提交，这时候银行人员对其账号查询时，看到的应该还是 1,000，不是 900。</p>
<h4 id="持久性（Durability）"><a href="#持久性（Durability）" class="headerlink" title="持久性（Durability）"></a>持久性（Durability）</h4><p>事务一旦提交生效，其结果将永久保存，不受任何故障影响。A 转账一但完成，那么 A 就是 900，B 就是 1,100，这个结果将永远保存在银行的数据库中，直到他们下次交易事务的发生。</p>
<h3 id="4种Log"><a href="#4种Log" class="headerlink" title="4种Log"></a>4种Log</h3><p>4种Log指的是：redo log、undo log、bin log 、relay log</p>
<p>日志在内存里也是有缓存的，这里将其叫做log buffer。磁盘上的日志文件称为log file。log file一般是追加内容，可以认为是顺序写，顺序写的磁盘IO开销要小于随机写。</p>
<p>Undo log记录某数据被修改前的值，可以用来在事务失败时进行rollback；redo log记录某数据块被修改后的值（按页记录），可以用来恢复未写入data file的已成功事务更新的数据。undo log和redo log 都有持久化的要求，两者的共同协作实现了事务持久化要求，不论是否遭遇宕机，数据库实例在启动时都会检查是否存在数据不一致，这与redis启动时检查AOF文件是类似的。</p>
<p>Undo log除了在rollback事务时用到，另外还在MVCC机制中使用，它按页记录了每一个事务版本在开始时需要用到的数据版本，因此同样的数据页，在undo log中可能存在多个版本，因此undo log需要支持随机读（redo log不需要）。在事务提交后，undo log对应的数据页不再有用了，但不会被立即清除，MySQL内部线程架构中，有Purge Thread专门对它进行定时清理。具体触发清理的机制是比较复杂的。</p>
<p>MySQL Innodb引擎采用 WAL（Write-Ahead Log）方式写入redo log，WAL通俗点说就是说在事务所有数据修改提交前，需要先将其对应的操作日志追加写入磁盘文件（AOF：append only file），以便出现意外可以恢复（所以redo log也叫做重放日志）,这样就达到了持久性的要求。此外鼎鼎大名的MongoDB（WiredTiger存储引擎）、SQLite也采用了WAL机制。</p>
<p>Bin log的提出主要是面向于MySQL的Replication架构，在多个MySQL节点间，需要一种机制对节点间的数据进行同步。例如在Master-Slave模式下，Master节点每次对数据库进行一次修改操作（DML SQL），就记录这些SQL语句到Master节点本机的bin log文件中，Slave节点会定期访问Master节点的bin log，并按照上次最后一次读取的position值，读取后续的字节，读取后的字节先放在Slave节点的本地relay log中（AOF），由Slave本机的SQL线程重放到Slave实例，重放时Slave也会记录bin log，至此就完成了同步。Redis也采用了类似的多节点数据增量同步方案，详情请查阅<a href="http://www.distorage.com/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%8A%80%E6%9C%AF%E7%B3%BB%E5%88%97-gossip%E7%AE%97%E6%B3%95/?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">Gossip算法</a>。</p>
<p>Master节点也可以触发强制Slave进行一次同步，如果Slave节点下面不再挂其他MySQL节点，Slave节点可以关闭bin log，这依据Master-Slave的配置来决定。</p>
<p>Bin log与redo log的主要不同体现在，redo log只记录由Innodb存储引擎产生的事务重放日志，它是按数据页进行存储的。而bin log记录了所有类型的存储引擎执行的DML SQL语句。最后一点是，redo log总是在事务进行中持续顺序写入磁盘，而bin log只在DML SQL提交后写入一次。如果没有使用事务，执行DML SQL时，bin log file会产生日志，而redo log file无变化。</p>
<p>为了减少日志刷盘造成写IO压力，Innodb对redo log和bin log的刷盘操作做了大量优化，使用组提交（Group commit）的刷盘方式来提高性能，同是使用prepare lock保证redo log和bin log的顺序一致性（prepare_commit_mutex 配置项）。</p>
<h3 id="Checkpoint机制"><a href="#Checkpoint机制" class="headerlink" title="Checkpoint机制"></a>Checkpoint机制</h3><p>Checkpoint是为了定期将db buffer的内容刷新到data file。当遇到内存不足、db buffer已满等情况时，需要将db buffer中的内容/部分内容（特别是脏数据）转储到data file中。在转储时，会记录checkpoint发生的”时刻“。在故障回复时候，只需要redo/undo最近的一次checkpoint之后的操作。</p>
<h3 id="逻辑事务-VS-物理事务"><a href="#逻辑事务-VS-物理事务" class="headerlink" title="逻辑事务 VS 物理事务"></a>逻辑事务 VS 物理事务</h3><p>在谈逻辑与物理时，经常说到“逻辑删除”/“物理删除”、“逻辑地址”/“物理地址”，那逻辑事务与物理事务又是什么呢？</p>
<p>一般而言，所谓的数据库事务都是针对单个数据库的事务，即单库事务。而跨库事务，顾名思义，是指涉及多个数据库的事务，理论上也必须满足ACID属性。两者最核心的区别在于，单库事务一般是由数据库保证的，俗称物理事务，而跨库事务一般是由应用保证的，俗称逻辑事务。与单库事务相比，跨库事务执行成本高，稳定性差，管理也更复杂，但在某些场景下，尤其是分布式应用环境下，又是不得不使用的技术。</p>
<p>再举个栗子，单库事务好比你从北京飞上海，到东航官网买张票就搞定了，而跨库事务好比北京飞纽约，到上海转机，就得买东航转上航的联票，出票就转由携程保证了。</p>
<p>而在Spring中，事务分为物理事务和逻辑事务；<br>物理事务：就是底层数据库提供的事务支持，如JDBC或JTA提供的事务；<br>逻辑事务：是Spring管理的事务，不同于物理事务，逻辑事务提供更丰富的控制，而且如果想得到Spring事务管理的好处，必须使用逻辑事务，因此在Spring中如果没特别强调一般就是逻辑事务；</p>
<p>物理事务和逻辑事务最大差别就在于事务传播行为，事务传播行为用于指定在多个事务方法间调用时，事务是如何在这些方法间传播的</p>
<p>逻辑事务即支持非常低级别的控制，也有高级别解决方案：</p>
<h4 id="低级别解决方案"><a href="#低级别解决方案" class="headerlink" title="低级别解决方案"></a>低级别解决方案</h4><p>工具类：使用工具类获取连接（会话）和释放连接（会话），如使用org.springframework.jdbc.datasource包中的ConnectionUtils类来获取和释放具有逻辑事务功能的连接。当然对集成第三方ORM框架也提供了类似的工具类，如对Hibernate提供了SessionFactoryUtils工具类，JPA的EntityManagerFactoryUtils等，其他工具类都是使用类似<em>*</em>Utils命名；</p>
<h4 id="高级别解决方案"><a href="#高级别解决方案" class="headerlink" title="高级别解决方案"></a>高级别解决方案</h4><p>模板类：使用Spring提供的模板类，如JdbcTemplate、HibernateTemplate和JpaTemplate模板类等，而这些模板类内部其实是使用了低级别解决方案中的工具类来管理连接或会话；</p>
<h3 id="编程式事务-VS-声明式事务"><a href="#编程式事务-VS-声明式事务" class="headerlink" title="编程式事务 VS 声明式事务"></a>编程式事务 VS 声明式事务</h3><p>Spring提供两种编程式事务支持：直接使用PlatformTransactionManager实现和使用TransactionTemplate模板类，用于支持逻辑事务管理。<br>如果采用编程式事务推荐使用TransactionTemplate模板类和高级别解决方案。</p>
<h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><h4 id="默认隔离级别"><a href="#默认隔离级别" class="headerlink" title="默认隔离级别"></a>默认隔离级别</h4><h5 id="不同ORM框架的默认隔离级别"><a href="#不同ORM框架的默认隔离级别" class="headerlink" title="不同ORM框架的默认隔离级别"></a>不同ORM框架的默认隔离级别</h5><h5 id="不同DB-Proxy的默认隔离级别"><a href="#不同DB-Proxy的默认隔离级别" class="headerlink" title="不同DB Proxy的默认隔离级别"></a>不同DB Proxy的默认隔离级别</h5><h5 id="不同RDBMS的默认隔离级别"><a href="#不同RDBMS的默认隔离级别" class="headerlink" title="不同RDBMS的默认隔离级别"></a>不同RDBMS的默认隔离级别</h5><p>MySQL InnoDB Default：可重复读</p>
<p>Oracle Default：读已提交</p>
<p>不同存储引擎的默认隔离级别</p>
<h3 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h3><p>Spring 事务传播行为</p>
<h4 id="默认传播行为"><a href="#默认传播行为" class="headerlink" title="默认传播行为"></a>默认传播行为</h4><h3 id="RDBMS如何权衡事务隔离与高并发读写？"><a href="#RDBMS如何权衡事务隔离与高并发读写？" class="headerlink" title="RDBMS如何权衡事务隔离与高并发读写？"></a>RDBMS如何权衡事务隔离与高并发读写？</h3><h4 id="MVCC与Free-Lock"><a href="#MVCC与Free-Lock" class="headerlink" title="MVCC与Free Lock"></a>MVCC与Free Lock</h4><p>多线程环境下各种数据结构的实现有了很大的变化，每当我们更新某个数据的时候，我们都要考虑其它线程是否对其进行了修改。最简单的一种方法就是加锁，不过加锁会导致性能低下，而且可能阻塞其他线程。因此，我们引入了非阻塞(non-blocking)的算法 —— 通过CAS（Compare &amp; Set，或是Compare &amp; Swap）操作保证操作的原子性，同时我们还引入了 lock-free 的概念，它指的是一个线程出现问题（如阻塞，失败）但不影响其他线程（从总体看程序仍然是在运行的）</p>
<p>CPU：CAS_ADD</p>
<h5 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h5><h5 id="排它锁"><a href="#排它锁" class="headerlink" title="排它锁"></a>排它锁</h5><h5 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h5><h3 id="在主从架构下RDBMS如何保证事务？"><a href="#在主从架构下RDBMS如何保证事务？" class="headerlink" title="在主从架构下RDBMS如何保证事务？"></a>在主从架构下RDBMS如何保证事务？</h3><h3 id="在双主架构下RDBMS如何保证事务？"><a href="#在双主架构下RDBMS如何保证事务？" class="headerlink" title="在双主架构下RDBMS如何保证事务？"></a>在双主架构下RDBMS如何保证事务？</h3><h3 id="双活数据中心的事务管理"><a href="#双活数据中心的事务管理" class="headerlink" title="双活数据中心的事务管理"></a>双活数据中心的事务管理</h3><h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><h3 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a>2PC</h3><h3 id="3PC"><a href="#3PC" class="headerlink" title="3PC"></a>3PC</h3><h3 id="拜占庭将军问题-两军问题"><a href="#拜占庭将军问题-两军问题" class="headerlink" title="拜占庭将军问题/两军问题"></a>拜占庭将军问题/两军问题</h3><h3 id="事务解耦"><a href="#事务解耦" class="headerlink" title="事务解耦"></a>事务解耦</h3><h3 id="事务补偿"><a href="#事务补偿" class="headerlink" title="事务补偿"></a>事务补偿</h3><h3 id="事务回滚"><a href="#事务回滚" class="headerlink" title="事务回滚"></a>事务回滚</h3><h3 id="最终资源一致性"><a href="#最终资源一致性" class="headerlink" title="最终资源一致性"></a>最终资源一致性</h3><h3 id="与nosql"><a href="#与nosql" class="headerlink" title="与nosql"></a>与nosql</h3><h4 id="MongoDB如何实现事务？"><a href="#MongoDB如何实现事务？" class="headerlink" title="MongoDB如何实现事务？"></a>MongoDB如何实现事务？</h4><h5 id="表锁与行锁"><a href="#表锁与行锁" class="headerlink" title="表锁与行锁"></a>表锁与行锁</h5><h4 id="Redis如何实现事务？"><a href="#Redis如何实现事务？" class="headerlink" title="Redis如何实现事务？"></a>Redis如何实现事务？</h4><h5 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h5><h6 id="Redis与MVCC实现Free-Lock"><a href="#Redis与MVCC实现Free-Lock" class="headerlink" title="Redis与MVCC实现Free Lock"></a>Redis与MVCC实现Free Lock</h6><p>HBase，couchBase，leveldb</p>
<h3 id="阿里DTS"><a href="#阿里DTS" class="headerlink" title="阿里DTS"></a>阿里DTS</h3><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><p>《MySQL技术内幕：InnoDB存储引擎（第2版）》</p>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1" target="_blank" rel="external">数据库事务-维基百科</a></p>
</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98" target="_blank" rel="external">拜占庭将军问题</a></li>
<li><a href="http://weibo.com/ttarticle/p/show?id=2309403992797932856430" target="_blank" rel="external">7-10倍写入性能提升:剖析WiredTiger数据页无锁及压缩黑科技</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[分布式软件理论总结]]></title>
      <url>http://amao12580.github.io/post/2016/05/Summary-of-distributed-theory/</url>
      <content type="html"><![CDATA[<p><img src="/img/thinking.jpg" alt=""></p>
<h1 id="软件系统的本质"><a href="#软件系统的本质" class="headerlink" title="软件系统的本质"></a>软件系统的本质</h1><p>软件是现实的抽象，讨论抽象的本质是困难的，让我们一起在现实中思考。小到一支笔，大到一部汽车，这些产品的出现，使我们在现实生活中得到了方便。这里说的方便，是指因为使用了这些产品，降低了成本，提高了效率。在没有笔的时代，想要记录信息需要结绳、岩画或篆刻，这是高成本的，效率也很低。同样的，没有汽车的时代，想要到达另一个城市，会因为恶劣天气而被迫中途搁置，相应的通行时间也会比现在长得多。进一步的思考，笔与汽车的共同点又在哪里呢？</p>
<p>笔与汽车，这些产品是为了满足人们的各类生活需求而发明的。即，人们因为现实需要，而发明或改进了产品，产品是为了帮助人们更好的生活而存在。同样的，软件系统也是如此，人们出于远距离沟通交流需要，发明电话拨号系统；因为更随时随地的信息多样化交流，发明了各种互联网IM产品。</p>
<p>软件系统是依托于人们现实需求而存在，用以辅助人们更好的生活，它是现实世界在虚拟世界的抽象。同样的软件系统也存在着兴衰淘汰，一款软件刚问世时，受欢迎程度总是处于低谷，存在现实世界对其接受适应的时间窗。突破时间窗，进而逐渐闻名天下，此时依托此软件又会催生出许多子软件链（如chromium的众多壳浏览器、SVN的众多客户端）。随着技术革新，软件产业也会更新换代，跟不上时代的软件系统会逐渐退出市场（如vista操作系统的短命）。但市场总是存在需要的，类似的软件在倒下后总会有后继者，如浏览器，这几乎在国内，每家互联网公司都想做或者已经在做。</p>
<h1 id="不良设计的局限性"><a href="#不良设计的局限性" class="headerlink" title="不良设计的局限性"></a>不良设计的局限性</h1><p>在软件系统的发展初期，适用面狭窄，功能单一、用户少、价值不够高，造成对软件系统研发的不重视，成本投入低。相应的，软件所带来的经济收益也是有限的。此时的软件系统往往谈不上架构，往往是一个软件系统承载了所有功能，单个功能模块没有边界，逻辑分散，而各个功能模块之间的耦合关系是散乱的。</p>
<p><img src="/img/chaos.jpg" alt=""></p>
<p>在软件系统有机会成长起来后，带来了一定的经济收益。我们会思考软件系统的功能增多，更适应于用户（市场需要），或者考虑增强原有用户黏性，此时会对软件系统提出更多要求。而初期功能模块散乱的堆叠，对迫切需要的可扩展性带来了的麻烦，紧耦合的架构造成牵一发而动全身的问题，新功能的增加，往往意味着巨大地改造成本。勉强加上一些功能后，整个软件系统简直是乱作一团，就像是一堆红豆绿豆，这样的软件系统，我们称之为集中式软件系统。</p>
<p>集中式的软件系统还对重构带来挑战，随着功能需求越来越频繁的提出，往往意味着需要更短的版本迭代周期。现有系统无法灵活扩展，意味着需要对整个软件系统进行重构，而等到软件散乱性膨胀到一定程度，重构几乎变成不可完成的任务，就算是系统初始负责人，也无法评估重构带来的风险与收益究竟谁更多？</p>
<h2 id="停不下来的运动员"><a href="#停不下来的运动员" class="headerlink" title="停不下来的运动员"></a>停不下来的运动员</h2><p>集中式的软件系统在濒危阶段，开发团队往往面临两难，团队任何人都知道急需重构，但因为没有决策权，最高决策领导也顾虑着市场利益，而不可能给出重构所需的资源(时间、人力、软硬件)。在愈发杂乱的系统上进行维护和新功能叠加，这让团队内的每个人都需要指数级的投入成本，往往还达不到市场需要的质量。</p>
<p>就像田径400米接力比赛中，只能跑第一棒的运动员，本应在交棒后停下来休息，自我调整。而由于接手下一棒的运动员迟迟不能到位，运动员只能咬牙坚持跑第二棒，但迈出的每一步都越来越累，没法再像刚开始保持加速度。更令人担忧的是，此时裁判还吹响了冲刺哨，要求运动员进行冲锋。这样，运动员只有倒下了。相应的，软件系统到此时，开发团队成员会加速流失，新招进来的人也很难理解整套系统的协作，经常顾此失彼，从而导致最终的系统失败。</p>
<p>这也就是为什么CTO必需对技术团队保持深入理解，同时还应有对产品、开发的最高决策权，以支持技术团队在适时进行系统级别的重构，让失去体力的软件系统下线休息，换上更适合的新软件系统上线，从而更好地满足公司的战略需求，这是非常有必要的。</p>
<h1 id="向敏捷开发过渡"><a href="#向敏捷开发过渡" class="headerlink" title="向敏捷开发过渡"></a>向敏捷开发过渡</h1><p><img src="/img/building-blocks.jpg" alt=""></p>
<p>在软件系统有机会从集中式软件模式，过渡到积木型的软件模式后。系统原有是100%的功能堆叠到一个系统，现在变成了多个积木，也就是软件子系统，每个积木只负责其中的部分功能，积木间的协作，从而拼装出完整的软件系统。</p>
<h2 id="快速交付"><a href="#快速交付" class="headerlink" title="快速交付"></a>快速交付</h2><p>集中式的软件往往灵活性低下，这体现在很多方面。</p>
<p>1.设计的灵活性，想要以好的设计替换掉不再适应设计方案，会遭遇无法评估改造成本。</p>
<p>2.构建的灵活性，软件功能过于集中，导致一个小的编译问题，都会影响整个软件的构建，就像走钢丝一样，必需每一步都完美无缺才能安全走到终点。</p>
<p>3.测试的灵活性，测试任务因为功能互相紧耦合而变得繁重，无法评估已经做好的功能是否会受到影响。</p>
<p>4.部署的灵活性，运维无法根据系统的流量特性来优化软硬件配置，如JVM调优，Load Balance等。</p>
<p>5.修复的灵活性，这一点往往在集中式软件中是一个优势，在线上出现问题，只需要简单的分析少量的运行日志即可定位问题，这在积木性系统中是一个软肋。</p>
<p>敏捷开发的主要优势就在于，合理的利用分治思想，将复杂的功能的系统模块化处理，拆分成由只有简单功能的子系统而拼凑出来的完整系统，每一个子系统可以交付到小团队来维护，甚至与有单独的运维人员来进行保障。</p>
<p><img src="/img/MircoService.png" alt=""></p>
<h2 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h2><p>这是一个巨大的转变，首当其冲的就是可维护性，只需要定义一套灵活的通信协议，子系统之间通过这套协议进行通讯，我们在对子系统内部的功能进行维护时，不必担忧其他子系统受到干扰。这也存在一个前提，能够封装在一个子系统的功能模块集合，必须是内聚型的，它们几乎很少对外层子系统产生耦合，或者通过统一的出口进行耦合关联。</p>
<h2 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h2><p>其次是软件的可扩展性，新功能的开发，只需要新加一个子系统，扩展通讯协议，就可以满足要求，这对团队内的任何一个人都是令人振奋的。</p>
<h2 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h2><p>积木型的软件构建，还给了我们保持专注的可能。现在我们可以为软件进行动静分离设计，以适应不同的最佳部署方式。可以按照系统流量特性，应用CQRS架构，提供更好的局部性能。进一步的还可以为强共用性的功能进行独立剥离出来，譬如单独的文件系统负责所有的文件服务，以在避免各个积木内部的重复造轮子，独立的服务还为以后的：可维护性、伸缩性带来了诸多方便。</p>
<h2 id="质量可控"><a href="#质量可控" class="headerlink" title="质量可控"></a>质量可控</h2><p>同时，软件的质量可以得到保证，测试部门可以明确的针对某个软件子系统进行测试，而不需要每次系统上线都进行整体测试，工作量的降低，在相等的时间内，有了更多的时间进行问题修复，这往往意味着质量的提高。</p>
<p>积木型的软件，是对积木之间通讯协议的高要求，实际上，我们需要引入一整套消息通讯中间件来解决这个问题，在SOA和EDA架构中，最为关键的就是MQ协议的设计了。</p>
<p>松耦合的模式还带来局部失败和最终一致性的问题，可能会给用户造成短时间迷惑，但不影响最终的数据状态统一，这在传统软件领域往往是不可接受的，但进入到互联网后，在系统层面往往需要进行权衡，是市场机遇重要？还是少部分的用户利益重要？这个问题需要每一个互联网人的思考，产品是不是要满足每一个人的要求呢？</p>
<h1 id="分布式系统的利与弊"><a href="#分布式系统的利与弊" class="headerlink" title="分布式系统的利与弊"></a>分布式系统的利与弊</h1><h2 id="软件的构成"><a href="#软件的构成" class="headerlink" title="软件的构成"></a>软件的构成</h2><p>概括的讲，软件普遍是由三部分组成：接入、逻辑、存储。其中接入是可能没有的，比如定时任务型软件，由操作系统时间来触发，不需要外界的主动调度。而逻辑和存储，很难有软件是不需要的。而比如典型的在线社交服务，常规的构成可以分为：聊天服务、长连接服务、推送服务、好友信息服务、文件服务、推荐服务、广告服务。这些按业务功能相关性而划分的服务，没有哪一个可以脱离接入、逻辑和存储的。这些服务从本质上来说大部分都是OLTP(<a href="http://blog.csdn.net/tianlesoftware/article/details/5794844" target="_blank" rel="external">Online Transaction Processing</a>)，就是将现实生活中的沟通交流需求转移到了互联网进行。</p>
<h2 id="SOA-VS-EDA"><a href="#SOA-VS-EDA" class="headerlink" title="SOA VS EDA"></a>SOA VS EDA</h2><h3 id="什么是SOA？"><a href="#什么是SOA？" class="headerlink" title="什么是SOA？"></a>什么是SOA？</h3><h4 id="SOA-VS-Mirco-Service"><a href="#SOA-VS-Mirco-Service" class="headerlink" title="SOA VS Mirco Service"></a>SOA VS Mirco Service</h4><h3 id="什么是EDA？"><a href="#什么是EDA？" class="headerlink" title="什么是EDA？"></a>什么是EDA？</h3><h3 id="分场景使用"><a href="#分场景使用" class="headerlink" title="分场景使用"></a>分场景使用</h3><h2 id="Design-for-failure"><a href="#Design-for-failure" class="headerlink" title="Design for failure"></a>Design for failure</h2><h3 id="Fast-fail-VS-Retry"><a href="#Fast-fail-VS-Retry" class="headerlink" title="Fast fail VS Retry"></a>Fast fail VS Retry</h3><h2 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h2><h2 id="应用中心和任务中心"><a href="#应用中心和任务中心" class="headerlink" title="应用中心和任务中心"></a>应用中心和任务中心</h2><p>单点服务向多点服务的转变</p>
<p>原因：<br>性能要求，多节点同时参与服务(按流量权重分发，负载均衡；按读写流量分发，读写分离)。<br>允许少部分节点失败，更可靠的运行。</p>
<p>数据存储跨机分片，同时每片在多机存在复制集。计算资源无状态，本身就可以动态管理。便捷的扩容缩容(伸缩性)。</p>
<p>因业务分拆，降低耦合粒度，降低系统扩展成本(可扩展性)，更高的可维护性。</p>
<p>带来的问题。<br>系统内部改造，支持多节点转变。</p>
<p>分布式事务，事务补偿。</p>
<p>分布式存储</p>
<p>分布式访问</p>
<p>容忍最终一致性。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><p><a href="https://blog.eood.cn/exception" target="_blank" rel="external">互联网系统可靠性基础：正确的异常处理</a></p>
</li>
<li><p><a href="http://www.sczyh30.com/posts/Microservice/circuit-breaker-pattern/" target="_blank" rel="external">微服务设计：熔断器模式</a></p>
</li>
<li><p><a href="http://ju.outofmemory.cn/entry/195996" target="_blank" rel="external">采用断路器设计模式来保护软件</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[软件重构经验总结]]></title>
      <url>http://amao12580.github.io/post/2016/05/Software-refactoring-experience-summary/</url>
      <content type="html"><![CDATA[<p>结合小旺项目的重构经历来分析</p>
<h1 id="小旺项目：5月份重构方案"><a href="#小旺项目：5月份重构方案" class="headerlink" title="小旺项目：5月份重构方案"></a>小旺项目：5月份重构方案</h1><h2 id="转店-找店-拆表"><a href="#转店-找店-拆表" class="headerlink" title="转店/找店 拆表"></a>转店/找店 拆表</h2><p>参考：转店需求：transfer_requirement，字段requirement_id。转化为Service表的id。</p>
<h2 id="地理位置相关业务重构"><a href="#地理位置相关业务重构" class="headerlink" title="地理位置相关业务重构"></a>地理位置相关业务重构</h2><p>读 &gt;&gt; 写</p>
<p>涉及到以下业务字段的，需要重构。</p>
<ul>
<li>经纬度</li>
<li>区域</li>
<li>详细地址</li>
</ul>
<p>Table：geographical_location</p>
<p>Fileds：</p>
<table>
<thead>
<tr>
<th>主键</th>
<th style="text-align:center">业务模块编号</th>
<th style="text-align:right">业务模块类型</th>
<th style="text-align:right">纬度</th>
<th style="text-align:right">经度</th>
<th style="text-align:right">区域编号</th>
<th style="text-align:right">详细地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td style="text-align:center">source_id</td>
<td style="text-align:right">type</td>
<td style="text-align:right">latitude</td>
<td style="text-align:right">longitude</td>
<td style="text-align:right">aeraId</td>
<td style="text-align:right">address</td>
</tr>
</tbody>
</table>
<p>source_id：关联的业务模块的主键</p>
<p>type：标识到业务模块的类型，枚举。</p>
<p>type字段主要是考虑这张表数据会膨胀的很快，以后可以以这个字段为依据做：mysql表分区、redis分库</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>冗余：不是所有的业务都有这些字段，特别是经纬度</p>
<h2 id="数据的记录与状态分离"><a href="#数据的记录与状态分离" class="headerlink" title="数据的记录与状态分离"></a>数据的记录与状态分离</h2><p>（业务与图片的关联性，也可以参照）</p>
<p>读 ~= 写</p>
<h3 id="数据状态"><a href="#数据状态" class="headerlink" title="数据状态"></a>数据状态</h3><p>Table：status</p>
<p>Fileds：</p>
<table>
<thead>
<tr>
<th>主键</th>
<th style="text-align:center">业务模块编号</th>
<th style="text-align:right">业务模块分类状态</th>
<th style="text-align:right">状态值(tinyint)</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td style="text-align:center">source_id</td>
<td style="text-align:right">category</td>
<td style="text-align:right">value</td>
</tr>
</tbody>
</table>
<p>source_id：关联的业务模块的主键</p>
<p>category：区分单条数据记录内的多个状态属性值。一条数据记录可能同时存在很多状态属性，例如：订单，订单状态、支付状态。</p>
<h3 id="数据状态依赖"><a href="#数据状态依赖" class="headerlink" title="数据状态依赖"></a>数据状态依赖</h3><p>Table：status_dependence</p>
<p>Fileds：</p>
<table>
<thead>
<tr>
<th>主键</th>
<th style="text-align:center">状态编号</th>
<th style="text-align:right">状态依赖编号</th>
<th style="text-align:right">状态值(tinyint)</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td style="text-align:center">s_id</td>
<td style="text-align:right">dependence_id</td>
<td style="text-align:right">value</td>
</tr>
</tbody>
</table>
<p>s_id与dependence_id都来源于status表的id字段</p>
<h3 id="问题边界"><a href="#问题边界" class="headerlink" title="问题边界"></a>问题边界</h3><h4 id="状态依赖的边界"><a href="#状态依赖的边界" class="headerlink" title="状态依赖的边界"></a>状态依赖的边界</h4><ul>
<li>数据状态的依赖，需要区分于：数据记录的存在性或不存在性。对数据记录的计算，需要在应用层解决。</li>
</ul>
<h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><h4 id="如何解决集中化的读写？"><a href="#如何解决集中化的读写？" class="headerlink" title="如何解决集中化的读写？"></a>如何解决集中化的读写？</h4><h4 id="数据记录删除的处理"><a href="#数据记录删除的处理" class="headerlink" title="数据记录删除的处理"></a>数据记录删除的处理</h4><p>数据在主表进行物理删除或逻辑删除(isDeleted=1)时，如何处理关联的状态？</p>
<h4 id="状态依赖树形结构过深"><a href="#状态依赖树形结构过深" class="headerlink" title="状态依赖树形结构过深"></a>状态依赖树形结构过深</h4><p>这会带来递归更新、删除的问题，需要在应用层避免</p>
<h2 id="Solr异步写入-低优先级"><a href="#Solr异步写入-低优先级" class="headerlink" title="Solr异步写入 [低优先级]"></a>Solr异步写入 [低优先级]</h2><p>提高吞吐量：去除JOOQ Listener模式，减少在Solr进行非关键性操作时，对主流程的阻塞。</p>
<p>可控性：独立出数据同步组件，负责在mysql数据有变化后，按规则将数据同步到Solr、Redis等</p>
<h2 id="支付与合同独立出来"><a href="#支付与合同独立出来" class="headerlink" title="支付与合同独立出来"></a>支付与合同独立出来</h2><h2 id="与Notify系统的通讯方式"><a href="#与Notify系统的通讯方式" class="headerlink" title="与Notify系统的通讯方式"></a>与Notify系统的通讯方式</h2><h3 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h3><p>引入MQ。<br>将上层应用与Notify交互时依赖于Socket，转变为MQ代理。</p>
<h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><h5 id="消息传递可靠"><a href="#消息传递可靠" class="headerlink" title="消息传递可靠"></a>消息传递可靠</h5><h5 id="消息的优先级"><a href="#消息的优先级" class="headerlink" title="消息的优先级"></a>消息的优先级</h5><h5 id="消息重试机制"><a href="#消息重试机制" class="headerlink" title="消息重试机制"></a>消息重试机制</h5><h5 id="Notify的伸缩性"><a href="#Notify的伸缩性" class="headerlink" title="Notify的伸缩性"></a>Notify的伸缩性</h5><p>Notify节点的上下线，MQ是感知到的。</p>
<h5 id="Notify的吞吐量"><a href="#Notify的吞吐量" class="headerlink" title="Notify的吞吐量"></a>Notify的吞吐量</h5><p>P端的写入是长连接机制，省去大多数Socket链接创建、断开的开销。</p>
<p>Notify与APP通讯时，依靠JPUSH提供的HTTP接口，该接口存在调用频率限制</p>
<h5 id="MQ的可控性"><a href="#MQ的可控性" class="headerlink" title="MQ的可控性"></a>MQ的可控性</h5><p>支持自我监控</p>
<h5 id="MQ的可靠性"><a href="#MQ的可靠性" class="headerlink" title="MQ的可靠性"></a>MQ的可靠性</h5><h5 id="MQ的伸缩性"><a href="#MQ的伸缩性" class="headerlink" title="MQ的伸缩性"></a>MQ的伸缩性</h5><h5 id="MQ的HA方案"><a href="#MQ的HA方案" class="headerlink" title="MQ的HA方案"></a>MQ的HA方案</h5><h1 id="小旺项目重构方案"><a href="#小旺项目重构方案" class="headerlink" title="小旺项目重构方案"></a>小旺项目重构方案</h1><h2 id="串行化的幂等性操作"><a href="#串行化的幂等性操作" class="headerlink" title="串行化的幂等性操作"></a>串行化的幂等性操作</h2><p>钱包业务：WalletModelImpl.java getWalletSummary(int uid)</p>
<p>实现“callable”接口，提高性能。</p>
<h2 id="可以合并的请求"><a href="#可以合并的请求" class="headerlink" title="可以合并的请求"></a>可以合并的请求</h2><p>典型 1：for循环访问redis获取多个图片信息</p>
<p>改为：批量获取，访问一次redis</p>
<p>典型 2: 转店插件保存图片信息到mysql，循环访问mysql，插入数据</p>
<p>改为：batchInsert接口</p>
<h2 id="不必要的字段查询"><a href="#不必要的字段查询" class="headerlink" title="不必要的字段查询"></a>不必要的字段查询</h2><p>典型：ScopedContext.java getUserRecord()</p>
<p>基础接口，查询user表中，单条记录的所有字段</p>
<p>但是后续使用中，绝大多数只使用了其中的1个字段：id</p>
<h2 id="读-gt-gt-写"><a href="#读-gt-gt-写" class="headerlink" title="读 &gt;&gt; 写"></a>读 &gt;&gt; 写</h2><p>钱包业务：WalletModelImpl.java getWalletSummary(int uid)</p>
<p>请将读操作的结果保存下来，或者在写入时，后台线程计算出来并存储</p>
<h2 id="多表join"><a href="#多表join" class="headerlink" title="多表join"></a>多表join</h2><p>简单业务需要多表join</p>
<p>1.适度冗余，修改业务逻辑，重建数据库模型<br>2.利用好缓存：数据库级别的查询缓存、redis缓存行记录</p>
<h2 id="接口业务过于复杂"><a href="#接口业务过于复杂" class="headerlink" title="接口业务过于复杂"></a>接口业务过于复杂</h2><h2 id="去除jooq-listener同步调用"><a href="#去除jooq-listener同步调用" class="headerlink" title="去除jooq listener同步调用"></a>去除jooq listener同步调用</h2><p>异步方式重构<br>优点：<br>1.主流程可以尽快结束，提高TPS，降低RT<br>2.出错可以有重试机制</p>
<p>缺点：<br>1.业务需要容忍最终一致性<br>2.新系统的加入，加大了研发成本、运维成本、监控成本</p>
<p>1.调用notif</p>
<p>ActiveMQ、Redis</p>
<p>2.调用solr</p>
<p>另做系统，实时解析mysql binlog。参考阿里方案：otter</p>
<h2 id="系统监控"><a href="#系统监控" class="headerlink" title="系统监控"></a>系统监控</h2><p>1.日志流分析<br>2.系统业务指标<br>3.报警系统</p>
<h2 id="外键的大量使用"><a href="#外键的大量使用" class="headerlink" title="外键的大量使用"></a>外键的大量使用</h2><p>对没有强一致性要求的业务，去除外键。</p>
<h2 id="HA、Scalable-out"><a href="#HA、Scalable-out" class="headerlink" title="HA、Scalable out"></a>HA、Scalable out</h2><h2 id="系统容错性"><a href="#系统容错性" class="headerlink" title="系统容错性"></a>系统容错性</h2><h1 id="先了解"><a href="#先了解" class="headerlink" title="先了解"></a>先了解</h1><h2 id="了解中发现问题症结"><a href="#了解中发现问题症结" class="headerlink" title="了解中发现问题症结"></a>了解中发现问题症结</h2><h2 id="了解中思考解决方案"><a href="#了解中思考解决方案" class="headerlink" title="了解中思考解决方案"></a>了解中思考解决方案</h2><h2 id="选取合适的解决方案"><a href="#选取合适的解决方案" class="headerlink" title="选取合适的解决方案"></a>选取合适的解决方案</h2><h2 id="保留可扩展性"><a href="#保留可扩展性" class="headerlink" title="保留可扩展性"></a>保留可扩展性</h2><h2 id="保留可维护性"><a href="#保留可维护性" class="headerlink" title="保留可维护性"></a>保留可维护性</h2><h1 id="再动手"><a href="#再动手" class="headerlink" title="再动手"></a>再动手</h1><h2 id="重构方案的评审"><a href="#重构方案的评审" class="headerlink" title="重构方案的评审"></a>重构方案的评审</h2><h2 id="理清方案的优势与不足"><a href="#理清方案的优势与不足" class="headerlink" title="理清方案的优势与不足"></a>理清方案的优势与不足</h2><h2 id="资源预先到位"><a href="#资源预先到位" class="headerlink" title="资源预先到位"></a>资源预先到位</h2><p>包括重构的时间争取，参与人员配比，对其他软硬件资源、中间件的预研。</p>
<h2 id="重构前后的效果量化"><a href="#重构前后的效果量化" class="headerlink" title="重构前后的效果量化"></a>重构前后的效果量化</h2><h2 id="充分的测试"><a href="#充分的测试" class="headerlink" title="充分的测试"></a>充分的测试</h2><p>基础方面的重构，需要充分的测试</p>
<h1 id="方案上线"><a href="#方案上线" class="headerlink" title="方案上线"></a>方案上线</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何更好地管理技术团队？]]></title>
      <url>http://amao12580.github.io/post/2016/05/How-to-better-manage-the-technical-team/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="PM与TL的区别"><a href="#PM与TL的区别" class="headerlink" title="PM与TL的区别"></a>PM与TL的区别</h2><p>其实一个Team Leader的职责与Project Manager相像，但Team Leader更着重于技术开发方面，通常一个大型项目都会有一两个开发团队由Team Leader带领，负责开发核心部分，而其它部分分派给不同开发小组或者分派给外包公司。在网上常看到几句话，贴切地形容了PM与TL的区别：“技术人员乐于被领导；但他们不喜欢被管理，不喜欢像牛一样被驱赶或指挥。管理者强迫人们服从他们的命令，而领导者则会带领他们一起工作。管理是客观的，没有个人感情因素，它假定被管理者没有思想和感受，被告知要做什么和该如何做。领导是引领、引导，它激励人们达成目标。领导力是带有强烈个人感情色彩的，它不是你能命令的，也不是你能测量评估和测试的。”</p>
<p>TL对于团队内的member，必须在技术上能够进行胜任领导，他就像黑夜里的灯塔，引导和修正member前进的航向。因此TL也必需保持照亮团队，保持对member的充分了解，并在技术领域投入持续的学习热情，向团队成员传道，补齐短板，让大家的核心战斗力一起提高。</p>
<p>无论是PM与TL，对业务与技术都要有深入的了解，只是PM更侧重于业务的管理，盈利的多少，风险的大小等等，而TL则侧重于项目的成本，开发的难度，软件的架构等技术方面的问题。在某些人眼中，技术与管理就像鱼与熊掌，不可兼得，但依在下看来，两者却是秤不离砣，密不可分。只要及时提升自己对技术与管理的认识，不断地向深一层发展，要从程序员提升到技术管理人员只是时间的问题。</p>
<p>团队规模有限时，分工很可能没这么清晰，很多时候TL和PM是同一个人在兼任，角色的模糊，可能带来职责和权利的混乱，而且个人精力也有限，仅适合任务量较小时实行。</p>
<h2 id="技术管理-VS-团队管理"><a href="#技术管理-VS-团队管理" class="headerlink" title="技术管理 VS 团队管理"></a>技术管理 VS 团队管理</h2><p>技术团队与其它的团队的区别，可能在于技术人员的管理难度。一方面因为领域之间的差异性，譬如前端技术链与后端技术链的深与广，导致熟悉前端的同时，很难对后端保持足够的了解。另一方面在领域内的差异性，典型的是多年争论C语言与Java语言的优劣，忽视了技术都有局限性，脱离了使用需求的比较没有意义。如果技术人员比较狭隘，往往无法理解对方的差异性，从而造成不必要的争议。这一点在年轻的团队中，是很突出的问题，大家普遍经验欠缺，对上下游的技术无法做到足够认知，同时因为年轻而无法接受建议，行成内耗。</p>
<h3 id="凤栖梧桐"><a href="#凤栖梧桐" class="headerlink" title="凤栖梧桐"></a>凤栖梧桐</h3><p>技术团队管理需要划分为正切的两个方向：技术管理和团队管理。管理的目标是：提高协作时的执行力，执行效率，并约束进行规范执行。技术管理的目标是：保持并引导团队成员之间的技术协作一致性，如前端技术团队和后端技术团队。由技术负责人制定日常规范，推动规范的落地，以公有的强制约定来避免不必要的内耗。规范的含义是比较广泛的：设计规范、编码规范、安全规范、接口规范、部署规范。团队管理解决的问题是：如何持久降低团队之间或团队成员之间的合作成本？如产品团队和技术团队。除了leader的影响，往往需要合理的行政制度来作为基础。好的行政制度是公司最重要的部分，它就像生态系统的土壤，有了好的土壤，才可能生长出好的团队。在互联网时代，站在巨人肩上而诞生的伟大产品屈指可数了，很难有产品在一开始就100%贴合市场，更多的需要快速试错，进行小步快走的方式进行迭代，而在持续打磨的过程中，产品也就自我完善，可以产生商业价值了。我们很难想象在二流的团队中如何诞生一流的产品呢？管理者也需要深思，在渴求的一流产品的同时，是否给予了一流产品诞生所需要的环境呢？</p>
<h3 id="能力与影响力同样重要"><a href="#能力与影响力同样重要" class="headerlink" title="能力与影响力同样重要"></a>能力与影响力同样重要</h3><p>从纯粹的技术工作者转向管理者难点在于是否具备了管理能力？对与团队内的成员，是否一致的认为在你的带领下可以得到更好的发展？可以是经济利益上的或职业发展上的。对于上层决策领导是否认为你可担此大任？而如果太过于沉迷技术，缺少与决策层的互动交流，导致上层无法相信你已经具备管理能力，或确实缺少部分能力(可能是软实力，语言沟通能力)，这在国外很常见，管理层大多是美国人或印度人，中国人由于文化上的本位差异，很难上升到管理层。</p>
<h1 id="技术管理"><a href="#技术管理" class="headerlink" title="技术管理"></a>技术管理</h1><h2 id="设计规范"><a href="#设计规范" class="headerlink" title="设计规范"></a>设计规范</h2><p>如何在低复杂度、可维护性、可理解性之间进行平衡？需要在需求分析和系统设计时制定一些规范来约束，帮组我们低维护成本的延长软件生命周期。没有人可以保证业务在长远未来的走向，因此软件设计也只需要在可预见的范围内进行权衡考虑，超出范围的要交给升级版的设计来解决，这可能与传统思维不同。典型的，以系统容量进行设计，比如在电商系统中，按照统计数据分析预测在未来5年内，系统用户数会逐步增加到五千万，日订单量约在五百万左右。那我们在做系统设计时，就可以参照这些指标来做，只考虑5年内系统如何满足要求即可，但是请保留5年后设计进行升级的可能性，毕竟推倒重来的代价在系统愈发庞大后会让人无法接受。</p>
<h3 id="DRY"><a href="#DRY" class="headerlink" title="DRY"></a>DRY</h3><p>DRY(Don’t Repeat Yourself)的核心是面向可维护性，将性质重复的逻辑进行封装，抽象为一组对外调用的功能接口。</p>
<p>DRY 是一个最简单的法则，也是最容易被理解的。但它也可能是最难被应用的（因为要做到这样，我们需要在泛型设计上做相当的努力，这并不是一件容易的事）。它意味着，当我们在两个或多个地方的时候发现一些相似的代码的时候，我们需要把他们的共性抽象出来形一个唯一的新方法，并且改变现有的地方的代码让他们以一些合适的参数调用这个新的方法。</p>
<h4 id="vs-WET"><a href="#vs-WET" class="headerlink" title="vs WET"></a>vs WET</h4><p>违反DRY原则的解决方案通常被称为WET，指代“write everything twice”。</p>
<h3 id="KISS"><a href="#KISS" class="headerlink" title="KISS"></a>KISS</h3><p>KISS(Keep It Simple, Stupid)原则，是指在设计当中应当注重简约的原则。不只是软件系统设计，甚至在用户体验，需求分析时也可以应用。产品设计中，堆叠功能是容易的，考虑如何做减法才能体现产品经理的水准。</p>
<p>KISS原则在设计上可能最被推崇的，在家装设计，界面设计 ，操作设计上，复杂的东西越来越被众人所BS了，而简单的东西越来越被人所认可，比如这些UI的设计和我们中国网页（尤其是新浪的网页）者是负面的例子。“宜家”（IKEA）简约、效率的家居设计、生产思路；“微软”（Microsoft）“所见即所得”的理念；“谷歌”（Google)简约、直接的商业风格，无一例外的遵循了“kiss”原则，也正是“kiss”原则，成就了这些看似神奇的商业经典。而苹果公司的iPhone/iPad将这个原则实践到了极至。</p>
<p>把一个事情搞复杂是一件简单的事，但要把一个复杂的事变简单，这是一件复杂的事。</p>
<h3 id="SOLID"><a href="#SOLID" class="headerlink" title="SOLID"></a>SOLID</h3><p>在程序设计领域， SOLID（单一功能、开闭原则、里氏替换、接口隔离以及依赖反转）是由罗伯特·C·马丁在21世纪早期引入的记忆术首字母缩略字，指代了面向对象编程和面向对象设计的五个基本原则。当这些原则被一起应用时，它们使得一个程序员开发一个容易进行软件维护和扩展的系统变得更加可能。SOLID所包含的原则是通过引发编程者进行软件源代码的代码重构进行软件的代码异味清扫，从而使得软件清晰可读以及可扩展时可以应用的指南。SOLID被典型的应用在测试驱动开发上，并且是敏捷开发以及自适应软件开发的基本原则的重要组成部分。</p>
<h3 id="YAGNI"><a href="#YAGNI" class="headerlink" title="YAGNI"></a>YAGNI</h3><p>YAGNI(You Ain’t Gonna Need It)：适可而止，只考虑和设计必须的功能，避免过度设计。只实现目前需要的功能，在以后您需要更多功能时，可以再进行添加。（You Ain’t Gonna Need It，YAGNI 原则）</p>
<ul>
<li>如无必要，勿增复杂性。</li>
<li>软件开发先是一场沟通博弈。</li>
</ul>
<p>WebSphere的设计者就表示过他过度设计了这个产品。我们的程序员或是架构师在设计系统的时候，会考虑很多扩展性的东西，导致在架构与设计方面使用了大量折衷，最后导致项目失败。这是个令人感到讽刺的教训，因为本来希望尽可能延长项目的生命周期，结果反而缩短了生命周期。</p>
<h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><p>我们在编写任何程序之前，第一件事要做的就是命名。</p>
<p>形如：需求文档名称，概要设计文档名称，接口文档名称，软件系统名称，功能模块名称，类名称，方法名称，参数名称…</p>
<p>在认识陌生人时，第一次接触时互递名片，熟络后的沟通交流，都以名字来起始了。名字是否好记，影响会有多大呢？前公司有一同事丁某某，父母取名讨巧用了生僻字，导致每次登机之前，需要到机场值班经理盖章，白白浪费很多时间。而恰好他是销售经理，每周有2~3次的商务飞行。你在想他为什么不去换名字？想想30来岁的人生积累，需要多少成本改名字吧？想象不出来，问问自己更换使用5年以上的手机号码，成本是多大吧？</p>
<h4 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a>重要性</h4><p>命名规范竟如此重要，但大多数开发者的命名习惯往往没有你想象的那么好。除了上面提到的生僻字问题，还有很多人喜欢用拼音去命名类、函数，甚至是变量。我不知道这是英文词汇量的问题还是个人风格，但我个人非常不提倡这样做。如何优雅地为程序中的变量和函数命名？很简单，把你的变量名拎出来，问别人，你看到这个名字会想到什么，他说的和你想的一致，就用，否则就改。改到基本上不懂程序的人都能大概看懂你写的是什么，就优雅了。</p>
<p>为什么重要？提高可维护性。不加约束的开发者写出来的代码，就像是大家临时拼凑出来的一桌菜，你上粤菜，他上川菜。虽然都好吃，但没有人全想吃，造成的局面是，爱吃粤菜的人总是夹粤菜，爱吃川菜的就不去吃粤菜了。在代码上来讲，各自的代码风格迥异，导致理解成本加大，你负责的代码需要修改时，就只有你能改了，团队其他人很难帮得上忙，如果修改工作量比较大，这岂不是把自己逼死吗？如果结合好的代码注释和设计文档，会不会理解成本下降呢？但就算是文档写得再详细，我们也要去读代码，所以文档主要是体现思路和反映需求和设计。在程序上，我们的命令应当和文档中的术语保持一致，而程序中的命名也应该是用和文档相同的风格，这样，我们可以少很多理解上的成本。好的代码在命名上是完全可读的，代码即文档，做到这点，可以极大的提高团队内协作效率。</p>
<p>比较常见的有下面三种命名方式：</p>
<ul>
<li>驼峰(Camel)命名法:又称小驼峰命名法，除首单词外，其余所有单词的第一个字母大写。GetOrderList</li>
<li>帕斯卡(Pascal)命名法:又称大驼峰命名法，所有单词的第一个字母大写。gtOrderList</li>
<li>蛇形(Snake)命名法:单词与单词间用下划线做间隔，看起来就像是上下扭动的蛇。get_order_list</li>
</ul>
<p>一般在命名函数和一般变量时，多使用小驼峰，命名常量和枚举变量时，使用大写的蛇形；命名类名多使用大驼峰，不建议使用蛇形命名。如在命名数据库表名时，最好使用小驼峰以一致性的对应到pojo。</p>
<p>好的命名，还给代码审计、代码排错工作降低成本，在做code review时，如果缺失详细注释(在敏捷开发中很常见)，规范化的命名使大家的理解成本降低，从而让审计工作更容易完成。我们回过头来想，很多公司很难推动代码审计的落地，到底是什么原因在阻碍呢？还有在线上代码深层排错时，我们可以采用SystemTap火焰图技术来做，由于函数的名称通常会包含语义上的信息，在输出的图表中就可以轻易的按照函数名来推断问题所在，这是非常了不起的。</p>
<p><img src="/img/flameGraph.png" alt=""></p>
<h4 id="如何做？"><a href="#如何做？" class="headerlink" title="如何做？"></a>如何做？</h4><p>具体的施行，可以参考：<a href="http://blog.csdn.net/yzmyyff/article/details/45243261" target="_blank" rel="external">Google Java Style</a></p>
<h4 id="约定优于配置"><a href="#约定优于配置" class="headerlink" title="约定优于配置"></a>约定优于配置</h4><p>约定优于配置的目标是，团队内各成员参照约定的策略来进行开发，减少无意义的说明项，从而降低沟通成本。为降低持续学习成本和保证团队新成员快速融入，约定项不宜过多，且应该放到团队成员随意备查的地方(media wiki?)。</p>
<h5 id="过渡配置"><a href="#过渡配置" class="headerlink" title="过渡配置"></a>过渡配置</h5><p>Hibernate的早期版本中，将类及其属性映射到数据库上需要是在XML文件中的描述，其中大部分信息都应能够按照约定得到，如将类映射到同名的数据库表，将属性分别映射到表上的同名字段。这样的做法不仅繁琐易出错，而且可维护性低，后续的版本抛弃了XML配置文件，而是使用这些恰当的约定，对于不符合这些约定的情形，可以使用Java注解来说明。</p>
<p>Spring由于其繁琐的配置，一度被人成为“配置地狱”，各种XML、Annotation配置，让人眼花缭乱，而且如果出错了也很难找出原因。Spring Boot项目就是为了解决配置繁琐的问题，最大化的实现convention over configuration(约定大于配置)。熟悉Ruby On Rails（ROR框架的程序员都知道，借助于ROR的脚手架工具只需简单的几步即可建立起一个Web应用程序。而Spring Boot就相当于Java平台上的ROR</p>
<p>构建管理工具链中，有很多体现了这个原则的正确性，如从Ant到Maven的过渡，Grunt到Gulp的过渡。其他的在中间件产品中，redis和mongodb的配置文件也有体现，只需要很少的个性化配置就可以正常运行。</p>
<h5 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h5><p>约定优于配置（convention over configuration），也称作按约定编程，是一种软件设计范式，旨在减少软件开发人员需做决定的数量，获得简单的好处，而又不失灵活性。<br>本质是说，开发人员仅需规定应用中不符约定的部分。例如，如果模型中有个名为Sale的类，那么数据库中对应的表就会默认命名为sales。只有在偏离这一约定时，例如将该表命名为”products_sold”，才需写有关这个名字的配置。</p>
<h3 id="合理的设计"><a href="#合理的设计" class="headerlink" title="合理的设计"></a>合理的设计</h3><p>合理的设计，主要是面向软件可维护性、可扩展性提出，如果能兼顾性能和安全就更好了。设计是有成本的，如果软件的生命周期在预期内就不会太长，例如很多一次性的产品：企业内网IM系统，售卖后，几乎不再需要任何的维护。此时设计上就可以从简，没有必要为不会来临的维护去打基础，因此设计也是需要有一定的前瞻性。</p>
<h4 id="适时分层"><a href="#适时分层" class="headerlink" title="适时分层"></a>适时分层</h4><p>分层设计的好处主要是面向软件可维护性。合理的分层设计，往往将逻辑拆分为内聚的多层次，层之间的边界和职责是清晰的。例如典型的三层设计，展示层、逻辑层、数据层。带来的好处是显而易见的，对于数据层来说，只需要对逻辑层提供访问数据的接口，具体如何实现访问数据，是访问文件还是RDBMS、NoSQL，与逻辑层无关。相应的重构起来也是局部的，如更换搜索引擎：Solr –&gt; Elastic Search，只需要重构数据层的具体实现即可，上层任何代码不需要改动，这对于高复杂度的软件无疑是友好的。</p>
<p><img src="/img/splitLayer.png" alt=""></p>
<p>那分层对与软件可扩展性的影响呢？带来了一定程度的坏影响，新加的业务逻辑功能，可能涉及到很多层的改造，而在Maven mutilModule模式下，很可能层之间的代码是隔离的。这意味着，新加功能的代码量会有增多，相应的整体构建需要分布进行后融合。反过来想，这不失为一个好的过滤器，帮助我们分辨开发者的技能是否满足团队要求？</p>
<p>一般来说分层设计适用于大型软件的持续构建，它依靠团队内的其它高效率手段来弥补稍低的可扩展性。它对安全和性能，并没有什么影响。</p>
<h4 id="再谈过度设计"><a href="#再谈过度设计" class="headerlink" title="再谈过度设计"></a>再谈过度设计</h4><p>简单来说，过度设计就是进行了过多的面向未来的设计，进行了不必要的抽象封装，为系统增加了不必要的复杂度。<br>举个例子，你要做一个功能模块，但你考虑到到这个系统里还有几个未完成的模块和你要做的东西类似，所以你决定为此额外做一些抽象和封装，以便将来复用。然而到后来你开发那些相似的模块时你才发现，可能是由于抽象不足或抽象错误，你不得不重新修改之前的封装才能完成复用，导致最终成本实际上还不如不做；或者你发现复用的部分所降低的成本实际上还不如包装花费的成本。 这些都是最常见的过度设计的例子。<br>程序员在掌握了一些基本的设计能力之后，最常见也是最难克服的设计问题往往就是过度设计。上面的错误我相信大多数人都一而再，再而三的的犯过。</p>
<p>与过度设计相对的就是设计不足。<br>虽然是两个相对的概念，但设计不足和过度设计绝大多数时候都是一起出现的。都是最常见的设计问题。设计不足不仅常见于新手，老手也常犯。甚至我还见过有一类老程序员在经历过多次过度设计的打击之后，转向另一个极端，否定抽象封装的作用，走上“反设计”的道路。</p>
<p>过度设计和设计不足的平衡问题没有很好的解决办法，只有依靠经验的积累和不断的总结思考。如何把握这个度是最能考验程序员的经验和价值的问题之一。</p>
<p>我所尝试过的软件方法中，有一种方法的思维方式对于解决这个问题帮助最大，就是TDD（测试驱动开发），这里简单说下为什么TDD能解决这个问题：<br>TDD的一个核心思想是小步增量，不断重构。具体说来就是TDD有两个状态（常见的说法是两顶帽子）：<br>状态A：用test case描绘需求，并使用最简单的方式满足这个test case。注意要用最简单的方式满足这个需求，不能为任何test case之外的需求做任何设计。 test case通过之后进入状态B；<br>状态B：重构代码，让现有的代码在尽量保持简单性的同时足够优雅清晰。注意此时你只能对现有的实现代码进行重构，不能增加任何新的功能和test case。<br>整个TDD的过程就是在这两个状态间不断转换的过程。在状态A增加功能，在状态B优化设计。</p>
<p>TDD的这种思维方式走的稍微极端一点。它直接排斥任何对未来的设计，转而以优雅简洁的设计和test case来为未来需求的重构降低成本。 可以说严格遵循TDD做出来的设计必然在过度设计和设计不足方面都不会有太大的问题。</p>
<p>我严重推荐TDD。不管你最终会不会接受TDD这种开发方式，它独特的思维方式都必然会给你的设计观念带来很大影响。</p>
<p>过度设计的典型案例：<a href="http://coolshell.cn/articles/3005.html" target="_blank" rel="external">代码重构的一个示例</a></p>
<h4 id="模块化设计"><a href="#模块化设计" class="headerlink" title="模块化设计"></a>模块化设计</h4><p>模块化设计在重构时，可以将影响降到最低。达到低风险、低成本。它符合CCP原则（Common Closure Principle（CCP）– 共同封闭原则）。它对系统快速构建是一个阻碍，要求将可预见的性质相同代码，内聚到一个模块中。</p>
<p>例如读取和更新配置文件的功能，在软件中很多逻辑中需要调用。例如：读取定时任务的触发条件、读取接口调用频次限制。无论是从XML或JSON甚至在DB中读取，其实逻辑差别甚少，无非是：链接配置源、读取所需参数、解析正确性，返回并应用。如果重复这样的代码，将给我们带来麻烦，多类配置项产生依赖关系，读取和更新的交织将变得非常复杂。采用模块化设计，也是DRY原则的体现，对同性质的代码进行内聚为一个模块，对外部调用提供多个组合接口即可。</p>
<h3 id="前轻后重"><a href="#前轻后重" class="headerlink" title="前轻后重"></a>前轻后重</h3><p>系统之间的调用链，前置系统轻逻辑。</p>
<h4 id="上轻下重，核心逻辑内敛"><a href="#上轻下重，核心逻辑内敛" class="headerlink" title="上轻下重，核心逻辑内敛"></a>上轻下重，核心逻辑内敛</h4><p>模块之间的调用链，上层模块轻逻辑</p>
<h3 id="基础优先"><a href="#基础优先" class="headerlink" title="基础优先"></a>基础优先</h3><p>在构建软件时，保持基础组件优先稳定下来，定义好对外接口，并保留可扩展性。<br>例如安全性设计，在后期加比在前期加的成本高很多。</p>
<h3 id="最小冗余"><a href="#最小冗余" class="headerlink" title="最小冗余"></a>最小冗余</h3><h4 id="代码保持最少行数"><a href="#代码保持最少行数" class="headerlink" title="代码保持最少行数"></a>代码保持最少行数</h4><p>1.少一行代码，就少了一个潜在的bug</p>
<p>2.行数少了，往往意味着重用性高了</p>
<p>3.不要过度牺牲可读性</p>
<h3 id="保持简单"><a href="#保持简单" class="headerlink" title="保持简单"></a>保持简单</h3><h4 id="简单意味着快速"><a href="#简单意味着快速" class="headerlink" title="简单意味着快速"></a>简单意味着快速</h4><h4 id="简单意味着灵活"><a href="#简单意味着灵活" class="headerlink" title="简单意味着灵活"></a>简单意味着灵活</h4><h4 id="简单意味着易扩展"><a href="#简单意味着易扩展" class="headerlink" title="简单意味着易扩展"></a>简单意味着易扩展</h4><h4 id="简单意味着易重构"><a href="#简单意味着易重构" class="headerlink" title="简单意味着易重构"></a>简单意味着易重构</h4><h3 id="Fast-fail"><a href="#Fast-fail" class="headerlink" title="Fast fail"></a>Fast fail</h3><h3 id="代码即文档"><a href="#代码即文档" class="headerlink" title="代码即文档"></a>代码即文档</h3><h4 id="合理的注释"><a href="#合理的注释" class="headerlink" title="合理的注释"></a>合理的注释</h4><h3 id="关键业务设计宣讲"><a href="#关键业务设计宣讲" class="headerlink" title="关键业务设计宣讲"></a>关键业务设计宣讲</h3><h4 id="保持一致的看法"><a href="#保持一致的看法" class="headerlink" title="保持一致的看法"></a>保持一致的看法</h4><h3 id="小步快走"><a href="#小步快走" class="headerlink" title="小步快走"></a>小步快走</h3><h4 id="意味着版本迭代快速"><a href="#意味着版本迭代快速" class="headerlink" title="意味着版本迭代快速"></a>意味着版本迭代快速</h4><h4 id="意味着版本迭代稳定"><a href="#意味着版本迭代稳定" class="headerlink" title="意味着版本迭代稳定"></a>意味着版本迭代稳定</h4><h4 id="意味着部署回滚成本低"><a href="#意味着部署回滚成本低" class="headerlink" title="意味着部署回滚成本低"></a>意味着部署回滚成本低</h4><h2 id="重构与优化"><a href="#重构与优化" class="headerlink" title="重构与优化"></a>重构与优化</h2><h3 id="紧急优先"><a href="#紧急优先" class="headerlink" title="紧急优先"></a>紧急优先</h3><p>优先对紧急需要改进的部分进行重构</p>
<h3 id="计划性的重构"><a href="#计划性的重构" class="headerlink" title="计划性的重构"></a>计划性的重构</h3><p>在敏捷开发时，往往时间不够，有些模块只能以非优雅的方式构建。但是需要在这些模块加上TODO以免重构时遗忘。</p>
<h3 id="时机"><a href="#时机" class="headerlink" title="时机"></a>时机</h3><p>团队一致认为模块维护成本高昂时，果断重构。</p>
<h3 id="基于成本的优化"><a href="#基于成本的优化" class="headerlink" title="基于成本的优化"></a>基于成本的优化</h3><p>CBO(Cost base optimize)</p>
<p>引用数据库查询分析计划来说明：<a href="http://blog.jobbole.com/100349" target="_blank" rel="external">如果有人问你数据库的原理，叫他看这篇文章#查询优化器</a></p>
<h3 id="数据支撑"><a href="#数据支撑" class="headerlink" title="数据支撑"></a>数据支撑</h3><p>给出重构前后的成本与收益报告</p>
<h3 id="持续性"><a href="#持续性" class="headerlink" title="持续性"></a>持续性</h3><p>在时间不够或时机不成熟时，分阶段的进行</p>
<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><h3 id="开源优先"><a href="#开源优先" class="headerlink" title="开源优先"></a>开源优先</h3><p>Facebook在推广MyRock持有非常开放的态度，所有的源码开发都是在外部的github上进行的，社区的大量使用可以带来软件的进一步成熟，进而反哺其本身的业务。</p>
<p>开源意味着安全，源码的公开维护，使得热门源码的安全漏洞被很大几率发现，进而修复。</p>
<p>开源不意味着任何人都可以修改代码，事实上这将带来隐藏bug问题。在github上，你可以对public权限的代码进行PR（pull request），而是否采纳你的PR，由维护团队来决定。</p>
<h3 id="稳定优先"><a href="#稳定优先" class="headerlink" title="稳定优先"></a>稳定优先</h3><h3 id="掌控度高优先"><a href="#掌控度高优先" class="headerlink" title="掌控度高优先"></a>掌控度高优先</h3><h3 id="保留备选项"><a href="#保留备选项" class="headerlink" title="保留备选项"></a>保留备选项</h3><h3 id="只有合适的技术，没有最好的技术。"><a href="#只有合适的技术，没有最好的技术。" class="headerlink" title="只有合适的技术，没有最好的技术。"></a>只有合适的技术，没有最好的技术。</h3><h3 id="避免一招鲜吃遍天"><a href="#避免一招鲜吃遍天" class="headerlink" title="避免一招鲜吃遍天"></a>避免一招鲜吃遍天</h3><p>手里有锤子，看到什么都觉得像钉子</p>
<h3 id="技术升级"><a href="#技术升级" class="headerlink" title="技术升级"></a>技术升级</h3><p>系统容量与性能指标的要求，在业务发展的各个阶段是不固定的，技术需要保留一定前瞻性，不做被动跟随。</p>
<h2 id="接口规范"><a href="#接口规范" class="headerlink" title="接口规范"></a>接口规范</h2><h3 id="内部接口"><a href="#内部接口" class="headerlink" title="内部接口"></a>内部接口</h3><h4 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h4><h4 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h4><p>访问权限的验证<br>访问频率</p>
<h4 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h4><p>拒绝恶意访问</p>
<p>暴力破解</p>
<h4 id="审查与监控"><a href="#审查与监控" class="headerlink" title="审查与监控"></a>审查与监控</h4><h4 id="灰度发布"><a href="#灰度发布" class="headerlink" title="灰度发布"></a>灰度发布</h4><h4 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h4><h4 id="原子化"><a href="#原子化" class="headerlink" title="原子化"></a>原子化</h4><h4 id="CQRS"><a href="#CQRS" class="headerlink" title="CQRS"></a>CQRS</h4><p>命令查询职责分离模式，读不强依赖写。</p>
<h3 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h3><h4 id="远程控制权"><a href="#远程控制权" class="headerlink" title="远程控制权"></a>远程控制权</h4><h4 id="展示为主"><a href="#展示为主" class="headerlink" title="展示为主"></a>展示为主</h4><h4 id="少的逻辑"><a href="#少的逻辑" class="headerlink" title="少的逻辑"></a>少的逻辑</h4><h4 id="适度安全"><a href="#适度安全" class="headerlink" title="适度安全"></a>适度安全</h4><h3 id="外部接口"><a href="#外部接口" class="headerlink" title="外部接口"></a>外部接口</h3><h4 id="合理调用"><a href="#合理调用" class="headerlink" title="合理调用"></a>合理调用</h4><p>同步VS异步<br>批量VS单个  批量：局部失败</p>
<h4 id="保持怀疑"><a href="#保持怀疑" class="headerlink" title="保持怀疑"></a>保持怀疑</h4><h5 id="兜底方案"><a href="#兜底方案" class="headerlink" title="兜底方案"></a>兜底方案</h5><p>如果有可能，在外部接口调用失败时，读取本地上一次调用成功的缓存。例如：加载和更新广告，CDN访问失败进行回源。</p>
<p>进行兜底时，注意将失败的信息进行记录以便告警</p>
<h2 id="部署规范"><a href="#部署规范" class="headerlink" title="部署规范"></a>部署规范</h2><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><h3 id="降低升级时间窗"><a href="#降低升级时间窗" class="headerlink" title="降低升级时间窗"></a>降低升级时间窗</h3><h3 id="没有人需要等待"><a href="#没有人需要等待" class="headerlink" title="没有人需要等待"></a>没有人需要等待</h3><p>正式发布后，对于任何用户都是公平使用的。不需要牺牲部分用户利益。<br>常见于缓存autowarm时需要阻塞第一批到达的用户。</p>
<h3 id="提前消除隐患"><a href="#提前消除隐患" class="headerlink" title="提前消除隐患"></a>提前消除隐患</h3><h1 id="团队管理"><a href="#团队管理" class="headerlink" title="团队管理"></a>团队管理</h1><p>识人、用人、管人、留人。(华为)</p>
<h2 id="精细化管理"><a href="#精细化管理" class="headerlink" title="精细化管理"></a>精细化管理</h2><h2 id="keep-watch"><a href="#keep-watch" class="headerlink" title="keep watch"></a>keep watch</h2><p>工作与心理的交流分享</p>
<h2 id="保持信任"><a href="#保持信任" class="headerlink" title="保持信任"></a>保持信任</h2><h2 id="保持怀疑-1"><a href="#保持怀疑-1" class="headerlink" title="保持怀疑"></a>保持怀疑</h2><h2 id="持续考评"><a href="#持续考评" class="headerlink" title="持续考评"></a>持续考评</h2><h3 id="KPI-VS-OKR"><a href="#KPI-VS-OKR" class="headerlink" title="KPI VS OKR"></a>KPI VS OKR</h3><h2 id="分享中提高"><a href="#分享中提高" class="headerlink" title="分享中提高"></a>分享中提高</h2><p>有一个著名的理论，叫木桶理论。意思是木桶能装多少水，是由木桶最短的那个板来决定的。团队也是如此。团队的力量有多大，很多时候也是由能力最差的那个成员来决定的。为了提高团队整体的实力，我们必须提高每个人的能力。我们的改善必须得是可度量的，所以我们也要数字化能力的标准。</p>
<h2 id="提高工作效率"><a href="#提高工作效率" class="headerlink" title="提高工作效率"></a>提高工作效率</h2><p>其实很多团队都在进行着这个工作。最常见的就是会做一些小工具，来节省我们的时间。比如代码自动生成工具，自动打包工具，自动的比较工具等等。我们应该制作尽可能多的自动化工具，来解放我们的时间。</p>
<p>为了让大家投入更多的热情来制作各种工具，团队可以制定一定的奖励规则，对制作工具的人给予奖励。</p>
<p>公司要把最好的人才放到工具开发那一块，因为工具做好了，可以达到事半功倍的效果，所有人的效率都可以得到提高，而不仅仅是工程师。</p>
<h2 id="互相备份"><a href="#互相备份" class="headerlink" title="互相备份"></a>互相备份</h2><h2 id="互相支撑"><a href="#互相支撑" class="headerlink" title="互相支撑"></a>互相支撑</h2><h2 id="向上管理"><a href="#向上管理" class="headerlink" title="向上管理"></a>向上管理</h2><h2 id="向下管理"><a href="#向下管理" class="headerlink" title="向下管理"></a>向下管理</h2><h3 id="了解队员的擅长与不足"><a href="#了解队员的擅长与不足" class="headerlink" title="了解队员的擅长与不足"></a>了解队员的擅长与不足</h3><h3 id="合理的任务分配"><a href="#合理的任务分配" class="headerlink" title="合理的任务分配"></a>合理的任务分配</h3><h3 id="适度挑战性的任务"><a href="#适度挑战性的任务" class="headerlink" title="适度挑战性的任务"></a>适度挑战性的任务</h3><h3 id="给出完成任务需要的资源"><a href="#给出完成任务需要的资源" class="headerlink" title="给出完成任务需要的资源"></a>给出完成任务需要的资源</h3><h3 id="激励中成长"><a href="#激励中成长" class="headerlink" title="激励中成长"></a>激励中成长</h3><p>眼前利益与发展前景</p>
<h3 id="给出职业发展的机会"><a href="#给出职业发展的机会" class="headerlink" title="给出职业发展的机会"></a>给出职业发展的机会</h3><h3 id="公开与公平中考评"><a href="#公开与公平中考评" class="headerlink" title="公开与公平中考评"></a>公开与公平中考评</h3><h3 id="保持团队稳定"><a href="#保持团队稳定" class="headerlink" title="保持团队稳定"></a>保持团队稳定</h3><p>团队成员的诉求：团队，产品，薪资，发展。</p>
<p>团队提供集体成长的氛围环境。</p>
<p>令人兴奋的产品，提供持续打磨的动力。</p>
<p>合适的薪资，使个人不过多为生活所扰。</p>
<p>良好的发展前景，对个人的职业生涯带来腾飞。</p>
<p>“穷得只剩钱”。小公司对企业文化不慎重视，开发团队的整体风气也没要求，招人过来只求出活，对团队个人发展是零投入的态度。这样的企业要想招到人、留住人，只剩钱了，但个人发展到一定高度，往往企业再也给不出足够的钱，这时再想留住人就很难了。这就是企业只依靠薪资吸引人带来的问题，对其他人才诉求不重视，穷得只剩钱。</p>
<p>当收入待遇和地位与自身才能不匹配时候，离开几乎是个必然的选择。</p>
<h2 id="适时剔除不合格"><a href="#适时剔除不合格" class="headerlink" title="适时剔除不合格"></a>适时剔除不合格</h2><h2 id="技术梯队"><a href="#技术梯队" class="headerlink" title="技术梯队"></a>技术梯队</h2><p>不同层次的人员配比，完成不同类型的任务。注意人员的上升下降渠道。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="http://blogread.cn/it/article/7346?f=wb&amp;utm_source=top.caibaojian.com/102758" target="_blank" rel="external">以Facebook为案例剖析科技公司应有的工具文化</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MjM5ODQ2MDIyMA==&amp;mid=2650712266&amp;idx=1&amp;sn=54d909d240eb701ae48467dc798ddc7f&amp;scene=2&amp;srcid=0506gUskHi8qJi6joV2483uM&amp;from=timeline&amp;isappinstalled=0#wechat_redirect" target="_blank" rel="external">动态追踪技术（中） - Dtrace、SystemTap、火焰图</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%9E%81%E9%99%90%E7%BC%96%E7%A8%8B" target="_blank" rel="external">极限编程</a></li>
<li><a href="https://zh.wikipedia.org/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1" target="_blank" rel="external">SOLID (面向对象设计)</a>)</li>
<li><a href="https://zh.wikipedia.org/wiki/%E4%B8%80%E6%AC%A1%E4%B8%94%E4%BB%85%E4%B8%80%E6%AC%A1" target="_blank" rel="external">一次且仅一次</a></li>
<li><a href="http://coolshell.cn/articles/4535.html" target="_blank" rel="external">一些软件设计的原则</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx与Docker容器系列 - 2.在生产环境的实践]]></title>
      <url>http://amao12580.github.io/post/2016/04/Nginx-with-docker-part-two/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文中的配置文件，已经整理到了GitHub：<a href="https://github.com/amao12580/docker" target="_blank" rel="external">https://github.com/amao12580/docker</a></p>
<p>本文假设读者对Nginx、Docker已经有了比较深入的了解，并掌握了docker-compose工具的使用。</p>
<h2 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h2><p>Nginx是一款面向性能设计的HTTP服务器，相较于Apache、lighttpd具有占有内存少，稳定性高等优势。与旧版本（&lt;=2.2）的Apache不同，nginx不采用每客户机一线程的设计模型，而是充分使用异步逻辑，削减了上下文调度开销，所以并发服务能力更强。整体采用模块化设计，有丰富的模块库和第三方模块库，配置灵活。 在Linux操作系统下，nginx使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。nginx同时是一个高性能的 HTTP 和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。Nginx 已经因为它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名了。</p>
<h2 id="可扩展"><a href="#可扩展" class="headerlink" title="可扩展"></a>可扩展</h2><p>Nginx属于典型的微内核设计，其内核非常简洁和优雅，同时具有非常高的可扩展性。</p>
<p>Nginx是纯C语言的实现，其可扩展性在于其模块化的设计。目前，Nginx已经有很多的第三方模块，大大扩展了自身的功能。nginx_lua_module可以将Lua语言嵌入到Nginx配置中，从而利用Lua极大增强了Nginx本身的编程能力，甚至可以不用配合其它脚本语言（如PHP或Python等），只靠Nginx本身就可以实现复杂业务的处理。</p>
<ul>
<li>–with-http_realip_module        #获取真实IP模块</li>
<li>–with-http_sub_module           #修改原始请求URI模块</li>
<li>–with-http_flv_module           #对flv流媒体播放提供支持</li>
<li>–with-http_dav_module           #启用对<a href="https://idoseek.com/1800" target="_blank" rel="external">WebDav协议</a>的支持</li>
<li>–with-http_gzip_static_module   #开启GZIP压缩，可以直接压缩html等静态资源。*.gz</li>
<li>–with-http_stub_status_module   #提供对nginx自身状态的监控功能</li>
<li>–with-http_addition_module      #过滤器模块， 在response数据的前/后添加文本</li>
<li>–with-pcre=                     #正则表达式解析支持，支持Rewrite重写规则</li>
<li>–with-openssl=                  #(part 1) HTTPS访问支持，需同时配合公钥和CA证书</li>
<li>–with-http_ssl_module           #(part 2) HTTPS访问支持，需同时配合公钥和CA证书</li>
<li>–with-zlib=                     #gzip模块需要 zlib 库</li>
<li>–add-module=/patch/nginx_upstream_check_module   #对后端服务器提供主动健康检查，自动failover</li>
</ul>
<p>这些模块，都是基于nginx源码编译安装并显式配置，才会生效，这要求我们的docker FROM镜像，需要支持C编译器环境。</p>
<h3 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h3><p>OpenResty 的目标是让你的Web服务直接跑在 Nginx 服务内部，充分利用 Nginx 的非阻塞 I/O 模型，不仅仅对 HTTP 客户端请求,甚至于对远程后端诸如 MySQL、PostgreSQL、Memcached 以及 Redis 等都进行一致的高性能响应。</p>
<p>Example:利用OpenResty的可编程特性，结合Redis，实现实时统计网站的PV、UV的功能，非常的简单。</p>
<p>不局限于Redis等,甚至于Kafka也可以，只要SDK提供对Lua语言的支持即可，简直是运维的春天</p>
<h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>动静分离，是指响应内容的动与静，分为动态计算的响应内容与静态不变的响应内容。如订单总数量计算是一个动态的，而网页logo图片是一个静态的。前者一般需要访问应用服务器，由程序来计算，而后者一般只需要nginx自身来处理。</p>
<p>利用nginx提供的静态资源压缩传输、静态资源内存级缓存，我们可以将html文件、css文件、js文件等资源直接放在nginx所在的主机硬盘中，由nginx代理这些文件的get操作。</p>
<p>受nginx代理的静态资源文件，应该具备如下特征：1.文件内容几乎不变化，如注册用户使用协议html，2.文件体积小，减轻压缩时对cpu的波动，以及缓存在内存的资源占用，3.文件属于热访问文件，比如Angular框架下的js文件。</p>
<p>多个nginx节点，可以共享这些静态文件，利用网络磁盘共享技术，甚至可以在部署在多个物理机的nginx节点下进行共享。</p>
<p>我们将可以直接将所有静态资源，按类型，放到文件夹：nginx/html/或nginx/static/下，这是立即生效的，不需要重启nginx。</p>
<h2 id="后端版本热升级"><a href="#后端版本热升级" class="headerlink" title="后端版本热升级"></a>后端版本热升级</h2><h3 id="兼容式热升级"><a href="#兼容式热升级" class="headerlink" title="兼容式热升级"></a>兼容式热升级</h3><p>对于nginx后端部署的应用程序，需要进行版本升级时，我们可以这样做。</p>
<ul>
<li><p>1.前提假定</p>
</li>
<li><p>1.1假设应用程序的新版本接口，是100%兼容旧版本的，即任何旧版本客户端在调用旧版本应用程序与新版本应用程序是无区别的，包括请求内容和响应内容。</p>
</li>
<li><p>1.2假设nginx.conf中，upstream段，定义了3个tomcat服务器（A\B\C）。此时2个tomcat服务器运行着同一版本（即旧版本）的应用程序。</p>
</li>
</ul>
<ul>
<li><p>2.升级步骤</p>
</li>
<li><p>2.1选择在系统平峰期进行，避免流量冲击。</p>
</li>
<li><p>2.2正常关闭A tomcat，在合理配置nginx的前提下，nginx监测到A机crash，此时会将流量转移到B\C。若使用平均流量权重，此时若B\C 2个机器的流量会各升高50%。</p>
</li>
<li><p>2.3执行A tomcat的升级。</p>
</li>
<li><p>2.4启动A tomcat，nginx监测到A机up，会将流量重新分配，此时各节点的流量恢复正常态。</p>
</li>
<li><p>2.5依照以上步骤，再升级B\C节点。</p>
</li>
</ul>
<p>整个过程不需要重启nginx，这意味着对外服务不需要中断。新版本可能存在不稳定，需要回退到旧版本，也是类似与以上步骤执行。</p>
<h3 id="非兼容式热升级"><a href="#非兼容式热升级" class="headerlink" title="非兼容式热升级"></a>非兼容式热升级</h3><p>非兼容式升级，是指新版本应用程序，对客户端的版本的要求比旧版本应用程序要高。例如客户端版本为1.0，旧版本应用程序为1.5，新版本应用程序为1.6。假定1.6版本对1.0版本的客户端不再提供支持，而1.5版本是可以支持1.0版本的客户端的。<br>而1.5与1.6版本的客户端访问入口，都在同一个nginx的同一个端口。</p>
<ul>
<li><p>1.避免同时支持多个版本的客户端，需要有客户端强制升级的方案。</p>
</li>
<li><p>2.客户端与应用程序通讯，需要定义一个客户端当前版本号，且该数据需要支持被nginx解析到。</p>
</li>
<li><p>3.修改nginx配置，定义2个server节点，每个节点按照不同客户端版本路由到对应的后端应用程序中，即有一个客户端版本与后端应用程序版本的对照表。</p>
</li>
<li><p>4.nginx做一下热加载nginx.conf，在下文中有提及。</p>
</li>
</ul>
<p>这种方案对于后端应用程序开发最为友好，只需要有不同分支版本进行并行维护即可，比如tag/V1.5/code、tag/V1.6/code，2个版本公有的bug修复时，需要做一个互相merge.</p>
<h2 id="自身热升级"><a href="#自身热升级" class="headerlink" title="自身热升级"></a>自身热升级</h2><p>Nginx自身的热升级，是指对Nginx进行模块维护或版本维护。</p>
<p>Nginx主进程在启动完成后会进入等待状态，负责响应各类系统消息，如SIGCHLD、SIGHUP、SIGUSR2等。</p>
<ul>
<li>TERM, INT: 立刻退出</li>
<li>QUIT: 等待工作进程结束后再退出</li>
<li>KILL: 强制终止进程</li>
<li>HUP: 重新加载配置文件，使用新的配置启动工作进程，并逐步关闭旧进程。</li>
<li>USR1: 重新打开日志文件</li>
<li>USR2: 启动新的主进程，实现热升级</li>
<li>WINCH: 逐步关闭工作进程</li>
</ul>
<p>在docker容器内热升级nginx的步骤：</p>
<ul>
<li>1.向主进程发送USR2信号，Nginx会启动一个新版本的master进程和工作进程，和旧版一起处理请求</li>
</ul>
<p>docker kill –signal=”USR2” <nginx container="" name="" or="" id=""></nginx></p>
<ul>
<li>2.向原Nginx主进程发送WINCH信号，它会逐步关闭旗下的工作进程（主进程不退出），这时所有请求都会由新版Nginx处理</li>
</ul>
<p>docker kill –signal=”WINCH” <nginx container="" name="" or="" id=""></nginx></p>
<ul>
<li>3.如果这时需要回退，可向原Nginx主进程发送HUP信号，它会重新启动工作进程， 仍使用旧版配置文件 。尔后可以将新版Nginx进程杀死（使用QUIT、TERM、或者KILL）</li>
</ul>
<p>docker kill –signal=”TERM” <nginx container="" name="" or="" id=""></nginx></p>
<h2 id="热加载nginx-conf"><a href="#热加载nginx-conf" class="headerlink" title="热加载nginx.conf"></a>热加载nginx.conf</h2><p>我们知道在upstream定义的tomcat节点，是属于文件性配置，如果需要上线新加节点，需要修改nginx.conf，然后需要重启Nginx读取新配置。如何热加载nginx.conf 而不需重启nginx？</p>
<p>docker exec -i -t <nginx container="" name="" or="" id=""> ./usr/local/nginx/sbin/nginx -s reload</nginx></p>
<h2 id="高可用方案"><a href="#高可用方案" class="headerlink" title="高可用方案"></a>高可用方案</h2><p>使用Keepalived在多个nginx节点之间做互为主备配置，配置略过。</p>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>对后端tomcat的负载均衡，使用upstream，配置权重和max_fails等参数即可</p>
<h1 id="设定负载均衡方式：RR模式"><a href="#设定负载均衡方式：RR模式" class="headerlink" title="设定负载均衡方式：RR模式"></a>设定负载均衡方式：RR模式</h1><pre><code>upstream  xws  {
    server 192.168.1.188:6080 weight=1 max_fails=5 fail_timeout=10s ;
    server 192.168.1.188:7080 weight=1 max_fails=5 fail_timeout=10s ;
    check interval=3000 rise=2 fall=5 timeout=1000 type=http;
}
</code></pre><h2 id="对后端的健康管理"><a href="#对后端的健康管理" class="headerlink" title="对后端的健康管理"></a>对后端的健康管理</h2><p>使用nginx_upstream_check_module功能增强补丁</p>
<p>配置location,开放后端tomcat的健康状况访问。</p>
<p><a href="http://your" target="_blank" rel="external">http://your</a> maintenance IP and Port/xw_TomcatStatus/</p>
<h2 id="自身的运行监控"><a href="#自身的运行监控" class="headerlink" title="自身的运行监控"></a>自身的运行监控</h2><p>监控Nginx：<a href="http://your" target="_blank" rel="external">http://your</a> maintenance IP and Port/xw_NginxStatus/</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><p>软件架构模式：<a href="http://colobu.com/2015/04/08/software-architecture-patterns/" target="_blank" rel="external">http://colobu.com/2015/04/08/software-architecture-patterns/</a></p>
</li>
<li><p>Nginx简介：<a href="http://www.rowkey.me/blog/2014/08/27/nginx-loabbalance/" target="_blank" rel="external">http://www.rowkey.me/blog/2014/08/27/nginx-loabbalance/</a></p>
</li>
<li><p>OpenResty + Redis 实时计算统计Web服务的UV &amp; PV ：<a href="http://www.wtoutiao.com/p/109IT70.html" target="_blank" rel="external">http://www.wtoutiao.com/p/109IT70.html</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx与Docker容器系列 - 1.进行编译安装]]></title>
      <url>http://amao12580.github.io/post/2016/04/Nginx-with-docker-part-one/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Docker容器的出现，为应用运行环境一致性带来了很好的解决方案。同时也带来了远比虚拟机更好的体验，提供资源隔离(Linux namespace)和资源分配(Linux control group)的功能、应用可扩展性的功能，但是更加轻量级的运行。为了解决多容器的依赖性和互相调用，提供了docker-compose等工具进行容器编排。</p>
<p>我们项目中，对docker的使用非常深入，在线上环境和线下的测试环境、开发环境，都使用了docker作为运行时环境一致性支持。由于linux的发行版本和内核版本的不同组合，在没有docker之前，DevOps很难为不同的运行环境编写统一的软件安装维护的脚本，几乎只能借助虚拟机来达到这一目的，虚拟机的笨重和可调度性差，扩容与缩容也无法做到快速有效，已经被逐渐淘汰。</p>
<p>Nginx，性能已经毋庸置疑，但在docker hub上的nginx镜像，并不适合我们，没有对安全进行加固，更多的没有加入重要的功能增加，比如主动式地对后端Tomcat进行健康检查并自动failover，这个动能对HA的非常重要的，因此我们选择了在docker环境下，对官方nginx源码进行编译，并打上补丁，以符合实际生产环境的使用。</p>
<p>本文中的配置文件，已经整理到了GitHub：<a href="https://github.com/amao12580/docker" target="_blank" rel="external">https://github.com/amao12580/docker</a></p>
<p>本文假设读者对Nginx、Docker已经有了比较深入的了解，并掌握了docker-compose工具的使用。</p>
<h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><h2 id="宿主机的情况"><a href="#宿主机的情况" class="headerlink" title="宿主机的情况"></a>宿主机的情况</h2><h3 id="操作系统和硬件"><a href="#操作系统和硬件" class="headerlink" title="操作系统和硬件"></a>操作系统和硬件</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">操作系统</span><br><span class="line">root<span class="variable">@ubuntu</span>-<span class="number">14</span><span class="symbol">:~/docker/test</span><span class="comment"># uname -a</span></span><br><span class="line">Linux ubuntu-<span class="number">14</span> <span class="number">4.2</span>.<span class="number">0</span>-<span class="number">35</span>-generic <span class="comment">#40~14.04.1-Ubuntu SMP Fri Mar 18 16:37:35 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line"></span><br><span class="line">CPU</span><br><span class="line">root<span class="variable">@ubuntu</span>-<span class="number">14</span><span class="symbol">:~/docker/test</span><span class="comment"># lscpu</span></span><br><span class="line"><span class="symbol">Architecture:</span>          x86_64</span><br><span class="line">CPU op-mode(s)<span class="symbol">:</span>        <span class="number">32</span>-bit, <span class="number">64</span>-bit</span><br><span class="line">Byte <span class="symbol">Order:</span>            Little Endian</span><br><span class="line">CPU(s)<span class="symbol">:</span>                <span class="number">4</span></span><br><span class="line">On-line CPU(s) <span class="symbol">list:</span>   <span class="number">0</span>-<span class="number">3</span></span><br><span class="line">Thread(s) per <span class="symbol">core:</span>    <span class="number">1</span></span><br><span class="line">Core(s) per <span class="symbol">socket:</span>    <span class="number">4</span></span><br><span class="line">Socket(s)<span class="symbol">:</span>             <span class="number">1</span></span><br><span class="line">NUMA node(s)<span class="symbol">:</span>          <span class="number">1</span></span><br><span class="line">Vendor <span class="symbol">ID:</span>             GenuineIntel</span><br><span class="line">CPU <span class="symbol">family:</span>            <span class="number">6</span></span><br><span class="line"><span class="symbol">Model:</span>                 <span class="number">58</span></span><br><span class="line"><span class="symbol">Stepping:</span>              <span class="number">9</span></span><br><span class="line">CPU <span class="symbol">MHz:</span>               <span class="number">1600.125</span></span><br><span class="line"><span class="symbol">BogoMIPS:</span>              <span class="number">6385.87</span></span><br><span class="line"><span class="symbol">Virtualization:</span>        VT-x</span><br><span class="line">L1d <span class="symbol">cache:</span>             <span class="number">32</span>K</span><br><span class="line">L1i <span class="symbol">cache:</span>             <span class="number">32</span>K</span><br><span class="line">L2 <span class="symbol">cache:</span>              <span class="number">256</span>K</span><br><span class="line">L3 <span class="symbol">cache:</span>              <span class="number">6144</span>K</span><br><span class="line"></span><br><span class="line">Memory</span><br><span class="line">root<span class="variable">@ubuntu</span>-<span class="number">14</span><span class="symbol">:~/docker/test</span><span class="comment"># free -m</span></span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line"><span class="symbol">Mem:</span>          <span class="number">7881</span>       <span class="number">4751</span>       <span class="number">3130</span>          <span class="number">1</span>        <span class="number">419</span>       <span class="number">3810</span></span><br><span class="line">-<span class="regexp">/+ buffers/cache</span><span class="symbol">:</span>        <span class="number">520</span>       <span class="number">7360</span></span><br><span class="line"><span class="symbol">Swap:</span>         <span class="number">8087</span>          <span class="number">0</span>       <span class="number">8087</span></span><br></pre></td></tr></table></figure>
<h3 id="docker运行时环境"><a href="#docker运行时环境" class="headerlink" title="docker运行时环境"></a>docker运行时环境</h3><p>如果你不知道如何安装docker，请参考我对此的收集：<a href="http://amao12580.github.io/index/">http://amao12580.github.io/index/</a><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-14:~/docker/<span class="keyword">test</span># docker-compose <span class="keyword">version</span></span><br><span class="line">docker-compose <span class="keyword">version</span> 1.7.0, build 0d7bf73</span><br><span class="line">docker-py <span class="keyword">version</span>: 1.8.0</span><br><span class="line">CPython <span class="keyword">version</span>: 2.7.9</span><br><span class="line">OpenSSL <span class="keyword">version</span>: OpenSSL 1.0.1e 11 Feb 2013</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@ubuntu-14:~/docker/<span class="keyword">test</span># docker <span class="keyword">version</span></span><br><span class="line">Client:</span><br><span class="line"> <span class="keyword">Version</span>:      1.9.1</span><br><span class="line"> API <span class="keyword">version</span>:  1.21</span><br><span class="line"> Go <span class="keyword">version</span>:   go1.4.3</span><br><span class="line"> Git commit:   a34a1d5</span><br><span class="line"> Built:        Fri Nov 20 17:56:04 UTC 2015</span><br><span class="line"> OS/<span class="keyword">Arch</span>:      linux/amd64</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> <span class="keyword">Version</span>:      1.9.1</span><br><span class="line"> API <span class="keyword">version</span>:  1.21</span><br><span class="line"> Go <span class="keyword">version</span>:   go1.4.3</span><br><span class="line"> Git commit:   a34a1d5</span><br><span class="line"> Built:        Fri Nov 20 17:56:04 UTC 2015</span><br><span class="line"> OS/<span class="keyword">Arch</span>:      linux/amd64</span><br></pre></td></tr></table></figure></p>
<h1 id="FROM-centos-6-7"><a href="#FROM-centos-6-7" class="headerlink" title="FROM centos:6.7"></a>FROM centos:6.7</h1><p>我的目录结构看起来是这样：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">root<span class="symbol">@ubuntu</span><span class="number">-14</span>:~<span class="meta"># pwd</span></span><br><span class="line">/root</span><br><span class="line">root<span class="symbol">@ubuntu</span><span class="number">-14</span>:~<span class="meta"># tree</span></span><br><span class="line">.</span><br><span class="line">└── docker</span><br><span class="line">    └── test</span><br><span class="line">        ├── docker-compose.yml</span><br><span class="line">        └── nginx</span><br><span class="line">            ├── conf</span><br><span class="line">            │   └── nginx.conf</span><br><span class="line">            ├── Dockerfile</span><br><span class="line">            ├── html</span><br><span class="line">            │   └── test_xw.html</span><br><span class="line">            ├── logs</span><br><span class="line">            │   ├── error.<span class="built_in">log</span></span><br><span class="line">            │   ├── nginx.pid</span><br><span class="line">            │   └── xws.access.<span class="built_in">log</span></span><br><span class="line">            ├── ssl</span><br><span class="line">            │   ├── www.xw18.cn.crt(已经移除，涉及到机密)</span><br><span class="line">            │   └── www.xw18.cn.key(已经移除，涉及到机密)</span><br><span class="line">            └── <span class="keyword">static</span></span><br><span class="line">                ├── apk</span><br><span class="line">                ├── css</span><br><span class="line">                ├── img</span><br><span class="line">                │   └── photo.jpg</span><br><span class="line">                └── js</span><br><span class="line"></span><br><span class="line"><span class="number">12</span> directories, <span class="number">10</span> files</span><br></pre></td></tr></table></figure></p>
<p>想要在shell中打印文件目录结构，请安装“tree”：aptitude install -y tree<br>请确保你的当前用户对这些目录具备必要的权限，下面一起看看docker-compose.yml文件吧。</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu<span class="number">-14</span>:~<span class="meta-keyword">/docker/</span>test<span class="meta"># cat docker-compose.yml</span></span><br><span class="line"><span class="symbol">nginx:</span></span><br><span class="line"><span class="symbol">  build:</span> ./nginx</span><br><span class="line"><span class="symbol">  mem_limit:</span> <span class="number">4294967296</span></span><br><span class="line"><span class="symbol">  cpu_shares:</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">  ports:</span></span><br><span class="line">    - <span class="string">"80:80"</span></span><br><span class="line">    - <span class="string">"443:443"</span></span><br><span class="line"><span class="symbol">  volumes:</span></span><br><span class="line">    - .<span class="meta-keyword">/nginx/</span>conf/nginx.conf:<span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/nginx/</span>conf/nginx.conf</span><br><span class="line">    - .<span class="meta-keyword">/nginx/</span>html:<span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/nginx/</span>html</span><br><span class="line">    - .<span class="meta-keyword">/nginx/</span>static:<span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/nginx/</span>static</span><br><span class="line">    - .<span class="meta-keyword">/nginx/</span>ssl:<span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/nginx/</span>ssl</span><br><span class="line">    - .<span class="meta-keyword">/nginx/</span>logs:<span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/nginx/</span>logs:rw</span><br></pre></td></tr></table></figure>
<p>是不是看起来很简单呢？因为我们在docker-compose里定义的是服务的运行环境要求，并没有定义如何构建这个服务。</p>
<p>想看如何构建nginx,那一起来看看Dockerfile文件吧，这个文件就是如何一步步的构建服务的，如果有合适的image，你可以在Dockerfile里定义执行任何可以在宿主机环境下执行的命令哦。是不是很magic呢？<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-14:~/docker/test/nginx# cat Dockerfile</span><br><span class="line">#定义基础镜像</span><br><span class="line">FROM centos:6.7</span><br><span class="line"></span><br><span class="line">#定义nginx版本</span><br><span class="line">ENV NGINX_VERSION 1.9.14</span><br><span class="line"></span><br><span class="line">#准备安装环境</span><br><span class="line">RUN yum install -y wget &amp;&amp; \</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo  &amp;&amp; \</span><br><span class="line">yum clean all  &amp;&amp; \</span><br><span class="line">yum makecache &amp;&amp; \</span><br><span class="line"></span><br><span class="line">#安装依赖组件</span><br><span class="line">rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-* &amp;&amp; \</span><br><span class="line">yum install -y epel-release &amp;&amp; \</span><br><span class="line">rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6 &amp;&amp; \</span><br><span class="line">yum install -y patch pcre-devel openssl-devel zlib-devel gd-devel tar gcc git supervisor &amp;&amp; \</span><br><span class="line"></span><br><span class="line">#下载安装包和补丁</span><br><span class="line">mkdir -p /var/run/nginx/ &amp;&amp; \</span><br><span class="line">wget -c http://nginx.org/download/nginx-$&#123;NGINX_VERSION&#125;.tar.gz &amp;&amp; \</span><br><span class="line">git clone https://github.com/cuber/ngx_http_google_filter_module.git &amp;&amp; \</span><br><span class="line">git clone https://github.com/yaoweibin/ngx_http_substitutions_filter_module.git &amp;&amp; \</span><br><span class="line">git clone https://github.com/aperezdc/ngx-fancyindex.git &amp;&amp; \</span><br><span class="line">git clone https://github.com/yaoweibin/nginx_upstream_check_module.git &amp;&amp; \</span><br><span class="line"></span><br><span class="line">#进行编译安装，同时打上补丁</span><br><span class="line">tar xf nginx-$&#123;NGINX_VERSION&#125;.tar.gz &amp;&amp; \</span><br><span class="line">cd nginx-$&#123;NGINX_VERSION&#125; &amp;&amp; \</span><br><span class="line">cd src/ &amp;&amp; \</span><br><span class="line">#打补丁</span><br><span class="line">patch -p1 &lt; /nginx_upstream_check_module/check_1.9.2+.patch &amp;&amp; \</span><br><span class="line">cd .. &amp;&amp; \</span><br><span class="line">#去除nginx的对外版本号</span><br><span class="line">sed -i -e 's/$&#123;NGINX_VERSION&#125;//g' -e 's/nginx\//ERROR/g' -e 's/"NGINX"/"ERROR"/g' src/core/nginx.h  &amp;&amp; \</span><br><span class="line">./configure --prefix=/usr/local/nginx \</span><br><span class="line">-<span class="ruby">-with-pcre \</span><br><span class="line"></span>-<span class="ruby">-with-ipv6 \</span><br><span class="line"></span>-<span class="ruby">-with-http_ssl_module \</span><br><span class="line"></span>-<span class="ruby">-with-http_flv_module \</span><br><span class="line"></span>-<span class="ruby">-with-http_v2_module \</span><br><span class="line"></span>-<span class="ruby">-with-http_realip_module \</span><br><span class="line"></span>-<span class="ruby">-with-http_gzip_static_module \</span><br><span class="line"></span>-<span class="ruby">-with-http_stub_status_module \</span><br><span class="line"></span>-<span class="ruby">-with-http_mp4_module \</span><br><span class="line"></span>-<span class="ruby">-with-http_image_filter_module \</span><br><span class="line"></span>-<span class="ruby">-with-http_addition_module \</span><br><span class="line"></span>-<span class="ruby">-with-http_sub_module  \</span><br><span class="line"></span>-<span class="ruby">-with-http_dav_module  \</span><br><span class="line"></span>-<span class="ruby">-http-client-body-temp-path=<span class="regexp">/usr/local</span><span class="regexp">/nginx/client</span><span class="regexp">/ \</span><br><span class="line"></span></span>-<span class="ruby"><span class="regexp">-http-proxy-temp-path=/usr</span><span class="regexp">/local/nginx</span><span class="regexp">/proxy/</span> \</span><br><span class="line"></span>-<span class="ruby">-http-fastcgi-temp-path=<span class="regexp">/usr/local</span><span class="regexp">/nginx/fcgi</span><span class="regexp">/ \</span><br><span class="line"></span></span>-<span class="ruby"><span class="regexp">-http-uwsgi-temp-path=/usr</span><span class="regexp">/local/nginx</span><span class="regexp">/uwsgi \</span><br><span class="line"></span></span>-<span class="ruby"><span class="regexp">-http-scgi-temp-path=/usr</span><span class="regexp">/local/nginx</span><span class="regexp">/scgi \</span><br><span class="line"></span></span>-<span class="ruby"><span class="regexp">-add-module=../ngx</span>_http_google_filter_module \</span><br><span class="line"></span>-<span class="ruby">-add-<span class="class"><span class="keyword">module</span>=../<span class="title">ngx_http_substitutions_filter_module</span> \</span></span><br><span class="line"></span>-<span class="ruby">-add-<span class="class"><span class="keyword">module</span>=../<span class="title">ngx</span>-<span class="title">fancyindex</span> \</span></span><br><span class="line"></span>-<span class="ruby">-add-<span class="class"><span class="keyword">module</span>=../<span class="title">nginx_upstream_check_module</span> &amp;&amp; \</span></span><br><span class="line"></span>#开始编译</span><br><span class="line">make -j $(awk '/processor/&#123;i++&#125;END&#123;print i&#125;' /proc/cpuinfo) &amp;&amp; make install &amp;&amp; \</span><br><span class="line">#设置一些工作目录</span><br><span class="line">mkdir -p /usr/local/nginx/cache/ &amp;&amp; \</span><br><span class="line">mkdir -p /usr/local/nginx/temp/ &amp;&amp; \</span><br><span class="line">rm -rf ../&#123;ngx*,nginx*&#125; &amp;&amp; \</span><br><span class="line">yum clean packages</span><br><span class="line"></span><br><span class="line">#启动nginx，保留一个前台进程，以免被docker强制退出</span><br><span class="line">CMD ./usr/local/nginx/sbin/nginx &amp;&amp; tail -f /usr/local/nginx/logs/error.log</span><br></pre></td></tr></table></figure></p>
<p>是不是感觉内容太多了呢？每一步都有说明的，为了节省磁盘空间，我们将很多命令聚合到了一起。<br>事实上确实减少了一部分的磁盘占用，我们来看看现在build出来的镜像有多大吧。<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu<span class="number">-14</span>:~<span class="meta-keyword">/docker/</span>test<span class="meta"># pwd</span></span><br><span class="line"><span class="meta-keyword">/root/</span>docker/test</span><br><span class="line">root@ubuntu<span class="number">-14</span>:~<span class="meta-keyword">/docker/</span>test<span class="meta"># ls</span></span><br><span class="line">docker-compose.yml  nginx</span><br><span class="line"></span><br><span class="line">这里开始进行构建、启动并在后台保持运行</span><br><span class="line">root@ubuntu<span class="number">-14</span>:~<span class="meta-keyword">/docker/</span>test<span class="meta"># docker-compose up -d nginx</span></span><br><span class="line">后面的内容实在是太多了，就不贴出来了。如果你的网络环境很差，这个过程会很漫长。</span><br><span class="line"></span><br><span class="line">已经成功运行了，test一下</span><br><span class="line">root@ubuntu<span class="number">-14</span>:~<span class="meta-keyword">/docker/</span>test<span class="meta"># curl http:<span class="comment">//192.168.2.200/test_xw.html</span></span></span><br><span class="line"><span class="params">&lt;html&gt;</span></span><br><span class="line"><span class="params">&lt;body&gt;</span></span><br><span class="line"><span class="params">&lt;h2&gt;</span>Hello World! xw.<span class="params">&lt;/h2&gt;</span></span><br><span class="line"><span class="params">&lt;h2&gt;</span>这是测试内容.<span class="params">&lt;/h2&gt;</span></span><br><span class="line"><span class="params">&lt;/body&gt;</span></span><br><span class="line"></span><br><span class="line">容器运行后，nginx会处于listener状态，我们来看看images有多大</span><br><span class="line">root@ubuntu<span class="number">-14</span>:~<span class="meta-keyword">/docker/</span>test<span class="meta"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">test_nginx          latest              e50ecf326484        <span class="number">2</span> hours ago         <span class="number">986.3</span> MB</span><br></pre></td></tr></table></figure></p>
<p>将近1个GB了，虽然说可以使用docker export -gzip 来压缩，并结合docker import命令直接导入，但是这个体积还是太肥大了，不利于轻量化运行和传播，我们来想想办法来减减肥吧。</p>
<h1 id="FROM-alpine-3-3"><a href="#FROM-alpine-3-3" class="headerlink" title="FROM alpine:3.3"></a>FROM alpine:3.3</h1><p>Alpine Linux，一个只有5M的Docker镜像。</p>
<p>Alpine Linux Docker镜像基于Alpine Linux操作系统，后者是一个面向安全的轻型Linux发行版。不同于通常Linux发行版，Alpine Linux采用了musl libc和busybox以减小系统的体积和运行时资源消耗。在保持瘦身的同时，Alpine Linux还提供了自己的包管理工具apk，可以在其网站上查询，或者直接通过apk命令查询和安装。</p>
<p>Alpine Linux Docker镜像也继承了Alpine Linux发行版的这些优势。相比于其他Docker镜像，它的容量非常小，仅仅只有5M，且拥有非常友好的包管理器。</p>
<p>可以直接使用的DockerFile：</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#说明：因为我所在的网络环境非常差，所以将很多需要下载的Step单独用RUN定义了，以免每次网络连不上而重复下载。如果你的网络环境OK，可以考虑合并多个RUN,以进一步减少imags的大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:latest</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义nginx版本</span></span><br><span class="line"><span class="keyword">ENV</span> NGINX_VERSION <span class="number">1.9</span>.<span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将安装源切换为国内环境(中国科学技术大学)，大大加快了安装速度，同时稳定性也有了保障</span></span><br><span class="line"><span class="keyword">ENV</span> MIRROR_URL http://mirrors.ustc.edu.cn/alpine/</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MIRROR_URL_BACKUP http://alpine.gliderlabs.com/alpine/</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MIRROR_URL_SLOWEST http://dl-cdn.alpinelinux.org/alpine/</span><br><span class="line"></span><br><span class="line"><span class="comment">#准备安装环境</span></span><br><span class="line"><span class="keyword">RUN</span> <span class="bash"><span class="built_in">echo</span> <span class="string">''</span> &gt; /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;MIRROR_URL&#125;</span>v3.3//main"</span>     &gt;&gt; /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;MIRROR_URL&#125;</span>v3.3//community"</span> &gt;&gt; /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'185.31.17.249 github.com'</span> &gt;&gt; /etc/hosts &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'202.141.160.110 mirrors.ustc.edu.cn'</span> &gt;&gt; /etc/hosts &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'206.251.255.63 nginx.org'</span> &gt;&gt; /etc/hosts</span><br><span class="line"></span></span><br><span class="line"><span class="comment">#安装必要的组件(如果发生  ERROR: Service 'nginx' failed to build: The command '/bin/sh -c apk add... returned a non-zero code: 12。  这是网络问题：请删干净未完成container和images，10分钟后再来一遍)</span></span><br><span class="line"><span class="keyword">RUN</span> <span class="bash">apk add --no-cache --virtual .build-deps \</span><br><span class="line">    gcc \</span><br><span class="line">    libc-dev \</span><br><span class="line">    make \</span><br><span class="line">    openssl-dev \</span><br><span class="line">    pcre-dev \</span><br><span class="line">    zlib-dev \</span><br><span class="line">    linux-headers \</span><br><span class="line">    curl \</span><br><span class="line">    jemalloc-dev \</span><br><span class="line">    gd-dev \</span><br><span class="line">    git</span><br><span class="line"></span><span class="comment">#下载安装包和补丁</span></span><br><span class="line"><span class="keyword">RUN</span> <span class="bash">mkdir -p /var/run/nginx/</span><br><span class="line"></span><span class="keyword">RUN</span> <span class="bash">wget -c http://nginx.org/download/nginx-<span class="variable">$&#123;NGINX_VERSION&#125;</span>.tar.gz</span><br><span class="line"></span><span class="keyword">RUN</span> <span class="bash">git <span class="built_in">clone</span> https://github.com/cuber/ngx_http_google_filter_module.git</span><br><span class="line"></span><span class="keyword">RUN</span> <span class="bash">git <span class="built_in">clone</span> https://github.com/yaoweibin/ngx_http_substitutions_filter_module.git</span><br><span class="line"></span><span class="keyword">RUN</span> <span class="bash">git <span class="built_in">clone</span> https://github.com/aperezdc/ngx-fancyindex.git</span><br><span class="line"></span><span class="keyword">RUN</span> <span class="bash">git <span class="built_in">clone</span> https://github.com/yaoweibin/nginx_upstream_check_module.git</span><br><span class="line"></span></span><br><span class="line"><span class="comment">#进行编译安装，同时打上补丁</span></span><br><span class="line"><span class="keyword">RUN</span> <span class="bash">tar -xzvf nginx-<span class="variable">$&#123;NGINX_VERSION&#125;</span>.tar.gz &amp;&amp; \</span><br><span class="line"><span class="built_in">cd</span> nginx-<span class="variable">$&#123;NGINX_VERSION&#125;</span> &amp;&amp; \</span><br><span class="line"><span class="built_in">cd</span> src/ &amp;&amp; \</span><br><span class="line"><span class="comment">#打补丁</span></span><br><span class="line"></span>patch -p1 &lt; /nginx_upstream_check_module/check_1.9.2+.patch &amp;&amp; \</span><br><span class="line">cd .. &amp;&amp; \</span><br><span class="line"><span class="comment">#去除nginx的对外版本号</span></span><br><span class="line">sed -i -e 's/$&#123;NGINX_VERSION&#125;//g' -e 's/nginx\//ERROR/g' -e 's/"NGINX"/"ERROR"/g' src/core/nginx.h  &amp;&amp; \</span><br><span class="line">./configure --prefix=/usr/local/nginx \</span><br><span class="line">--with-pcre \</span><br><span class="line">--with-ipv6 \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_flv_module \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-http_realip_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_mp4_module \</span><br><span class="line">--with-http_image_filter_module \</span><br><span class="line">--with-http_addition_module \</span><br><span class="line">--with-http_sub_module  \</span><br><span class="line">--with-http_dav_module  \</span><br><span class="line">--http-client-body-temp-path=/usr/local/nginx/client/ \</span><br><span class="line">--http-proxy-temp-path=/usr/local/nginx/proxy/ \</span><br><span class="line">--http-fastcgi-temp-path=/usr/local/nginx/fcgi/ \</span><br><span class="line">--http-uwsgi-temp-path=/usr/local/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/usr/local/nginx/scgi \</span><br><span class="line">--<span class="keyword">add</span>-module=../ngx_http_google_filter_module \</span><br><span class="line">--<span class="keyword">add</span>-module=../ngx_http_substitutions_filter_module \</span><br><span class="line">--<span class="keyword">add</span>-module=../ngx-fancyindex \</span><br><span class="line">--<span class="keyword">add</span>-module=../nginx_upstream_check_module \</span><br><span class="line">--with-ld-opt="-ljemalloc" &amp;&amp; \</span><br><span class="line"><span class="comment">#开始编译</span></span><br><span class="line">make -j $(awk '/processor/&#123;i++&#125;END&#123;print i&#125;' /proc/cpuinfo) &amp;&amp; make install &amp;&amp; \</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置一些工作目录</span></span><br><span class="line">mkdir -p /usr/local/nginx/cache/ &amp;&amp; \</span><br><span class="line">mkdir -p /usr/local/nginx/temp/ &amp;&amp; \</span><br><span class="line">rm -rf ../&#123;ngx*,nginx*&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动nginx，保留一个前台进程，以免被docker强制退出</span></span><br><span class="line"><span class="keyword">CMD</span> <span class="bash">./usr/<span class="built_in">local</span>/nginx/sbin/nginx &amp;&amp; tail <span class="_">-f</span> /usr/<span class="built_in">local</span>/nginx/logs/error.log</span></span><br></pre></td></tr></table></figure>
<p>看看我们最后基于alpine的镜像大小是多少？<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@ubuntu</span>-<span class="number">14</span><span class="symbol">:~/docker/alpine</span><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">alpine_nginx        latest              <span class="number">81</span>b30220a198        <span class="number">3</span> minutes ago       <span class="number">167.3</span> MB</span><br></pre></td></tr></table></figure></p>
<p>不到200MB，成功瘦身80%。合并一些RUN定义，提及还可以更小的。</p>
<p>我们现在做了2个版本的nginx编译增强镜像，来看看最后的文件目录吧！</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-14:~# <span class="keyword">pwd</span></span><br><span class="line">/root</span><br><span class="line">root@ubuntu-14:~# tree</span><br><span class="line">.</span><br><span class="line">└── docker</span><br><span class="line">    ├── alpine</span><br><span class="line">    │   ├── docker-compose.yml</span><br><span class="line">    │   └── nginx</span><br><span class="line">    │       ├── <span class="keyword">conf</span></span><br><span class="line">    │       │   └── nginx.<span class="keyword">conf</span></span><br><span class="line">    │       ├── Dockerfile</span><br><span class="line">    │       ├── html</span><br><span class="line">    │       │   └── test_xw.html</span><br><span class="line">    │       ├── logs</span><br><span class="line">    │       │   ├── <span class="keyword">error</span>.<span class="built_in">log</span></span><br><span class="line">    │       │   ├── nginx.pid</span><br><span class="line">    │       │   └── xws.access.<span class="built_in">log</span></span><br><span class="line">    │       ├── ssl</span><br><span class="line">    │       │   ├── www.xw18.cn.crt</span><br><span class="line">    │       │   └── www.xw18.cn.key</span><br><span class="line">    │       └── static</span><br><span class="line">    │           ├── apk</span><br><span class="line">    │           ├── css</span><br><span class="line">    │           ├── img</span><br><span class="line">    │           │   ├── 50.jpg</span><br><span class="line">    │           │   └── photo.jpg</span><br><span class="line">    │           └── js</span><br><span class="line">    └── <span class="keyword">test</span></span><br><span class="line">        ├── docker-compose.yml</span><br><span class="line">        └── nginx</span><br><span class="line">            ├── <span class="keyword">conf</span></span><br><span class="line">            │   └── nginx.<span class="keyword">conf</span></span><br><span class="line">            ├── Dockerfile</span><br><span class="line">            ├── html</span><br><span class="line">            │   └── test_xw.html</span><br><span class="line">            ├── logs</span><br><span class="line">            │   ├── <span class="keyword">error</span>.<span class="built_in">log</span></span><br><span class="line">            │   ├── nginx.pid</span><br><span class="line">            │   └── xws.access.<span class="built_in">log</span></span><br><span class="line">            ├── ssl</span><br><span class="line">            │   ├── www.xw18.cn.crt</span><br><span class="line">            │   └── www.xw18.cn.key</span><br><span class="line">            └── static</span><br><span class="line">                ├── apk</span><br><span class="line">                ├── css</span><br><span class="line">                ├── img</span><br><span class="line">                │   ├── 50.jpg</span><br><span class="line">                │   └── photo.jpg</span><br><span class="line">                └── js</span><br><span class="line"></span><br><span class="line">23 directories, 22 files</span><br></pre></td></tr></table></figure>
<p>参考资料：<a href="http://dockone.io/article/1243?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">http://dockone.io/article/1243?utm_source=tuicool&amp;utm_medium=referral</a></p>
<h1 id="常用命令总结"><a href="#常用命令总结" class="headerlink" title="常用命令总结"></a>常用命令总结</h1><ul>
<li>docker进入到正在运行的容器内部</li>
</ul>
<p>docker exec -it test_redis_1 /bin/bash</p>
<ul>
<li>运行一个image_id为195eb90b5349的容器，并命名为shell，然后进入到容器内部</li>
</ul>
<p>docker run –name shell -i -t 195eb90b5349 /bin/bash</p>
<ul>
<li>运行一个名为alpine的容器，并进入到容器内部</li>
</ul>
<p>docker run -it alpine /bin/sh</p>
<ul>
<li>docker查看本地image</li>
</ul>
<p>docker images</p>
<ul>
<li>重启docker服务</li>
</ul>
<p>service docker restart</p>
<ul>
<li>查看所有的容器</li>
</ul>
<p>docker ps -a</p>
<ul>
<li>删除多个容器</li>
</ul>
<p>docker rm -v id1 id2</p>
<ul>
<li>删除所有容器</li>
</ul>
<p>docker rm $(docker ps -a -q)</p>
<ul>
<li>删除多个镜像</li>
</ul>
<p>dicker rmi id1 id2</p>
<ul>
<li>查询所有未成功build的镜像<none></none></li>
</ul>
<p>docker images -q -f dangling=true</p>
<ul>
<li>删除所有未成功build的镜像<none></none></li>
</ul>
<p>docker rmi $(docker images -q -f dangling=true)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx与Tomcat 8在Docker环境的反向代理配置过程]]></title>
      <url>http://amao12580.github.io/post/2016/04/Nginx-reverse-proxy-with-tomcat-in-docker/</url>
      <content type="html"><![CDATA[<h1 id="需要做什么？"><a href="#需要做什么？" class="headerlink" title="需要做什么？"></a>需要做什么？</h1><p>最近接到的任务是:在Docker环境下，Nginx与Tomcat的反向代理与负载均衡配置。先拿出可行性方案，以便在业务量突发时，在线上环境实施。典型的技术预研，打有准备仗。同时还提出了安全需求，在配置上，需要有安全加固。</p>
<p>在Nginx配置时，针对不同的使用环境，配置的参数有很多不同。迫在眉睫的，我们需要先对线上的API服务系统进行反向代理与负载均衡配置。API服务系统是面向手机APP的接口系统，使用HTTP Restful+json进行数据通讯。</p>
<p>我们在局域网环境下，有2台机器在软硬件配置方面，与线上的API服务系统类似。这2台机器的局域网IP分别是：192.168.1.158(简称为：158机器)、192.168.1.188(简称为：188机器)。由于188机器正在做压力测试，而且近期需要持续的对所有接口进行压力测试，没有办法空闲出来做实验。所以在实验之初我使用了158机器的普通账号进行，很快就因为权限不足，遭遇了很多莫名其妙的问题，而且158的使用量比较多，主要作为功能测试的机器。</p>
<p>随后与PM沟通，延后了188机器的压力测试计划，拿到了权限比较高的账号，但还不是root账户。下面会说到如何在普通账户下，使用root账户执行shell命令。</p>
<h1 id="Docker-with-Tomcat"><a href="#Docker-with-Tomcat" class="headerlink" title="Docker with Tomcat"></a>Docker with Tomcat</h1><p>为了模拟线上真实环境，我们在188机器上搭建了docker环境。docker是借助Linux container(简称LXC)技术的轻量级可移植运行时环境，这意味着在docker中完成的软件运行时环境搭建后，可以移植到任意一台支持docker运行的机器上，功能上不会有任何的丢失。这有点像Java开发中的JVM，都是解决在不同环境下软件运行的问题。docker更多的提供了资源共享和资源隔离的机制，容器之间本身是隔离互不干扰的，但提供配置允许不同容器之间交换数据，开放对外端口；同时可以限制某个容器对宿主机的资源占用，如cpu、内存、io等等。</p>
<p>为了方便，低成本，我们使用docker hub上的tomcat镜像：tomcat:8-jre8。在后续的实验中，我们需要2个tomcat作为后端应用服务器来处理实际的HTTP请求。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> tomcat:<span class="number">8</span>-jre8</span><br><span class="line"></span><br><span class="line">RUN mkdir <span class="regexp">/root/</span>downloadAppBase</span><br></pre></td></tr></table></figure></p>
<h1 id="Nginx-VS-Tengine"><a href="#Nginx-VS-Tengine" class="headerlink" title="Nginx VS Tengine"></a>Nginx VS Tengine</h1><p>在技术选项时，我们遇到Nginx以及衍生产品Tengine。Nginx是俄罗斯人编写的一款轻量级的Web 服务器/反向代理服务器，它还具备邮件服务器的功能。我们在<a href="http://nginx.org/en/download.html" target="_blank" rel="external">Nginx官网</a>上查询发布日志，发现更新的比较频繁。仅在2016年前4月，就出现了2个比较大的版本：1.8.*、1.9.14。Tengine是由淘宝在官方nginx基础之上进行改进的版本，做了很多功能增强，最后一次的版本发布是：2015-12-31：Tengine-2.1.2,此版本仅兼容官方Nginx的1.6.2版本，该版本发布于：2014年9月16日。这也太久了，可能会错过很多官方更新。</p>
<h1 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">准备工作</span><br><span class="line">cd /home/www/</span><br><span class="line">mkdir nginx</span><br><span class="line">cd nginx/</span><br><span class="line">mkdir nginx</span><br><span class="line">mkdir zlib</span><br><span class="line">mkdir openssl</span><br><span class="line">mkdir pcre</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">如果没有安装gcc/gcc-c++，请执行：sudo apt-get install build-essential</span><br><span class="line">如果没有安装make，请执行：sudo apt-get install make</span><br><span class="line"></span><br><span class="line">Step <span class="number">1</span>：编译安装Pcre包 (rewrite模块需要 pcre 库)</span><br><span class="line"><span class="number">1</span>.软件位于/software/pcre-<span class="number">8.38</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line"><span class="number">2</span>.拷贝软件到目标机器<span class="string">"/home/www/nginx/pcre/"</span>目录</span><br><span class="line"><span class="number">3</span>.顺序执行以下脚本</span><br><span class="line"></span><br><span class="line">cd /home/www/nginx/pcre/</span><br><span class="line">tar -xzvf pcre-<span class="number">8.38</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line">cd pcre-<span class="number">8.38</span>/</span><br><span class="line">./configure</span><br><span class="line">sudo make</span><br><span class="line">#有可能需要输入密码</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Step <span class="number">2</span>：编译安装Zlib (gzip模块需要 zlib 库)</span><br><span class="line"><span class="number">1</span>.软件位于/software/zlib-<span class="number">1.2</span>.<span class="number">8</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line"><span class="number">2</span>.拷贝软件到目标机器<span class="string">"/home/www/nginx/zlib/"</span>目录</span><br><span class="line"><span class="number">3</span>.顺序执行以下脚本</span><br><span class="line"></span><br><span class="line">cd /home/www/nginx/zlib/</span><br><span class="line">tar -xzvf zlib-<span class="number">1.2</span>.<span class="number">8</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line">cd zlib-<span class="number">1.2</span>.<span class="number">8</span>/</span><br><span class="line">./configure</span><br><span class="line">sudo make</span><br><span class="line">#有可能需要输入密码</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">Step <span class="number">2</span>：编译安装OpenSSL (ssl 功能需要openssl库)</span><br><span class="line"><span class="number">1</span>.软件位于/software/openssl-<span class="number">1.1</span>.<span class="number">0</span>-pre4<span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line"><span class="number">2</span>.拷贝软件到目标机器<span class="string">"/home/www/nginx/openssl/"</span>目录</span><br><span class="line"><span class="number">3</span>.顺序执行以下脚本</span><br><span class="line"></span><br><span class="line">cd /home/www/nginx/openssl/</span><br><span class="line">tar -xzvf openssl-<span class="number">1.1</span>.<span class="number">0</span>-pre4<span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line">cd openssl-<span class="number">1.1</span>.<span class="number">0</span>-pre4/</span><br><span class="line">./config</span><br><span class="line">sudo make</span><br><span class="line">#命令执行时间超过<span class="number">5</span>分钟，耐心等待</span><br><span class="line">sudo make install</span><br><span class="line">#命令执行时间超过<span class="number">5</span>分钟，耐心等待</span><br><span class="line"></span><br><span class="line">Step <span class="number">3</span>：编译安装Nginx</span><br><span class="line"><span class="number">1</span>.软件位于/software/nginx-<span class="number">1.9</span>.<span class="number">14</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line"><span class="number">2</span>.拷贝软件到目标机器<span class="string">"/home/www/nginx/nginx/"</span>目录</span><br><span class="line"><span class="number">3</span>.顺序执行以下脚本</span><br><span class="line"></span><br><span class="line">cd /home/www/nginx/nginx/</span><br><span class="line">tar -xzvf nginx-<span class="number">1.9</span>.<span class="number">14</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line">cd nginx-<span class="number">1.9</span>.<span class="number">14</span>/</span><br><span class="line"></span><br><span class="line">sed -<span class="selector-tag">i</span> -e <span class="string">'s/1.9.14//g'</span> -e <span class="string">'s/nginx\//ERROR/g'</span> -e <span class="string">'s/"NGINX"/"ERROR"/g'</span> src/core/nginx<span class="selector-class">.h</span></span><br><span class="line"></span><br><span class="line">./configure --prefix=/home/www/nginx/nginx --with-http_realip_module --with-http_sub_module --with-http_flv_module --with-http_dav_module --with-http_gzip_static_module --with-http_stub_status_module --with-http_addition_module --with-pcre=/home/www/nginx/pcre/pcre-<span class="number">8.38</span> --with-openssl=/home/www/nginx/openssl/openssl-<span class="number">1.1</span>.<span class="number">0</span>-pre4 --with-http_ssl_module --with-zlib=/home/www/nginx/zlib/zlib-<span class="number">1.2</span>.<span class="number">8</span></span><br><span class="line"></span><br><span class="line">sudo make</span><br><span class="line">#命令执行时间超过<span class="number">5</span>分钟，耐心等待</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">Step <span class="number">4</span>：安装补丁(对应用服务器进行监控)</span><br><span class="line">cd /home/www/nginx/nginx/</span><br><span class="line">mkdir patch</span><br><span class="line">补丁文件位于/software/patch目录，拷贝目录下的所有文件到：/home/www/nginx/nginx/patch/</span><br><span class="line">cd /home/www/nginx/nginx/nginx-<span class="number">1.9</span>.<span class="number">14</span>/src/</span><br><span class="line">patch -p1 &lt; /home/www/nginx/nginx/patch/nginx_upstream_check_module-master/check_1.<span class="number">9.2</span>+<span class="selector-class">.patch</span></span><br><span class="line">cd ..</span><br><span class="line">./configure --prefix=/home/www/nginx/nginx --with-http_realip_module --with-http_sub_module --with-http_flv_module --with-http_dav_module --with-http_gzip_static_module --with-http_stub_status_module --with-http_addition_module --with-pcre=/home/www/nginx/pcre/pcre-<span class="number">8.38</span> --with-openssl=/home/www/nginx/openssl/openssl-<span class="number">1.1</span>.<span class="number">0</span>-pre4 --with-http_ssl_module --with-zlib=/home/www/nginx/zlib/zlib-<span class="number">1.2</span>.<span class="number">8</span> --add-module=/home/www/nginx/nginx/patch/nginx_upstream_check_module-master/</span><br><span class="line">sudo make</span><br><span class="line">#命令执行时间超过<span class="number">5</span>分钟，耐心等待</span><br><span class="line">sudo make install</span><br><span class="line">cd /home/www/nginx/nginx/sbin/</span><br><span class="line">sudo rm -f nginx<span class="selector-class">.old</span></span><br><span class="line"></span><br><span class="line">Step <span class="number">5</span>：配置</span><br><span class="line">配置文件位于：conf/nginx<span class="selector-class">.conf</span></span><br><span class="line">将该文件拷贝到：/home/www/nginx/nginx/conf/目录下，遇到文件已存在时，直接覆盖。</span><br><span class="line"></span><br><span class="line">确保可以访问到后端tomcat开放的端口，telnet</span><br><span class="line">修改配置文件nginx<span class="selector-class">.conf</span>,“upstream  xws”改为实际的tomcat运行环境</span><br><span class="line"></span><br><span class="line">cd /home/www/nginx/nginx/</span><br><span class="line">mkdir ssl</span><br><span class="line">cd ssl</span><br><span class="line">SSL证书文件位于：ssl/www<span class="selector-class">.abcde</span><span class="selector-class">.com</span><span class="selector-class">.crt</span>，ssl/www<span class="selector-class">.abcde</span><span class="selector-class">.com</span><span class="selector-class">.key</span></span><br><span class="line">将这<span class="number">2</span>个文件拷贝到/home/www/nginx/nginx/ssl/目录下</span><br><span class="line"></span><br><span class="line">Step <span class="number">6</span>：运行</span><br><span class="line">确保系统的<span class="number">80</span>、<span class="number">443</span>端口处于空闲状态。netstat</span><br><span class="line">确保/home/www/nginx/nginx/logs/目录具备读写权限。</span><br><span class="line">确保/home/www/nginx/nginx/ssl/www<span class="selector-class">.abcde</span><span class="selector-class">.com</span><span class="selector-class">.crt</span>具备读权限。</span><br><span class="line">确保/home/www/nginx/nginx/ssl/www<span class="selector-class">.abcde</span><span class="selector-class">.com</span><span class="selector-class">.key</span>具备读权限。</span><br><span class="line">确保/home/www/nginx/nginx/sbin/nginx文件具备可执行权限。</span><br><span class="line"></span><br><span class="line">cd /home/www/nginx/nginx/sbin/</span><br><span class="line">sudo ./nginx</span><br><span class="line"></span><br><span class="line">Step <span class="number">7</span>：验证</span><br><span class="line"><span class="number">1</span>.pcre包安装的正确性</span><br><span class="line"></span><br><span class="line">cd /home/www/nginx/pcre/</span><br><span class="line">./pcre-config --version</span><br><span class="line">有版本号输出则安装成功。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.openssl包安装的正确性</span><br><span class="line">cd /home/www/nginx/openssl/openssl-<span class="number">1.1</span>.<span class="number">0</span>-pre4/</span><br><span class="line">openssl version –<span class="selector-tag">a</span></span><br><span class="line">有版本号输出则安装成功。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.nginx包安装的正确性</span><br><span class="line">cd /home/www/nginx/nginx/nginx-<span class="number">1.9</span>.<span class="number">14</span>/objs</span><br><span class="line">./nginx -V</span><br><span class="line">##也可以使用：./nginx -t</span><br><span class="line">有配置详情输出则安装成功。</span><br><span class="line"></span><br><span class="line">卸载</span><br><span class="line"><span class="number">1</span>.停止nginx的运行</span><br><span class="line">cd /home/www/nginx/nginx/sbin/</span><br><span class="line">sudo ./nginx -s stop</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.删除文件</span><br><span class="line">cd /home/www/</span><br><span class="line">rm -rf nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">监控</span><br><span class="line">进入到与nginx部署机器的局域网络</span><br><span class="line">浏览器访问：http:<span class="comment">//nginx主机的局域网ip/nginxStatus/</span></span><br></pre></td></tr></table></figure>
<p>贴出nginx.cof</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#你所看到的这个文件，是nginx的工作配置文件，不要轻易改动。</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">4</span>;</span><br><span class="line"><span class="attribute">error_log</span>  logs/error.log;</span><br><span class="line"><span class="attribute">pid</span>        logs/nginx.pid;</span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">65535</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">client_body_timeout</span>   <span class="number">10</span>;</span><br><span class="line">    <span class="attribute">client_header_timeout</span>  <span class="number">30</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>     <span class="number">30</span>  <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">send_timeout</span> <span class="number">10</span>;</span><br><span class="line">    <span class="attribute">client_body_buffer_size</span>  <span class="number">64K</span>;</span><br><span class="line">    <span class="attribute">client_header_buffer_size</span>  <span class="number">128k</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span>  <span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">large_client_header_buffers</span>  <span class="number">4</span>  <span class="number">128k</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># gzip压缩功能设置</span></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">1k</span>;</span><br><span class="line">    <span class="attribute">gzip_buffers</span>    <span class="number">4</span> <span class="number">16k</span>;</span><br><span class="line">    <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">6</span>;</span><br><span class="line">    <span class="attribute">gzip_types</span> text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</span><br><span class="line">    <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置单个IP在每秒请求数不能超过20次</span></span><br><span class="line">    <span class="attribute">limit_req_zone</span> <span class="variable">$binary_remote_addr</span> zone=one:<span class="number">20m</span> rate=20r/s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置单个IP同时连接数</span></span><br><span class="line">    <span class="attribute">limit_conn_zone</span> <span class="variable">$binary_remote_addr</span> zone=addr:<span class="number">20m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 设定负载均衡方式：RR模式</span></span><br><span class="line">    <span class="attribute">upstream</span>  xws  &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:6080</span> weight=<span class="number">1</span> max_fails=<span class="number">5</span> fail_timeout=<span class="number">10s</span> ;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:7080</span> weight=<span class="number">1</span> max_fails=<span class="number">5</span> fail_timeout=<span class="number">10s</span> ;</span><br><span class="line">        <span class="attribute">check</span> interval=<span class="number">3000</span> rise=<span class="number">2</span> fall=<span class="number">5</span> timeout=<span class="number">1000</span> type=http;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 虚拟主机配置</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">        <span class="comment">#root   /apps/oaapp;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl default_server;</span><br><span class="line">        <span class="attribute">server_name</span> www.abcde.com;</span><br><span class="line">        <span class="attribute">ssl_certificate</span>  /home/www/nginx/nginx/ssl/yourCAcrt.crt;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  /home/www/nginx/nginx/ssl/yourCAkey.key;</span><br><span class="line">        <span class="attribute">ssl_session_timeout</span>  <span class="number">10m</span>;</span><br><span class="line">        <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">        <span class="attribute">ssl_ciphers</span> <span class="string">"ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4"</span>;</span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">        <span class="attribute">access_log</span>  logs/xws.access.log  main;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$request_method</span> !<span class="regexp">~ ^(GET|HEAD|POST)$)</span> &#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#对所有URL做负载均衡+反向代理</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="comment">#root   /apps/oaapp;</span></span><br><span class="line">            <span class="comment">#index  index.jsp index.html index.htm;</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://xws;</span><br><span class="line">            <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">            <span class="comment"># 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span>  Host  <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>  X-Real-IP  <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>  X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="attribute">proxy_next_upstream</span> <span class="literal">error</span> timeout invalid_header http_500 http_502 http_503 http_504;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">limit_conn</span> addr <span class="number">2</span>;</span><br><span class="line">            <span class="attribute">limit_req</span> zone=one burst=<span class="number">5</span> nodelay;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#静态文件，nginx自己处理，不去backend请求tomcat</span></span><br><span class="line">        <span class="comment">#location  ~* /download/ &#123;</span></span><br><span class="line">        <span class="comment">#    root /apps/oa/fs;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#location ~ .*\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$</span></span><br><span class="line">        <span class="comment">#&#123;</span></span><br><span class="line">        <span class="comment">#    root /apps/oaapp;</span></span><br><span class="line">        <span class="comment">#    expires      7d;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 为内网IP开放nginx状态监控</span></span><br><span class="line">        <span class="attribute">location</span> /nginxStatus &#123;</span><br><span class="line">            <span class="attribute">stub_status</span> <span class="literal">on</span>;</span><br><span class="line">            <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">            <span class="attribute">allow</span> <span class="number">192.168.1.0</span>/<span class="number">24</span>;</span><br><span class="line">            <span class="attribute">deny</span> all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ ^/(WEB-INF)/</span> &#123;</span><br><span class="line">            <span class="attribute">deny</span> all;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#error_page 404              /404.html;</span></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="踩到的一些坑"><a href="#踩到的一些坑" class="headerlink" title="踩到的一些坑"></a>踩到的一些坑</h1><h2 id="400-x16-x03"><a href="#400-x16-x03" class="headerlink" title="400 \x16\x03"></a>400 \x16\x03</h2><p>同一个server节点，配置：<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute"><span class="nomarkup">listen</span></span> 80 default_server;</span><br><span class="line"><span class="attribute"><span class="nomarkup">listen</span></span> 443 ssl default_server;</span><br></pre></td></tr></table></figure></p>
<h2 id="调试Https"><a href="#调试Https" class="headerlink" title="调试Https"></a>调试Https</h2><p>如果CA证书签发的域名是：www.abcde.com，为了在线下调试，假设将nginx部署在局域网IP：192.168.1.188，我们可以将本机的hosts文件修改一下，文件位于：C:\Windows\System32\drivers\etc\hosts。加上一行记录：“192.168.1.188 www.abcde.com”，保存后退出。再到本机的cmd命令行输入：ipconfig flushdns，退出cmd。等待几分钟后，在浏览器输入：<a href="https://www.abcde.com，即可在局域网调试啦！" target="_blank" rel="external">https://www.abcde.com，即可在局域网调试啦！</a></p>
<h2 id="ssl-protocols"><a href="#ssl-protocols" class="headerlink" title="ssl_protocols"></a>ssl_protocols</h2><p>如果nginx.conf在定义ssl_protocols时，用了一些比较过时的协议，比如：SSLV3，则会被chrome提示连接不安全。可以参考我的nginx.conf配置，事实上这些过时的协议都有一些可以被利用的漏洞，建议不要使用了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JOOQ 3.8.2 使用 教程：从入门到提高]]></title>
      <url>http://amao12580.github.io/post/2016/04/JOOQ-from-entry-to-improve/</url>
      <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>2016年后换了一家公司干，后台ORM框架用的JOOQ，完全陌生的东西。干这一行越久，越觉得有更多有趣的新事物需要去探索。想起小说<a href="https://book.douban.com/subject/26586492/" target="_blank" rel="external">《火星救援》</a>，Mark侥幸在火星风暴中幸存后，一步步将自己救出困境，遇到的难题或大或小，皆有优雅解决之法。一切看似偶然蹊跷，其实与Mark的长期知识储备分不开。所谓艺多不压身，应该在有限的时间里，得到更多成长，以期待机会来时不辜负。</p>
<p>下文中的学习示例代码，已经整理完毕：</p>
<ul>
<li><p>原味基础学习：<a href="https://github.com/amao12580/JOOQ" target="_blank" rel="external">https://github.com/amao12580/JOOQ</a></p>
</li>
<li><p>与Spring深度整合：<a href="https://github.com/amao12580/JOOQ-With-Spring" target="_blank" rel="external">https://github.com/amao12580/JOOQ-With-Spring</a></p>
</li>
</ul>
<h2 id="什么是JOOQ？"><a href="#什么是JOOQ？" class="headerlink" title="什么是JOOQ？"></a>什么是JOOQ？</h2><p><a href="http://www.jooq.org/" target="_blank" rel="external">JOOQ</a>，全称Java Object Oriented Querying，即面向Java对象查询。它是<a href="http://www.datageekery.com/" target="_blank" rel="external">Data Geekery</a>公司研发的DA方案(Data Access Layer)，主要解决两个问题：</p>
<ol>
<li>Hibernate的抽象使得我们离SQL太远，对SQL的掌控力度弱</li>
<li>JDBC又过于嘈杂，需要干的事情太多</li>
</ol>
<p>JOOQ希望干的就是在上述两者中寻找一个最佳的平衡。它依据数据库中的表生成DA相关的代码，开发者将生成的代码引入项目中即可使用。</p>
<p>有好几个版本</p>
<ul>
<li>OpenSource</li>
<li>Express</li>
<li>Professional</li>
<li>Enterprise</li>
</ul>
<p>OpenSource版本针对开源数据库，已经够用了。其它的几个版本针对非开源数据库，差异在于不同的后续支持。</p>
<p>想了解各版本的更多区别，跟我一起看吧。</p>
<ul>
<li><p><a href="http://www.jooq.org/legal/licensing" target="_blank" rel="external">http://www.jooq.org/legal/licensing</a></p>
</li>
<li><p><a href="http://www.jooq.org/download/" target="_blank" rel="external">http://www.jooq.org/download/</a></p>
</li>
</ul>
<p>JOOQ作为ORM框架，其原理是：在DAO层使用Java语言编写SQL语句，在Intellij IDEA的辅助下，复杂SQL的维护变得很容易。通过内部SQL Builder转换成数据库可执行的SQL文本，使用数据库驱动，提交SQL到RDBMS执行，接受处理结果，转换为POJO，返回到应用层。</p>
<p>它与Hibernate不同，不依赖使用字符串变量在Java代码中拼接SQL语句。在复杂SQL语句中，与变量的组合拼接时，SQL被割裂成多个部分，失去了宝贵的可读性，这简直是噩梦。而且Hibernate饱受诟病的连接查询配置复杂以及HQL语法的问题，在JOOQ中不复存在。</p>
<p>它与Mybatis不同，不依赖繁琐分散的XML进行SQL预定义。代码与SQL语句的分离，初衷是为了解决SQL嵌入代码时带来不直观的复杂性，但是分离的代价是维护工作倍增以及类型转换问题，经常遭遇到应用层代码变更，而XML定义未同步变更，IDE几乎无法解决。又或者开发人员改动一个XML文件，却意外影响多处上层代码，而这个问题很难避免。</p>
<p>更进一步的，JOOQ提供原生的类型安全转换，以及POJO维护，免去大量一次性代码的编写。当然，你也可以使用Eclipse<a href="http://my.oschina.net/lujianing/blog/200135" target="_blank" rel="external">代码生成插件</a>解决这个问题，但是如果ORM能自动解决(结合Maven Plugin)，为什么拒绝呢？</p>
<p>使用这种DAO模式，可以通过类的方式来进行数据库访问了。而且对SQL控制粒度加大的同时，维护工作并没有因此倍增，这对于开发人员是更好的解决方案，也是未来的趋势。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用JOOQ进行2张表内连接查询示例</span><br><span class="line"></span><br><span class="line">// Typesafely <span class="keyword">execute</span> the <span class="keyword">SQL</span> <span class="keyword">statement</span> directly <span class="keyword">with</span> jOOQ</span><br><span class="line"><span class="keyword">Result</span>&lt;Record3&lt;<span class="keyword">String</span>, <span class="keyword">String</span>, <span class="keyword">String</span>&gt;&gt; <span class="keyword">result</span> =</span><br><span class="line"><span class="keyword">create</span>.<span class="keyword">select</span>(BOOK.TITLE, AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME)</span><br><span class="line">    .<span class="keyword">from</span>(BOOK)</span><br><span class="line">    .<span class="keyword">join</span>(AUTHOR)</span><br><span class="line">    .<span class="keyword">on</span>(BOOK.AUTHOR_ID.equal(AUTHOR.<span class="keyword">ID</span>))</span><br><span class="line">    .<span class="keyword">where</span>(BOOK.PUBLISHED_IN.equal(<span class="number">1948</span>))</span><br><span class="line">    .<span class="keyword">fetch</span>();</span><br></pre></td></tr></table></figure>
<h3 id="VS-主流ORM框架"><a href="#VS-主流ORM框架" class="headerlink" title="VS 主流ORM框架"></a>VS 主流ORM框架</h3><ul>
<li><a href="http://blog.jooq.org/2015/03/24/jooq-vs-hibernate-when-to-choose-which/" target="_blank" rel="external">JOOQ vs. Hibernate: When to Choose Which</a></li>
<li><a href="http://blog.jooq.org/2013/07/13/sql-templating-with-jooq-or-mybatis/" target="_blank" rel="external">SQL Templating with jOOQ or MyBatis</a><h3 id="优势和局限性"><a href="#优势和局限性" class="headerlink" title="优势和局限性"></a>优势和局限性</h3></li>
</ul>
<p>优势</p>
<ul>
<li>JOOQ 高效的合并了复杂SQL、<a href="http://blog.jooq.org/2015/05/26/type-safe-queries-for-jpas-native-query-api/" target="_blank" rel="external">类型安全</a>、<a href="#Code-Generation">源码生成</a>、Active Records、存储过程以及高级数据类型的 Java 类库。支持DB2, Derby, Ingres, H2, HSQLDB, MySQL, Oracle, Postgres, SQLite, SQL Server, Sybase。</li>
</ul>
<p>局限性</p>
<ul>
<li>开发人员需要转换思维，接受新事物，May be better？</li>
</ul>
<h2 id="入门篇"><a href="#入门篇" class="headerlink" title="入门篇"></a>入门篇</h2><h3 id="With-MySQL"><a href="#With-MySQL" class="headerlink" title="With MySQL"></a>With MySQL</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MySQL JDBC driver, 数据库迁移等情况下需要. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.36<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Code-Generation"><a href="#Code-Generation" class="headerlink" title="Code Generation"></a>Code Generation</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--数据库schema代码生成器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jooq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jooq-codegen<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--数据库代码生成的插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Specify the maven code generator plugin --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jooq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jooq-codegen-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- The plugin should hook into the generate goal --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>generate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- JDBC connection parameters --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbc</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">driver</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">driver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>$</span><span class="template-variable">&#123;db.url&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user</span>&gt;</span>$</span><span class="template-variable">&#123;db.username&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>$</span><span class="template-variable">&#123;db.password&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbc</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Generator parameters --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">generator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">database</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>org.jooq.util.mysql.MySQLDatabase<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span>.*<span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">inputSchema</span>&gt;</span>$</span><span class="template-variable">&#123;db.schema&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">inputSchema</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">forcedTypes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">forcedType</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">name</span>&gt;</span>BOOLEAN<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">expression</span>&gt;</span>.*\.HANDMADE<span class="tag">&lt;/<span class="name">expression</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">types</span>&gt;</span>.*<span class="tag">&lt;/<span class="name">types</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">forcedType</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">forcedTypes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">database</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">packageName</span>&gt;</span>com.study.jooq.common.generated<span class="tag">&lt;/<span class="name">packageName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="With-Flyway"><a href="#With-Flyway" class="headerlink" title="With Flyway"></a>With Flyway</h3><p>Flyway 是独立于数据库的应用、管理并跟踪数据库变更的数据库版本管理工具。</p>
<p><a href="http://www.cnblogs.com/huang0925/p/4409506.html" target="_blank" rel="external">Flyway， 数据库Schema管理利器</a></p>
<p>在pom.xml的配置<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--防止maven改动IDE的language level --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据库迁移所用的参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">db.url</span>&gt;</span>jdbc:mysql://localhost:3306<span class="tag">&lt;/<span class="name">db.url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">db.username</span>&gt;</span>root<span class="tag">&lt;/<span class="name">db.username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">db.password</span>&gt;</span>********<span class="tag">&lt;/<span class="name">db.password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">db.schema</span>&gt;</span>study<span class="tag">&lt;/<span class="name">db.schema</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--数据库迁移, 同步的插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.flywaydb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flyway-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Note that we're executing the Flyway plugin in the "generate-sources" phase --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>migrate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Note that we need to prefix the db/migration path with filesystem:</span><br><span class="line">    to prevent Flyway from looking for our migration scripts only on the classpath --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>$</span><span class="template-variable">&#123;db.url&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user</span>&gt;</span>$</span><span class="template-variable">&#123;db.username&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>$</span><span class="template-variable">&#123;db.password&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$</span><span class="template-variable">&#123;project.build.sourceEncoding&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">schemas</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">schema</span>&gt;</span>$</span><span class="template-variable">&#123;db.schema&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">schemas</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">locations</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">location</span>&gt;</span>filesystem:src/main/resources/db/migration<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">locations</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>在工程：src/main/resources/db/migration目录下，没有目录文件夹时需要先创建文件夹。放入数据库初始化SQL脚本：V1__init_database.sql。注意在maven中配置的db.schema=study，表明需要使用的数据库名称是study，study需要事先不存在。</p>
<p>执行maven -clean、maven -install成功后，发现数据库有了新的数据库study，并且该数据库有了order、user、schema_version三张表，user、order是我们在脚本中定义需要生成的表，而schema_version是flyway生成的，维护数据库版本升级时的信息。对应的在代码中，生成了三个POJO。</p>
<p>代码生成示例：<br><img src="/img/jooq-flyway.png" alt="IDEA使用JOOQ自动生成代码"></p>
<h3 id="With-HikariCp"><a href="#With-HikariCp" class="headerlink" title="With HikariCp"></a>With HikariCp</h3><p>HikariCP号称是现在性能最好的JDBC连接池组件，具体的性能到底如何，我也没有仔细的测试过，不过从它现在的发展来看，其可能确实如它宣传的那样其性能高过目前所有的连接池组件。之前对连接池的记忆一直都是C3P0、DBCP、BoneCP，这三者中BoneCP的性能是最好的，C3P0的性能在现在来说确实是非常差的了，好像C3P0很久都没有更新了，所以我们应该杜绝在项目中使用C3P0，至于是否要使用HikariCP，我觉得可以尝试。HikariCP毕竟是才出来不久，其性能到底如何，也需要实践的检验，若是担心新东西有坑，我推荐使用BoneCP。Spring现在也集成了HikariCP，所以我觉得很有尝试它的必要。前不久我在项目中使用了HikariCP，也没出现什么问题，运行比较稳定。</p>
<p>HikariCP在github上的地址：<a href="https://github.com/brettwooldridge/HikariCP" target="_blank" rel="external">https://github.com/brettwooldridge/HikariCP</a></p>
<p><a href="http://blog.csdn.net/clementad/article/details/46928621" target="_blank" rel="external">为什么HikariCP被号称为性能最好的Java数据库连接池，如何配置使用?</a></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--JDBC连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="简单的CRUD"><a href="#简单的CRUD" class="headerlink" title="简单的CRUD"></a>简单的CRUD</h3><p>为保持example的干净与轻便，不使用Spring进行ORM层的管理，我采用<a href="http://www.oschina.net/question/12_10706" target="_blank" rel="external">ARM</a>的方式来管理SQL链接，在try with resource块结束后自动释放SQL链接。</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">try(ScopedContext scopedContext=<span class="keyword">new</span> ScopedContext())&#123;<span class="comment">//try with resource</span></span><br><span class="line">    DSLContext <span class="keyword">create</span>=scopedContext.getDSLContext();</span><br><span class="line">    int uid =<span class="number">180</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//add</span></span><br><span class="line">    UserRecord userRecord=<span class="keyword">create</span>.newRecord(USER);</span><br><span class="line">    userRecord.setAge((byte) <span class="number">18</span>);</span><br><span class="line">    userRecord.setMobile(<span class="string">"15985236985"</span>);</span><br><span class="line">    userRecord.setName(<span class="string">"赵六"</span>);</span><br><span class="line">    userRecord.setUid(uid);</span><br><span class="line">    userRecord.setSex((byte) <span class="number">1</span>);</span><br><span class="line">    userRecord.setPassword(<span class="keyword">String</span>.valueOf(<span class="keyword">System</span>.nanoTime()));</span><br><span class="line">    userRecord.setRegisterTime(<span class="keyword">new</span> Timestamp(<span class="keyword">System</span>.currentTimeMillis()));</span><br><span class="line">    int insertRet=userRecord.insert();<span class="comment">//执行insert sql</span></span><br><span class="line">    <span class="comment">//userRecord.store();//可能会执行insert，也有可能执行update，文档说明的很清晰</span></span><br><span class="line">    <span class="comment">//userRecord.refresh();//从数据库重新加载该记录</span></span><br><span class="line">    <span class="built_in">log</span>.info(<span class="string">"insertRet:&#123;&#125;"</span>, insertRet);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//index</span></span><br><span class="line">    int createIndexRet=<span class="keyword">create</span>.createIndex(<span class="string">"user_index_mobile_unique"</span>)</span><br><span class="line">            .on(USER, USER.MOBILE)</span><br><span class="line">            .execute();<span class="comment">//为手机号码字段创建唯一索引</span></span><br><span class="line">    int dropIndexRet=<span class="keyword">create</span>.dropIndex(<span class="string">"user_index_mobile_unique"</span>)</span><br><span class="line">            .on(USER)</span><br><span class="line">            .execute();<span class="comment">//删除索引</span></span><br><span class="line">    <span class="built_in">log</span>.info(<span class="string">"dropIndexRet:&#123;&#125;,createIndexRet:&#123;&#125;"</span>, dropIndexRet, createIndexRet);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//select</span></span><br><span class="line">    Record record=<span class="keyword">create</span>.<span class="built_in">select</span>(USER.NAME,USER.UID)</span><br><span class="line">            .from(USER)</span><br><span class="line">            .<span class="built_in">where</span>(USER.MOBILE.eq(<span class="string">"15985236985"</span>))</span><br><span class="line">            .limit(<span class="number">1</span>)</span><br><span class="line">            .fetchOne();</span><br><span class="line">    <span class="built_in">log</span>.info(<span class="string">"姓名:&#123;&#125;，uid:&#123;&#125;"</span>, record.getValue(USER.NAME), record.getValue(USER.UID));</span><br><span class="line"></span><br><span class="line">    Result&lt;UserRecord&gt; userRecords=<span class="keyword">create</span>.selectFrom(USER)</span><br><span class="line">            .<span class="built_in">where</span>(USER.SEX.eq((byte) <span class="number">1</span>).<span class="keyword">and</span>(USER.MOBILE.like(<span class="string">"159%"</span>)))</span><br><span class="line">            .orderBy(USER.MOBILE.asc()).limit(<span class="number">0</span>, <span class="number">20</span>).fetch();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (UserRecord ur:userRecords)&#123;</span><br><span class="line">        <span class="built_in">log</span>.info(<span class="string">"mobile:&#123;&#125;,uid:&#123;&#125;,registerTime:&#123;&#125;"</span>, ur.getMobile(), ur.getUid(), ur.getRegisterTime().getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//delete</span></span><br><span class="line">    int deleteRecordRet=<span class="keyword">create</span>.deleteFrom(USER).<span class="built_in">where</span>(USER.UID.eq(uid)).execute();</span><br><span class="line">    <span class="built_in">log</span>.info(<span class="string">"deleteRecordRet:&#123;&#125;"</span>, deleteRecordRet);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">日志打印信息：</span><br><span class="line"><span class="number">21</span>:<span class="number">01</span>:<span class="number">20.009</span> INFO  com.zaxxer.hikari.HikariDataSource <span class="number">72</span> &lt;init&gt; - Hikari pool HikariPool<span class="number">-0</span> is starting.</span><br><span class="line"><span class="number">21</span>:<span class="number">01</span>:<span class="number">20.561</span> INFO  org.jooq.tools.JooqLogger <span class="number">331</span> info -</span><br><span class="line"></span><br><span class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span></span><br><span class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span></span><br><span class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span>  <span class="comment">@@</span>        <span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span></span><br><span class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span>        <span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span></span><br><span class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span>  <span class="comment">@@</span>  <span class="comment">@@</span>    <span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span></span><br><span class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span>  <span class="comment">@@</span><span class="comment">@@</span>  <span class="comment">@@</span>  <span class="comment">@@</span>    <span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span></span><br><span class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span>        <span class="comment">@@</span>        <span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span></span><br><span class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span></span><br><span class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span></span><br><span class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span>        <span class="comment">@@</span>        <span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span></span><br><span class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span>    <span class="comment">@@</span>  <span class="comment">@@</span>  <span class="comment">@@</span><span class="comment">@@</span>  <span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span></span><br><span class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span>    <span class="comment">@@</span>  <span class="comment">@@</span>  <span class="comment">@@</span><span class="comment">@@</span>  <span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span></span><br><span class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span>        <span class="comment">@@</span>  <span class="comment">@  @</span>  <span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span></span><br><span class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span>        <span class="comment">@@</span>        <span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span></span><br><span class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@  @</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span></span><br><span class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span></span><br><span class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span>  Thank you <span class="keyword">for</span> using jOOQ <span class="number">3.8</span><span class="number">.2</span></span><br><span class="line"></span><br><span class="line"><span class="number">21</span>:<span class="number">01</span>:<span class="number">20.593</span> INFO  com.study.jooq.model.Example <span class="number">42</span> base - insertRet:<span class="number">1</span></span><br><span class="line"><span class="number">21</span>:<span class="number">01</span>:<span class="number">21.197</span> INFO  com.study.jooq.model.Example <span class="number">51</span> base - dropIndexRet:<span class="number">0</span>,createIndexRet:<span class="number">0</span></span><br><span class="line"><span class="number">21</span>:<span class="number">01</span>:<span class="number">21.278</span> INFO  com.study.jooq.model.Example <span class="number">59</span> base - 姓名:赵六，uid:<span class="number">180</span></span><br><span class="line"><span class="number">21</span>:<span class="number">01</span>:<span class="number">21.282</span> INFO  com.study.jooq.model.Example <span class="number">66</span> base - mobile:<span class="number">15925874536</span>,uid:<span class="number">102</span>,registerTime:<span class="number">1459331629000</span></span><br><span class="line"><span class="number">21</span>:<span class="number">01</span>:<span class="number">21.282</span> INFO  com.study.jooq.model.Example <span class="number">66</span> base - mobile:<span class="number">15985236985</span>,uid:<span class="number">180</span>,registerTime:<span class="number">1459429281000</span></span><br><span class="line"><span class="number">21</span>:<span class="number">01</span>:<span class="number">21.285</span> INFO  com.study.jooq.model.Example <span class="number">71</span> base - deleteRecordRet:<span class="number">1</span></span><br><span class="line"><span class="number">21</span>:<span class="number">01</span>:<span class="number">21.285</span> INFO  com.zaxxer.hikari.pool.HikariPool <span class="number">242</span> shutdown - Hikari pool HikariPool<span class="number">-0</span> is shutting down.</span><br><span class="line"><span class="number">21</span>:<span class="number">01</span>:<span class="number">21.331</span> INFO  com.zaxxer.hikari.util.ConcurrentBag <span class="number">197</span> add - ConcurrentBag has been closed, ignoring add()</span><br></pre></td></tr></table></figure>
<h2 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h2><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>在处理复杂SQL时，JOOQ的思路是由Java代码以<a href="http://www.jianshu.com/p/540711c1a507" target="_blank" rel="external">链式编程</a>的方式来解决可读性的问题。完全按照SQL语法来链式调用，简单到可怕！从未有过类似的API？</p>
<p>下文代码构建出的查询SQL，等价于：</p>
<p>SELECT<br>    <code>study</code>.<code>user</code>.<code>mobile</code>,<br>    <code>study</code>.<code>user</code>.<code>name</code>,<br>    <code>study</code>.<code>user</code>.<code>age</code>,<br>    <code>study</code>.<code>order</code>.<code>order_id</code>,<br>    <code>study</code>.<code>order</code>.<code>amout</code>,<br>    <code>study</code>.<code>order</code>.<code>order_time</code><br>FROM<br>    <code>study</code>.<code>user</code><br>LEFT OUTER JOIN <code>study</code>.<code>order</code> ON <code>study</code>.<code>user</code>.<code>uid</code> = <code>study</code>.<code>order</code>.<code>uid</code><br>WHERE<br>    (<br>        <code>study</code>.<code>user</code>.<code>uid</code> = 15874523<br>        AND <code>study</code>.<code>order</code>.<code>amout</code> &gt;= 1001<br>    )<br>LIMIT 10</p>
<p>可以发现SQL语句与代码保持了很高的相似性，可读性几乎没有损失。</p>
<p>其他的特性：group by与having、union、union all也都是在api级别支持的。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">try(ScopedContext scopedContext=<span class="literal">new</span> ScopedContext())&#123;<span class="comment">//try with resource</span></span><br><span class="line">    DSLContext create=scopedContext.getDSLContext();</span><br><span class="line">    int uid=<span class="number">15874523</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//join select</span></span><br><span class="line"></span><br><span class="line">    Result&lt;Record6&lt;<span class="built_in">String</span>,<span class="built_in">String</span>,Byte,<span class="built_in">Integer</span>,Long,Timestamp&gt;&gt; results=create</span><br><span class="line">            .<span class="keyword">select</span>(USER.MOBILE,USER.NAME,USER.AGE,<span class="keyword">ORDER</span>.ORDER_ID,<span class="keyword">ORDER</span>.AMOUT,<span class="keyword">ORDER</span>.ORDER_TIME)</span><br><span class="line">            .from(USER).leftOuterJoin(<span class="keyword">ORDER</span>)</span><br><span class="line">            .<span class="keyword">on</span>(USER.UID.<span class="literal">eq</span>(<span class="keyword">ORDER</span>.UID))</span><br><span class="line">            .<span class="keyword">where</span>(USER.UID.<span class="literal">eq</span>(uid).<span class="keyword">and</span>(<span class="keyword">ORDER</span>.AMOUT.ge(<span class="number">100</span>l)))</span><br><span class="line">            .limit(<span class="number">0</span>,<span class="number">10</span>).fetch();</span><br><span class="line">    for (Record6&lt;<span class="built_in">String</span>,<span class="built_in">String</span>,Byte,<span class="built_in">Integer</span>,Long,Timestamp&gt; record:results)&#123;</span><br><span class="line">        <span class="keyword">log</span>.info(<span class="string">"姓名:&#123;&#125;，手机号码:&#123;&#125;，年龄:&#123;&#125;，订单号:&#123;&#125;，订单金额:&#123;&#125;，订单时间:&#123;&#125;"</span>,</span><br><span class="line">        record.getValue(USER.NAME),record.getValue(USER.MOBILE),record.getValue(USER.AGE),</span><br><span class="line">        record.getValue(<span class="keyword">ORDER</span>.ORDER_ID),record.getValue(<span class="keyword">ORDER</span>.AMOUT),</span><br><span class="line">        record.getValue(<span class="keyword">ORDER</span>.ORDER_TIME));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">12</span>:<span class="number">51</span>:<span class="number">14.898</span> INFO  com.study.jooq.model.Example <span class="number">110</span> advance - 姓名:赵六，手机号码:<span class="number">18525874539</span>，年龄:<span class="number">18</span>，订单号:<span class="number">-1725080559</span>，订单金额:<span class="number">25000</span>，订单时间:<span class="number">1459486275000</span></span><br></pre></td></tr></table></figure></p>
<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>子查询API的使用稍显麻烦，对于内层table，如果在外层需要参与使用， alias需要在内层构建是指定。并且在外层使用时，也无法显式指定字段名，需要按照field的index值进行指定。</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">try (ScopedContext scopedContext = new ScopedContext()) &#123;//try with resource</span><br><span class="line">    DSLContext create = scopedContext.getDSLContext()<span class="comment">;</span></span><br><span class="line">    //查询指定多个用户的最新一个订单信息</span><br><span class="line">    Set&lt;Integer&gt; uids=new HashSet&lt;&gt;()<span class="comment">;</span></span><br><span class="line">    uids.add(<span class="number">10001</span>)<span class="comment">;</span></span><br><span class="line">    uids.add(<span class="number">10002</span>)<span class="comment">;</span></span><br><span class="line">    uids.add(<span class="number">10003</span>)<span class="comment">;</span></span><br><span class="line">    //构建内层查询语句</span><br><span class="line">    Table&lt;OrderRecord&gt; subTable = create.selectFrom(ORDER).</span><br><span class="line">            where(ORDER.UID.in(uids)).</span><br><span class="line">            orderBy(ORDER.ORDER_TIME.desc()).</span><br><span class="line">            asTable(<span class="string">"A"</span>)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    Result&lt;OrderRecord&gt; oreders = create.selectFrom(subTable).</span><br><span class="line">            groupBy(subTable.field(<span class="number">0</span>), subTable.field(<span class="number">1</span>)).//按照第一个、第二个字段进行group by</span><br><span class="line">            fetch()<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">构建完成的SQL语句：</span><br><span class="line">SELECT</span><br><span class="line">    `A`.`order_id`,</span><br><span class="line">    `A`.`uid`,</span><br><span class="line">    `A`.`amout`,</span><br><span class="line">    `A`.`status`,</span><br><span class="line">    `A`.`order_time`</span><br><span class="line">FROM</span><br><span class="line">    (</span><br><span class="line">        SELECT</span><br><span class="line">            `study`.`order`.`order_id`,</span><br><span class="line">            `study`.`order`.`uid`,</span><br><span class="line">            `study`.`order`.`amout`,</span><br><span class="line">            `study`.`order`.`status`,</span><br><span class="line">            `study`.`order`.`order_time`</span><br><span class="line">        FROM</span><br><span class="line">            `study`.`order`</span><br><span class="line">        WHERE</span><br><span class="line">            `study`.`order`.`uid` IN (<span class="number">10001</span>, <span class="number">10002</span>, <span class="number">10003</span>)</span><br><span class="line">        ORDER BY</span><br><span class="line">            `study`.`order`.`order_time` DESC</span><br><span class="line">    ) AS `A`</span><br><span class="line">GROUP BY</span><br><span class="line">    `A`.`order_id`,</span><br><span class="line">    `A`.`uid`;</span><br></pre></td></tr></table></figure>
<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>JOOQ目前并不支持类似Spring的声明式事务管理，暂时只支持由自身API提供的编程式事务管理。有关声明式事务管理与编程式事务管理的区别，请Follow：<a href="http://blog.csdn.net/u012228718/article/details/42750119#t1" target="_blank" rel="external">编程式事务与声明式事务</a>。但JOOQ作者Lukas Eder明确表示在未来的3.9版本中，会提供解决方案。</p>
<ul>
<li><p><a href="http://www.jooq.org/doc/3.8/manual/sql-execution/transaction-management/" target="_blank" rel="external">http://www.jooq.org/doc/3.8/manual/sql-execution/transaction-management/</a></p>
</li>
<li><p><a href="https://github.com/jOOQ/jOOQ/issues/4836" target="_blank" rel="external">https://github.com/jOOQ/jOOQ/issues/4836</a></p>
</li>
</ul>
<figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">try(ScopedContext scopedContext=new ScopedContext())&#123;<span class="comment">//try with resource</span></span><br><span class="line">    DSLContext create=scopedContext.getDSLContext()<span class="comment">;</span></span><br><span class="line">    final <span class="keyword">int</span>[] uid = new <span class="keyword">int</span>[<span class="number">1</span>]<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//transaction</span></span><br><span class="line"></span><br><span class="line">    create.transaction(configuration -&gt; &#123;</span><br><span class="line">        <span class="comment">//add</span></span><br><span class="line">        UserRecord userRecord=create.newRecord(USER)<span class="comment">;</span></span><br><span class="line">        userRecord.setAge((byte) <span class="number">18</span>)<span class="comment">;</span></span><br><span class="line">        userRecord.setMobile(<span class="string">"18525874539"</span>)<span class="comment">;</span></span><br><span class="line">        userRecord.setName(<span class="string">"赵六"</span>)<span class="comment">;</span></span><br><span class="line">        userRecord.setSex((byte) <span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">        userRecord.setPassword(String.valueOf(<span class="keyword">System</span>.nanoTime()))<span class="comment">;</span></span><br><span class="line">        userRecord.setRegisterTime(new Timestamp(<span class="keyword">System</span>.currentTimeMillis()))<span class="comment">;</span></span><br><span class="line">        <span class="keyword">int</span> insertUserRet=userRecord.insert()<span class="comment">;//执行insert sql</span></span><br><span class="line">        uid[<span class="number">0</span>] =userRecord.getUid()<span class="comment">;</span></span><br><span class="line">        log.info(<span class="string">"insertUserRet:&#123;&#125;"</span>, insertUserRet)<span class="comment">;</span></span><br><span class="line">        <span class="comment">//add</span></span><br><span class="line">        OrderRecord orderRecord=create.newRecord(ORDER)<span class="comment">;</span></span><br><span class="line">        orderRecord.setUid(userRecord.getUid())<span class="comment">;</span></span><br><span class="line">        orderRecord.setAmout(<span class="number">25000</span>l)<span class="comment">;</span></span><br><span class="line">        orderRecord.setOrderId(new BigDecimal(<span class="keyword">System</span>.nanoTime()).intValue())<span class="comment">;</span></span><br><span class="line">        orderRecord.setOrderTime(new Timestamp(<span class="keyword">System</span>.currentTimeMillis()))<span class="comment">;</span></span><br><span class="line">        orderRecord.setStatus((byte)<span class="number">0</span>)<span class="comment">;</span></span><br><span class="line">        <span class="keyword">int</span> insertOrderRet=orderRecord.insert()<span class="comment">;//执行insert sql</span></span><br><span class="line">        log.info(<span class="string">"insertOrderRet:&#123;&#125;"</span>, insertOrderRet)<span class="comment">;</span></span><br><span class="line">    &#125;)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">12</span>:<span class="number">51</span>:<span class="number">14.724</span> INFO  com.study.jooq.model.Example <span class="number">90</span> lambda$advance$<span class="number">0</span> - insertUserRet:<span class="number">1</span></span><br><span class="line"><span class="number">12</span>:<span class="number">51</span>:<span class="number">14.743</span> INFO  com.study.jooq.model.Example <span class="number">99</span> lambda$advance$<span class="number">0</span> - insertOrderRet:<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">//batchInsert</span><br><span class="line">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class="line">    DSLContext create=scopedContext.getDSLContext();</span><br><span class="line">    List<span class="variable">&lt;UserRecord&gt;</span> list=new ArrayList<span class="variable">&lt;&gt;</span>();</span><br><span class="line"></span><br><span class="line">     //batchInsert</span><br><span class="line">    UserRecord <span class="keyword">user</span>Record=create.newRecord(USER);</span><br><span class="line">    <span class="keyword">user</span>Record.<span class="built_in">set</span>Age((byte) <span class="number">18</span>);</span><br><span class="line">    <span class="keyword">user</span>Record.<span class="built_in">set</span>Mobile(<span class="string">"17058963215"</span>);</span><br><span class="line">    <span class="keyword">user</span>Record.<span class="built_in">set</span>Name(<span class="string">"赵六"</span>);</span><br><span class="line">    <span class="keyword">user</span>Record.<span class="built_in">set</span>Sex((byte) <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">user</span>Record.<span class="built_in">set</span>Password(String.valueOf(System.nanoTime()));</span><br><span class="line">    <span class="keyword">user</span>Record.<span class="built_in">set</span>RegisterTime(new Timestamp(System.currentTimeMillis()));</span><br><span class="line">    list.add(<span class="keyword">user</span>Record);</span><br><span class="line"></span><br><span class="line">    UserRecord <span class="keyword">user</span>Record2=create.newRecord(USER);</span><br><span class="line">    <span class="keyword">user</span>Record2.<span class="built_in">set</span>Age((byte) <span class="number">29</span>);</span><br><span class="line">    <span class="keyword">user</span>Record2.<span class="built_in">set</span>Mobile(<span class="string">"17058963216"</span>);</span><br><span class="line">    <span class="keyword">user</span>Record2.<span class="built_in">set</span>Name(<span class="string">"马七"</span>);</span><br><span class="line">    <span class="keyword">user</span>Record2.<span class="built_in">set</span>Sex((byte) <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">user</span>Record2.<span class="built_in">set</span>Password(String.valueOf(System.nanoTime()));</span><br><span class="line">    <span class="keyword">user</span>Record2.<span class="built_in">set</span>RegisterTime(new Timestamp(System.currentTimeMillis()));</span><br><span class="line">    list.add(<span class="keyword">user</span>Record2);</span><br><span class="line">    //使用batchInsert时，无法获取SQL语句</span><br><span class="line">    int insertRetArr[]=create.batchInsert(list).execute();//返回值是一个int数组，长度与输入的集合size有关。</span><br><span class="line"></span><br><span class="line">    <span class="keyword">log</span>.info(<span class="string">"insertRetArr:&#123;&#125;"</span>, Arrays.<span class="keyword">to</span>String(insertRetArr));//数组每个元素为<span class="number">1</span>时，执行成功</span><br><span class="line">    //使用batchInsert时，无法获取数据自增长的主键值</span><br><span class="line">    <span class="keyword">log</span>.info(<span class="string">"userRecord:uid:&#123;&#125;"</span>, <span class="keyword">user</span>Record.getUid());</span><br><span class="line">    <span class="keyword">log</span>.info(<span class="string">"userRecord2:uid:&#123;&#125;"</span>, <span class="keyword">user</span>Record2.getUid());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">user</span>Record.refresh();</span><br><span class="line">    <span class="keyword">user</span>Record2.refresh();</span><br><span class="line">    <span class="keyword">log</span>.info(<span class="string">"userRecord:uid:&#123;&#125;"</span>, <span class="keyword">user</span>Record.getUid());</span><br><span class="line">    <span class="keyword">log</span>.info(<span class="string">"userRecord2:uid:&#123;&#125;"</span>, <span class="keyword">user</span>Record2.getUid());</span><br><span class="line"></span><br><span class="line">    //batchUpdate</span><br><span class="line">    <span class="keyword">user</span>Record.<span class="built_in">set</span>Age((byte) <span class="number">38</span>);</span><br><span class="line">    <span class="keyword">user</span>Record2.<span class="built_in">set</span>Age((byte) <span class="number">78</span>);</span><br><span class="line">    list.clear();</span><br><span class="line">    list.add(<span class="keyword">user</span>Record);</span><br><span class="line">    list.add(<span class="keyword">user</span>Record2);</span><br><span class="line">    //使用batchUpdate时，无法获取SQL语句</span><br><span class="line">    int updateRetArr[]=create.batchUpdate(list).execute();//返回值是一个int数组，长度与输入的集合size有关。</span><br><span class="line">    <span class="keyword">log</span>.info(<span class="string">"updateRetArr:&#123;&#125;"</span>, Arrays.<span class="keyword">to</span>String(updateRetArr));//数组每个元素为<span class="number">1</span>时，执行成功</span><br><span class="line"></span><br><span class="line">    //batchDelete</span><br><span class="line">    //使用batchDelete时，无法获取SQL语句</span><br><span class="line">    int deleteRetArr[]=create.batchDelete(list).execute();//返回值是一个int数组，长度与输入的集合size有关。</span><br><span class="line">    <span class="keyword">log</span>.info(<span class="string">"deleteRetArr:&#123;&#125;"</span>, Arrays.<span class="keyword">to</span>String(deleteRetArr));//数组每个元素为<span class="number">1</span>时，执行成功</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">15</span>:<span class="number">06</span>:<span class="number">46.281</span> INFO  com.study.jooq.model.Example <span class="number">163</span> batch - insertRetArr:[<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"><span class="number">15</span>:<span class="number">06</span>:<span class="number">46.281</span> INFO  com.study.jooq.model.Example <span class="number">165</span> batch - <span class="keyword">user</span>Record:uid:null</span><br><span class="line"><span class="number">15</span>:<span class="number">06</span>:<span class="number">46.281</span> INFO  com.study.jooq.model.Example <span class="number">166</span> batch - <span class="keyword">user</span>Record2:uid:null</span><br><span class="line"><span class="number">15</span>:<span class="number">06</span>:<span class="number">46.287</span> INFO  com.study.jooq.model.Example <span class="number">176</span> batch - updateRetArr:[<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">15</span>:<span class="number">06</span>:<span class="number">46.291</span> INFO  com.study.jooq.model.Example <span class="number">182</span> batch - deleteRetArr:[<span class="number">0</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>对RDBMS内置函数，JOOQ提供了API进行调用，但JOOQ没有提供API对自定义函数进行显式的支持，这意味着不能通过JOOQ进行自定义函数的create/execute/drop。但是JOOQ支持直接执行拼接好的字符串SQL语句，这为我们进行函数execute提供了可行性。实际使用中，使用ORM层对数据库函数进行create/drop的需求几乎不存在。</p>
<h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">求平均数avg()</span><br><span class="line"></span><br><span class="line">Record record = create.select(USER.AGE.avg()).<span class="keyword">from</span>(USER).fetchOne();<span class="comment">//求用户的平均年龄</span></span><br><span class="line"><span class="keyword">if</span> (record != <span class="keyword">null</span>) &#123;</span><br><span class="line">    log.info(<span class="string">"平均年龄是:"</span> + record.<span class="keyword">into</span>(<span class="keyword">Double</span>.<span class="keyword">class</span>).toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><p>在Mysql中添加自定义函数，你也可以使用Flyway的方式来做，在migration文件夹下加一个V2 sql文件。重新执行maven-install即可生效，实际上我更推荐使用这种方式来进行数据库历史SQL执行管理。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> <span class="title">study</span>;</span><br><span class="line">DROP <span class="function"><span class="keyword">FUNCTION</span> <span class="title">IF</span> <span class="title">EXISTS</span> <span class="title">formatDate</span></span>;</span><br><span class="line"></span><br><span class="line">DELIMITER <span class="comment">//</span></span><br><span class="line">CREATE <span class="function"><span class="keyword">FUNCTION</span> <span class="title">formatDate</span><span class="params">(fdate datetime)</span></span><br><span class="line"><span class="title">RETURNS</span> <span class="title">VARCHAR</span><span class="params">(<span class="number">255</span>)</span></span><br><span class="line"><span class="title">RETURN</span> <span class="title">date_format</span><span class="params">(fdate,<span class="string">'%Y年%m月%d日%h时%i分%s秒'</span>)</span></span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line">SELECT formatDate(NOW()) <span class="keyword">AS</span> <span class="string">'时间'</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 使用JOOQ进行函数execute</span><br><span class="line"><span class="keyword">try</span>(ScopedContext scopedContext=<span class="keyword">new</span> ScopedContext())&#123;<span class="comment">//try with resource</span></span><br><span class="line">    DSLContext create=scopedContext.getDSLContext();</span><br><span class="line">    <span class="comment">//formatDate是我们在mysql里自定义的函数</span></span><br><span class="line">    Result&lt;Record&gt; results=create.fetch(<span class="string">"SELECT formatDate(NOW()) AS '时间';"</span>);</span><br><span class="line">    <span class="keyword">for</span> (Record record:results)&#123;</span><br><span class="line">        log.info(<span class="string">"执行结果:&#123;&#125;"</span>,record.getValue(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">15</span>:<span class="number">54</span>:<span class="number">28.815</span> INFO  com.study.jooq.model.Example <span class="number">199</span> <span class="function"><span class="keyword">function</span> - 执行结果:2016年04月01日03时54分28秒</span></span><br></pre></td></tr></table></figure>
<h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p>存储过程同函数一样，没有进行显式的create/drop支持。<br><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 先在Mysql中添加存储过程</span><br><span class="line">USE study;</span><br><span class="line">DROP <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">IF</span> <span class="title">EXISTS</span> <span class="title">getAllUid</span>;</span></span><br><span class="line"></span><br><span class="line">DELIMITER //</span><br><span class="line">CREATE <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">getAllUid</span><span class="params">()</span></span><br><span class="line"><span class="title">BEGIN</span></span><br><span class="line">  <span class="title">SELECT</span> <span class="title">uid</span> <span class="title">FROM</span> <span class="title">user</span>;</span></span><br><span class="line"><span class="keyword">END</span>//</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line">CALL getAllUid();</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 使用JOOQ进行存储过程execute</span><br><span class="line">try(ScopedContext scopedContext=new ScopedContext())&#123;//try <span class="keyword">with</span> resource</span><br><span class="line">    DSLContext create=scopedContext.getDSLContext();</span><br><span class="line">    //getAllUid是我们在mysql里定义的存储过程</span><br><span class="line">    Result&lt;Record&gt; results=create.fetch(<span class="string">"CALL getAllUid()"</span>);</span><br><span class="line">    <span class="keyword">for</span> (Record record:results)&#123;</span><br><span class="line">        log.info(<span class="string">"执行结果:&#123;&#125;"</span>,record.getValue(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">16</span>:<span class="number">08</span>:<span class="number">19.333</span> INFO  com.study.jooq.model.Example <span class="number">211</span> <span class="function"><span class="keyword">procedure</span> - 执行结果:</span><span class="number">100</span></span><br><span class="line"><span class="number">16</span>:<span class="number">08</span>:<span class="number">19.333</span> INFO  com.study.jooq.model.Example <span class="number">211</span> <span class="function"><span class="keyword">procedure</span> - 执行结果:</span><span class="number">102</span></span><br><span class="line"><span class="number">16</span>:<span class="number">08</span>:<span class="number">19.334</span> INFO  com.study.jooq.model.Example <span class="number">211</span> <span class="function"><span class="keyword">procedure</span> - 执行结果:</span><span class="number">101</span></span><br></pre></td></tr></table></figure></p>
<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>通过代码构建视图后，JOOQ不能自动生成视图对应的实体类，需要手工做一次maven -install。以下示例中会生成类文件：Userwithorder.java<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">try(ScopedContext scopedContext=<span class="literal">new</span> ScopedContext())&#123;<span class="comment">//try with resource</span></span><br><span class="line">    DSLContext create=scopedContext.getDSLContext();</span><br><span class="line">    <span class="comment">//创建视图</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义视图名称为：userwithorder</span></span><br><span class="line">    CreateViewFinalStep step=create.createView(<span class="string">"userwithorder"</span>,USER.UID.getName(),USER.NAME.getName(),<span class="keyword">ORDER</span>.ORDER_ID.getName(),<span class="keyword">ORDER</span>.STATUS.getName(),<span class="keyword">ORDER</span>.AMOUT.getName())</span><br><span class="line">            .as(</span><br><span class="line">                    create.<span class="keyword">select</span>(USER.UID, USER.NAME, <span class="keyword">ORDER</span>.ORDER_ID, <span class="keyword">ORDER</span>.STATUS, <span class="keyword">ORDER</span>.AMOUT)</span><br><span class="line">                            .from(USER)</span><br><span class="line">                            .leftOuterJoin(<span class="keyword">ORDER</span>)</span><br><span class="line">                            .<span class="keyword">on</span>(USER.UID.<span class="literal">eq</span>(<span class="keyword">ORDER</span>.UID))</span><br><span class="line">            );</span><br><span class="line">    <span class="keyword">log</span>.info(<span class="string">"SQL:&#123;&#125;"</span>,step.getSQL());</span><br><span class="line">    int ret=step.execute();</span><br><span class="line">    <span class="keyword">log</span>.info(<span class="string">"创建视图,执行结果:&#123;&#125;"</span>,ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询视图</span></span><br><span class="line">    Result&lt;Record3&lt;<span class="built_in">Integer</span>,<span class="built_in">String</span>,<span class="built_in">Integer</span>&gt;&gt; results=create.<span class="keyword">select</span>(USERWITHORDER.UID,USERWITHORDER.NAME,USERWITHORDER.ORDER_ID)</span><br><span class="line">            .from(USERWITHORDER).<span class="keyword">where</span>(USERWITHORDER.AMOUT.ge(<span class="number">200</span>l)).fetch();</span><br><span class="line">    for (Record3&lt;<span class="built_in">Integer</span>,<span class="built_in">String</span>,<span class="built_in">Integer</span>&gt; record:results)&#123;</span><br><span class="line">        <span class="keyword">log</span>.info(<span class="string">"uid:&#123;&#125;，姓名:&#123;&#125;，订单号:&#123;&#125;"</span>,</span><br><span class="line">                record.getValue(USERWITHORDER.UID),record.getValue(USERWITHORDER.NAME),record.getValue(USERWITHORDER.ORDER_ID));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除视图</span></span><br><span class="line">    int dropRet=create.dropView(<span class="string">"userwithorder"</span>).execute();</span><br><span class="line">    <span class="keyword">log</span>.info(<span class="string">"删除视图,执行结果:&#123;&#125;"</span>,dropRet);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">16</span>:<span class="number">54</span>:<span class="number">10.597</span> INFO  com.study.jooq.model.Example <span class="number">231</span> view - SQL:create view <span class="string">`userwithorder`</span>(<span class="string">`uid`</span>, <span class="string">`name`</span>, <span class="string">`order_id`</span>, <span class="string">`status`</span>, <span class="string">`amout`</span>) as <span class="keyword">select</span> <span class="string">`study`</span>.<span class="string">`user`</span>.<span class="string">`uid`</span>, <span class="string">`study`</span>.<span class="string">`user`</span>.<span class="string">`name`</span>, <span class="string">`study`</span>.<span class="string">`order`</span>.<span class="string">`order_id`</span>, <span class="string">`study`</span>.<span class="string">`order`</span>.<span class="string">`status`</span>, <span class="string">`study`</span>.<span class="string">`order`</span>.<span class="string">`amout`</span> from <span class="string">`study`</span>.<span class="string">`user`</span> left outer <span class="keyword">join</span> <span class="string">`study`</span>.<span class="string">`order`</span> <span class="keyword">on</span> <span class="string">`study`</span>.<span class="string">`user`</span>.<span class="string">`uid`</span> = <span class="string">`study`</span>.<span class="string">`order`</span>.<span class="string">`uid`</span></span><br><span class="line"><span class="number">16</span>:<span class="number">54</span>:<span class="number">10.712</span> INFO  com.study.jooq.model.Example <span class="number">233</span> view - 创建视图,执行结果:<span class="number">0</span></span><br><span class="line"><span class="number">16</span>:<span class="number">54</span>:<span class="number">10.760</span> INFO  com.study.jooq.model.Example <span class="number">239</span> view - uid:<span class="number">100</span>，姓名:张三，订单号:<span class="number">200</span></span><br><span class="line"><span class="number">16</span>:<span class="number">54</span>:<span class="number">10.761</span> INFO  com.study.jooq.model.Example <span class="number">239</span> view - uid:<span class="number">100</span>，姓名:张三，订单号:<span class="number">201</span></span><br><span class="line"><span class="number">16</span>:<span class="number">54</span>:<span class="number">10.761</span> INFO  com.study.jooq.model.Example <span class="number">239</span> view - uid:<span class="number">101</span>，姓名:李四，订单号:<span class="number">202</span></span><br><span class="line"><span class="number">16</span>:<span class="number">54</span>:<span class="number">10.765</span> INFO  com.study.jooq.model.Example <span class="number">244</span> view - 删除视图,执行结果:<span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>有时候可能需要在SQL中，对字段(或字段之间)进行加减乘除等运算操作。</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">需求示例，在箱子规格表(不重复)中，找出前十条，按照箱子的容积的最大值(<span class="built_in">int</span> <span class="number">11</span>)与最小值(<span class="built_in">int</span> <span class="number">11</span>)范围，与给定值(<span class="number">528</span>)进行比较排序，找出最接近的十条。</span><br><span class="line">select * <span class="keyword">from</span> box</span><br><span class="line">    where min_size&lt;=<span class="number">528</span> <span class="keyword">and</span> max_size&gt;=<span class="number">528</span></span><br><span class="line">    order by ((min_size+max_size)/<span class="number">2</span>)-<span class="number">528</span> asc</span><br><span class="line">    limit <span class="number">0</span>,<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">使用<span class="type">JOOQ</span>完全可以满足这样的要求</span><br><span class="line"><span class="keyword">try</span>(<span class="type">ScopedContext</span> scopedContext=new <span class="type">ScopedContext</span>())&#123;//<span class="keyword">try</span> <span class="keyword">with</span> resource</span><br><span class="line">    <span class="type">DSLContext</span> create=scopedContext.getDSLContext();</span><br><span class="line">    <span class="built_in">int</span> conditionSize=<span class="number">528</span>;</span><br><span class="line">    <span class="built_in">int</span> pageNo=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int</span> pageSize=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">SortField</span> sortFieldBySize = ((((<span class="type">BOX</span>.<span class="type">MAX_SIZE</span>.add(<span class="type">BOX</span>.<span class="type">MIN_SIZE</span>)).divide(<span class="number">2</span>)).</span><br><span class="line">    minus(conditionSize)).asc();</span><br><span class="line"></span><br><span class="line">    <span class="type">Result</span> <span class="literal">result</span>=create.selectFrom(<span class="type">BOX</span>).</span><br><span class="line">    where(<span class="type">BOX</span>.<span class="type">MIN_SIZE</span>.lessOrEqual(conditionSize)).</span><br><span class="line">    <span class="keyword">and</span>(<span class="type">BOX</span>.<span class="type">MAX_SIZE</span>.greaterOrEqual(conditionSize)).</span><br><span class="line">    orderBy(sortFieldBySize).</span><br><span class="line">    limit((pageNo-<span class="number">1</span>) * pageSize, pageSize).</span><br><span class="line">    fetch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="高级篇"><a href="#高级篇" class="headerlink" title="高级篇"></a>高级篇</h2><p>这部分面向于对JOOQ保持更多热情的读者，谈到JOOQ的高阶特性，这些特性在企业级开发中往往会用的很多，但对于个人开发者可能就没那么重要了。因此个人开发者可以选择性的阅读。</p>
<p>推荐企业在大面积应用JOOQ之前详细阅读这部分的内容，以更好的在生产环境稳定使用。</p>
<h3 id="重复使用Statement"><a href="#重复使用Statement" class="headerlink" title="重复使用Statement"></a>重复使用Statement</h3><p>数据库系统对SQL语句的处理一般会经过如下过程。</p>
<ul>
<li>1.查询解析器（Query parser）：用于检查查询是否合法</li>
<li>2.查询重写器（Query rewriter）：用于预优化查询</li>
<li>3.查询优化器（Query optimizer）：用于优化查询</li>
<li>4.查询执行器（Query executor）：用于编译和执行查询</li>
</ul>
<p>PreparedStatement是java.sql包下面的一个接口，用来执行SQL语句查询，通过调用connection.preparedStatement(sql)方法可以获得PreparedStatment对象。数据库系统会对sql语句进行预编译处理（如果JDBC驱动支持的话），预处理语句将被预先编译好，这条预编译的sql查询语句能在将来的查询中重用，这样一来，它比Statement对象生成的查询速度更快。</p>
<p>对比以上4条处理过程，复用的PreparedStatement对象，将直接跳过3.5步（最后一步的编译部分也跳过啦），直接被数据库执行，对于复杂并且高频率执行的SQL，这将极大的提高TPS！</p>
<p>在JDBC中如何做？</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取PreparedStatement对象，此时数据库已经将String类型的SQL预编译过了。</span></span><br><span class="line"><span class="selector-tag">try</span> (PreparedStatement stmt = connection.prepareStatement(<span class="string">"SELECT 1 FROM DUAL"</span>)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一次使用，获取结果集</span></span><br><span class="line">    <span class="selector-tag">try</span> (ResultSet rs1 = stmt.executeQuery()) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不关闭，再次使用，获取结果集（此时结果集可能发生了变化）</span></span><br><span class="line">    <span class="selector-tag">try</span> (ResultSet rs2 = stmt.executeQuery()) &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在JOOQ中如何做？</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重复使用Statement</span></span><br><span class="line">try (ScopedContext scopedContext = <span class="literal">new</span> ScopedContext()) &#123;<span class="comment">//try with resource</span></span><br><span class="line">    DSLContext create = scopedContext.getDSLContext();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个被配置保持打开的Statement</span></span><br><span class="line">    try (ResultQuery&lt;Record1&lt;<span class="built_in">Integer</span>&gt;&gt; query = create.selectOne().keepStatement(<span class="literal">true</span>)) &#123;</span><br><span class="line">        Result&lt;Record1&lt;<span class="built_in">Integer</span>&gt;&gt; result1 = query.fetch(); <span class="comment">// This will lazily create a new PreparedStatement</span></span><br><span class="line">        <span class="keyword">log</span>.info(<span class="string">"result1:"</span> + result1.toString());</span><br><span class="line">        Result&lt;Record1&lt;<span class="built_in">Integer</span>&gt;&gt; result2 = query.fetch(); <span class="comment">// This will reuse the previous PreparedStatement</span></span><br><span class="line">        <span class="keyword">log</span>.info(<span class="string">"result2:"</span> + result2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="draft-With-Ehcache"><a href="#draft-With-Ehcache" class="headerlink" title="[draft] With Ehcache"></a>[draft] With Ehcache</h3><p>未完成。</p>
<p>讨论JOOQ与Ehcache等进程级别缓存模块的集成，引申地，会谈到中间件级别的数据库缓存，如：Redis。</p>
<h3 id="draft-钩子函数：DefaultRecordListener-如何使用？"><a href="#draft-钩子函数：DefaultRecordListener-如何使用？" class="headerlink" title="[draft] 钩子函数：DefaultRecordListener 如何使用？"></a>[draft] 钩子函数：DefaultRecordListener 如何使用？</h3><p>未完成。</p>
<p>讨论JOOQ重要特性：DefaultRecordListener(简称Listener)。</p>
<p>Listener的应用场景，数据库操作完成后同步回调。</p>
<p>示例需求：简书网站，完成MySQL插入或更新文章后，需要在搜索接口(Solr)中半实时的查询到最新文章。</p>
<p>分析：强一致性需求，在MySQL和搜索引擎同时操作成功，才算一个事务成功。</p>
<p>使用JOOQ获取MySQL数据库链接时，注册Listener，指向更新Solr的业务逻辑。</p>
<h3 id="draft-更快的分页-seek"><a href="#draft-更快的分页-seek" class="headerlink" title="[draft] 更快的分页(seek)"></a>[draft] 更快的分页(seek)</h3><p>未完成。</p>
<p>Seek方法本来就没有跳过OFFSET之前的记录，它跳过的是所有以前获取到的最后一条记录之前的记录。考虑一下谷歌的翻页。从实用角度看的话，你几乎不可能准确地跳过100’000行记录。</p>
<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><h3 id="获取SQL语句"><a href="#获取SQL语句" class="headerlink" title="获取SQL语句"></a>获取SQL语句</h3><p>JOOQ允许在执行(fetch*、excute)前的SQL构建阶段，获取任一阶段的文本SQL语句。<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//<span class="number">2</span>张表完成左外连接构建阶段后的Step</span><br><span class="line">SelectForUpdateStep sfus=create</span><br><span class="line">        .select(USER.MOBILE, USER.NAME, USER.AGE, ORDER.ORDER_ID, ORDER.AMOUT, ORDER.ORDER_TIME)</span><br><span class="line">        .from(USER).leftOuterJoin(ORDER)</span><br><span class="line">        .on(USER.UID.eq(ORDER.UID))<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">//<span class="number">2</span>张表查询语句构建结束后的Step</span><br><span class="line">SelectForUpdateStep sfus1=create</span><br><span class="line">        .select(USER.MOBILE,USER.NAME,USER.AGE,ORDER.ORDER_ID,ORDER.AMOUT,ORDER.ORDER_TIME)</span><br><span class="line">        .from(USER).leftOuterJoin(ORDER)</span><br><span class="line">        .on(USER.UID.eq(ORDER.UID))</span><br><span class="line">        .where(USER.UID.eq(uid[<span class="number">0</span>]).<span class="literal">and</span>(ORDER.AMOUT.ge(<span class="number">100</span>l)))</span><br><span class="line">        .limit(<span class="number">0</span>, <span class="number">10</span>)<span class="comment">;</span></span><br><span class="line">log.info(<span class="string">"s:"</span> + sfus.getSQL())<span class="comment">;</span></span><br><span class="line">log.info(<span class="string">"s1:"</span> + sfus.getSQL())<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="number">14</span>:<span class="number">23</span>:<span class="number">05.305</span> INFO  com.study.jooq.model.Example <span class="number">123</span> advance - s:select `study`.`user`.`mobile`, `study`.`user`.`name`, `study`.`user`.`age`, `study`.`order`.`order_id`, `study`.`order`.`amout`, `study`.`order`.`order_time` from `study`.`user` left outer join `study`.`order` on `study`.`user`.`uid` = `study`.`order`.`uid`</span><br><span class="line"></span><br><span class="line"><span class="number">14</span>:<span class="number">23</span>:<span class="number">05.306</span> INFO  com.study.jooq.model.Example <span class="number">124</span> advance - s1:select `study`.`user`.`mobile`, `study`.`user`.`name`, `study`.`user`.`age`, `study`.`order`.`order_id`, `study`.`order`.`amout`, `study`.`order`.`order_time` from `study`.`user` left outer join `study`.`order` on `study`.`user`.`uid` = `study`.`order`.`uid</span><br></pre></td></tr></table></figure></p>
<h2 id="Some-else"><a href="#Some-else" class="headerlink" title="Some else"></a>Some else</h2><h3 id="JPA与JDBC有什么区别？"><a href="#JPA与JDBC有什么区别？" class="headerlink" title="JPA与JDBC有什么区别？"></a>JPA与JDBC有什么区别？</h3><ul>
<li>JDBC：Java Data Base Connectivity，java数据库连接，用于直接调用SQL 命令，也就是用于执行SQL语句的Java API，是面向数据库的。</li>
<li>JPA：Java Persistence API，Java持久性API，用来操作实体对象，持久性提供了很多实现，编程人员只需要编写实体类，实体类中的主要信息为实体与数据库中表、字段、主键的对应，可以免除编写繁琐的SQL。</li>
</ul>
<h3 id="JOOQ与JDBC的详细区别"><a href="#JOOQ与JDBC的详细区别" class="headerlink" title="JOOQ与JDBC的详细区别"></a>JOOQ与JDBC的详细区别</h3><ul>
<li><a href="http://www.jooq.org/doc/3.8/manual/sql-execution/comparison-with-jdbc/" target="_blank" rel="external">Comparison between jOOQ and JDBC</a></li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://blog.jobbole.com/100349/" target="_blank" rel="external">如果有人问你数据库的原理，叫他看这篇文章</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从零开始Blogging with Hexo教程]]></title>
      <url>http://amao12580.github.io/post/2016/04/A-new-start/</url>
      <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>　　转眼间3月份也即将过去了，在接受了众多的理论输入以及实践之后，决定要将一些值得分享的事情记录下来，一方面是避免自己重复的掉坑，另一方面也希望通过blog的方式锻炼自己的文字能力。输入+沉淀+输出，形成自我知识攫取过程的闭环。</p>
<p>　　下面记录从零开始的Blogging with Hexo的搭建过程，有一些简单的问题，在文末也会给出答案。</p>
<h2 id="1-你将要做什么？"><a href="#1-你将要做什么？" class="headerlink" title="1.你将要做什么？"></a>1.你将要做什么？</h2><p>　　跟我一起在GiHub上搭建免费无限流量博客，不限速，有版本追溯管理。sadly，免费的背后是低层次的服务。搭建的博客服务器在国外，国内访问的速度没法保障，后文会给出一定的解决方案。内容的维护只能以静态Html的方式发布，意味着没有数据库，因此带来了幂等性，没有各种Web攻击，算作是一件好事？</p>
<p>　　搭建过程中需要的技术：GitHub的使用、安装NodeJS、安装Hexo及系列插件、安装及配置Jacman主题、新文章的发布、Markdown的持续提高。</p>
<h3 id="1-1国内blog平台的现状"><a href="#1-1国内blog平台的现状" class="headerlink" title="1.1国内blog平台的现状"></a>1.1国内blog平台的现状</h3><p>国内的技术blog平台主要有：cnblogs、51cto、iteye、oschina、infoq等；排名没分先后，纯属个人想法。相信以上blogs，作为技术人，大家一定不陌生。平台型的blog，对个人的有利有弊，优势在于：免去软硬件维护管理的麻烦、不用担心流量和各种安全问题、；劣势也比较明显：内容版权、变现很困难、内容受限、内容面临下线风险</p>
<p>引用<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html" target="_blank" rel="external">阮一峰先生的总结</a>：</p>
<ol>
<li>第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。</li>
<li>第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。</li>
<li>第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</li>
</ol>
<p>即技术人对于blog的核心需求是：发布文章、维护文章、随时控制、免去其他管理，也就是输出可控的文章。</p>
<h3 id="1-2如何选择适合自己的blog平台"><a href="#1-2如何选择适合自己的blog平台" class="headerlink" title="1.2如何选择适合自己的blog平台"></a>1.2如何选择适合自己的blog平台</h3><p>国内的blog平台少有让人长期安心逗留的，各种内容审查政策的强压，大环境的逐利性等因素，促使少有blog平台保持良心的同时持续改进其平台，在此不多言。<br>我们希望发出的文章，可以进入一个技术人大都汇聚的环境中，以提高影响力。这样的环境可以是个人blog、blogs平台、微信平台等等。如果你有足够的影响力，也希望在作者与读者之间建立交流通道，常见的就是文章的评论回复功能了，其他的也有读者QQ群等社区型交流方式。引申的说，对于不怀好意的评论者，还需要一个评论审核的功能，甚至禁止评论，这都能在下文中得到解决。</p>
<h3 id="1-3为什么是Hexo？"><a href="#1-3为什么是Hexo？" class="headerlink" title="1.3为什么是Hexo？"></a>1.3为什么是Hexo？</h3><p>我们怎么评价Hexo？</p>
<p>知乎：<a href="https://www.zhihu.com/question/19996679" target="_blank" rel="external">jekyll vs Hexo</a></p>
<h2 id="2-如何做？"><a href="#2-如何做？" class="headerlink" title="2.如何做？"></a>2.如何做？</h2><h3 id="2-1安装和配置NodeJS"><a href="#2-1安装和配置NodeJS" class="headerlink" title="2.1安装和配置NodeJS"></a>2.1安装和配置NodeJS</h3><ol>
<li><p>确认你的配置是windows 7，虽然没有限制一定要windows，但是本教程基于windows。<img src="/img/计算机软硬件配置.png" alt="我的系统环境">。</p>
</li>
<li><p><a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="external">安装NodeJS</a><br>我的安装完成目录：</p>
</li>
</ol>
<p><img src="/img/NodeJS安装完成.png" alt=""></p>
<ol>
<li><a href="http://www.cnblogs.com/enix/p/3635343.html" target="_blank" rel="external">解决npm安装模块慢或失败的问题</a><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> registry=<span class="string">"http://registry.npmjs.org"</span><span class="comment">//设置npm源地址</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>确认你的npm配置：</p>
<p><img src="/img/npm配置信息.png" alt=""></p>
<h3 id="2-2获取GitHub账号"><a href="#2-2获取GitHub账号" class="headerlink" title="2.2获取GitHub账号"></a>2.2获取GitHub账号</h3><p>GitHub账号和GitHub Pages 一般都应该有吧，已有的请自动无视这一部分。</p>
<h3 id="2-2yourname-github-io"><a href="#2-2yourname-github-io" class="headerlink" title="2.2yourname.github.io"></a>2.2yourname.github.io</h3><ul>
<li>首先注册一个『GitHub』帐号，已有的默认默认请忽略</li>
<li>建立与你用户名对应的仓库，仓库名必须为『your_user_name.github.com』</li>
</ul>
<h3 id="2-3安装和配置windows-GitHub客户端"><a href="#2-3安装和配置windows-GitHub客户端" class="headerlink" title="2.3安装和配置windows GitHub客户端"></a>2.3安装和配置windows GitHub客户端</h3><p>不建议在<a href="https://desktop.github.com/" target="_blank" rel="external">GitHub官网</a>下载最新客户端，官网下载的客户端大小不到1MB，在本地运行还需要链接Amazon下载具体的安装包，因为国内网络环境，经常下载到一半就断掉.</p>
<p>我个人试了各种方法不得解，最后找到了离线安装版：已存入百度云：链接：<a href="http://pan.baidu.com/s/1eRmoG6Y" target="_blank" rel="external">http://pan.baidu.com/s/1eRmoG6Y</a> 密码：3vus</p>
<p>因为版本控制工具比较耗系统资源，请尽量安装在非系统所在盘，尽量选择剩余容量大的盘。<br>安装完成后，得到2个桌面图标：GitHub、Git Shell。前者是可视化版，后者是命令行版。</p>
<p>我选择使用GitHub,打开后进行GitHub账号登录，第一次登录成功后，绑定邮箱会收到新邮件：[GitHub] A new public key was added to your account</p>
<p>点击左上角“+”号，选择clone，选择自己的yourname.github.io。<br>在下一步中选择存放文件夹，我的选择是：<br><img src="/img/github目录.png" alt=""></p>
<p>简单的使用windows GitHub客户端</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在对话框顶部有“No uncommitted changes”和“History”，点击后可以进行切换。</span><br><span class="line">在版本库所在的文件夹有了文件变化后，这里会有变化“28 uncommitted changes”和“History”，28是指的未提交的更改数量。</span><br><span class="line">填写Summary和Description后，可以进行本地提交：<span class="keyword">Commit</span> <span class="keyword">to</span> <span class="keyword">master</span>。</span><br><span class="line">此时若还想提交到远程GitHub服务器，点击右上角“<span class="keyword">Sync</span>”按钮进行同步。</span><br></pre></td></tr></table></figure>
<h3 id="2-4安装和配置Hexo"><a href="#2-4安装和配置Hexo" class="headerlink" title="2.4安装和配置Hexo"></a>2.4安装和配置Hexo</h3><p>安装和初始化Hexo<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>cd /d/</span><br><span class="line"><span class="variable">$ </span>mkdir hexo</span><br><span class="line"><span class="variable">$ </span>cd hexo</span><br><span class="line"><span class="variable">$ </span>npm install -g hexo</span><br><span class="line"><span class="variable">$ </span>hexo init</span><br><span class="line"><span class="variable">$ </span>hexo g <span class="comment"># 或者hexo generate</span></span><br><span class="line"><span class="variable">$ </span>hexo s <span class="comment"># 或者hexo server，可以在http://localhost:4000/查看</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/hexo安装目录.png" alt=""></p>
<p>安装<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo clean</span><br><span class="line"><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/wuchong</span><span class="regexp">/jacman.git themes/jacman</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jacman主题安装目录.png" alt=""></p>
<p>常用命令<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">"我的博客"</span> == hexo new <span class="string">"我的博客"</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo <span class="attr">p</span> == hexo publish</span><br><span class="line">hexo <span class="attr">g</span> == hexo generate<span class="comment">#生成</span></span><br><span class="line">hexo <span class="attr">s</span> == hexo server <span class="comment">#启动服务预览</span></span><br><span class="line">hexo <span class="attr">d</span> == hexo deploy<span class="comment">#部署</span></span><br></pre></td></tr></table></figure></p>
<p>部署文章到github.io<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">拷贝Hexo文件夹下的public文件夹里的所有文件</span><br><span class="line">粘贴到yourname<span class="selector-class">.github</span><span class="selector-class">.io</span>所在磁盘目录中，我的目录是：D:\GitHub\amao12580<span class="selector-class">.github</span><span class="selector-class">.io</span></span><br><span class="line">使用GitHub客户端进行提交到远程服务器</span><br><span class="line">打开yourname<span class="selector-class">.github</span><span class="selector-class">.io</span>网址即可看到效果啦！</span><br></pre></td></tr></table></figure></p>
<h3 id="2-5为什么是Jacman"><a href="#2-5为什么是Jacman" class="headerlink" title="2.5为什么是Jacman?"></a>2.5为什么是Jacman?</h3><p>参见评价<a href="http://wsgzao.github.io/post/hexo-jacman/" target="_blank" rel="external">Jacman基于Pacman修改的Hexo主题</a></p>
<h3 id="2-6私人定制"><a href="#2-6私人定制" class="headerlink" title="2.6私人定制"></a>2.6私人定制</h3><p>在这里贴出我修改过的一些文件，很多修改都给出了备注。</p>
<p>Hexo主配置文件：D:\GitHub\Hexo\_config.yml<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> Cat<span class="string">'s Blog</span><br><span class="line">subtitle: 一饮一啄，莫非前定.</span><br><span class="line">#为了更便于搜索引擎爬到，添加了网站的keywords</span><br><span class="line">keywords: cat'</span>s,chengliang,amao12580,blog,developers</span><br><span class="line"><span class="attr">description:</span> Follw the https://xuanwo.org/<span class="number">2015</span>/<span class="number">03</span>/<span class="number">26</span>/hexo-intor/</span><br><span class="line"><span class="attr">author:</span> Steven Cheng</span><br><span class="line"><span class="attr">language:</span> zh-CN</span><br><span class="line"><span class="attr">timezone:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> http://amao12580.github.io</span><br><span class="line"><span class="attr">root:</span> /</span><br><span class="line"><span class="attr">permalink:</span> post/:year/:month/:title/</span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> source</span><br><span class="line"><span class="attr">public_dir:</span> public</span><br><span class="line"><span class="attr">tag_dir:</span> tags</span><br><span class="line"><span class="attr">about_dir:</span> about</span><br><span class="line"><span class="attr">archive_dir:</span> archives</span><br><span class="line"><span class="attr">category_dir:</span> categories</span><br><span class="line"><span class="attr">code_dir:</span> downloads/code</span><br><span class="line"><span class="attr">i18n_dir:</span> :lang</span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"><span class="bullet">  -</span> README.md</span><br><span class="line"><span class="bullet">  -</span> <span class="number">404.</span>html</span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> :title.md <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> post</span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> uncategorized</span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> YYYY-MM-DD</span><br><span class="line"><span class="attr">time_format:</span> HH:mm:ss</span><br><span class="line"><span class="attr">datetime_format:</span> YYYY-MM-DD HH:mm:ss.SSS</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> page</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> jacman</span><br><span class="line"><span class="attr">stylus:</span></span><br><span class="line"><span class="attr">  compress:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Others</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">5</span> <span class="comment">##首页默认10篇文章标题 如果值为0不分页</span></span><br><span class="line"></span><br><span class="line"><span class="attr">archive_generator:</span></span><br><span class="line"><span class="attr">    per_page:</span> <span class="number">0</span> <span class="comment">##归档页面默认10篇文章标题</span></span><br><span class="line"><span class="attr">    yearly:</span> <span class="literal">true</span>  <span class="comment">##生成年视图</span></span><br><span class="line"><span class="attr">    monthly:</span> <span class="literal">true</span> <span class="comment">##生成月视图</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tag_generator:</span></span><br><span class="line"><span class="attr">    per_page:</span> <span class="number">0</span> <span class="comment">##标签分类页面默认10篇文章</span></span><br><span class="line"></span><br><span class="line"><span class="attr">category_generator:</span></span><br><span class="line"><span class="attr">    per_page:</span> <span class="number">0</span> <span class="comment">###分类页面默认10篇文章</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">    type:</span> atom <span class="comment">##feed类型 atom或者rss2</span></span><br><span class="line"><span class="attr">    path:</span> atom.xml <span class="comment">##feed路径</span></span><br><span class="line"><span class="attr">    limit:</span> <span class="number">20</span>  <span class="comment">##feed文章最小数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#访问zipperary/sitemap.xml即可看到站点地图。不过，sitemap的初衷是给搜索引擎看的，为了提高搜索引擎对自己站点的收录效果，我们最好手动到google和百度等搜索引擎提交sitemap.xml。</span></span><br><span class="line"><span class="comment">#sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line"><span class="attr">  - path:</span> sitemap.xml</span><br><span class="line"></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line"><span class="attr"> - path:</span> baidusitemap.xml</span><br></pre></td></tr></table></figure></p>
<p>Jacman主题的主配置文件：D:\GitHub\Hexo\themes\jacman\ _config.yml<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##### Menu</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  主页 | Home: /</span><br><span class="line">  索引 | Index: /index</span><br><span class="line">  归档 | Archives: /archives</span><br><span class="line">  简介 | About: /about</span><br><span class="line"><span class="comment">## you can create `tags` and `categories` folders in `../source`.</span></span><br><span class="line"><span class="comment">## And create a `index.md` file in each of them.</span></span><br><span class="line"><span class="comment">## set `front-matter`as</span></span><br><span class="line"><span class="comment">## layout: tags (or categories)</span></span><br><span class="line"><span class="comment">## title: tags (or categories)</span></span><br><span class="line"><span class="comment">## ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Widgets</span></span><br><span class="line"><span class="attr">widgets:</span></span><br><span class="line"><span class="bullet">-</span> github-card</span><br><span class="line"><span class="bullet">-</span> category</span><br><span class="line"><span class="bullet">-</span> tag</span><br><span class="line"><span class="bullet">-</span> links</span><br><span class="line"><span class="bullet">-</span> douban</span><br><span class="line"><span class="bullet">-</span> rss</span><br><span class="line"><span class="bullet">-</span> weibo</span><br><span class="line">  <span class="comment">## provide eight widgets:github-card,category,tag,rss,archive,tagcloud,links,weibo</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### RSS</span></span><br><span class="line"><span class="attr">rss:</span> /atom.xml <span class="comment">## RSS address.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Image</span></span><br><span class="line"><span class="attr">imglogo:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span>             <span class="comment">## display image logo true/false.</span></span><br><span class="line"><span class="attr">  src:</span> img/logo.png        <span class="comment">## `.svg` and `.png` are recommended,please put image into the theme folder `/jacman/source/img`.</span></span><br><span class="line"><span class="attr">favicon:</span> img/favicon.ico   <span class="comment">## size:32px*32px,`.ico` is recommended,please put image into the theme folder `/jacman/source/img`.</span></span><br><span class="line"><span class="attr">apple_icon:</span> img/jacman.jpg <span class="comment">## size:114px*114px,please put image into the theme folder `/jacman/source/img`.</span></span><br><span class="line"><span class="attr">author_img:</span> img/author.jpg <span class="comment">## size:220px*220px.display author avatar picture.if don't want to display,please don't set this.</span></span><br><span class="line"><span class="attr">banner_img:</span> <span class="comment">#img/banner.jpg ## size:1920px*200px+. Banner Picture</span></span><br><span class="line"><span class="comment">### Theme Color</span></span><br><span class="line"><span class="attr">theme_color:</span></span><br><span class="line"><span class="attr">    theme:</span> <span class="string">'#2ca6cb'</span>    <span class="comment">##the defaut theme color is blue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码高亮主题</span></span><br><span class="line"><span class="comment"># available: default | night</span></span><br><span class="line"><span class="attr">highlight_theme:</span> night</span><br><span class="line"></span><br><span class="line"><span class="comment">#### index post is expanding or not</span></span><br><span class="line"><span class="attr">index:</span></span><br><span class="line"><span class="attr">  expand:</span> <span class="literal">false</span>           <span class="comment">## default is unexpanding,so you can only see the short description of each post.</span></span><br><span class="line"><span class="attr">  excerpt_link:</span> Read More</span><br><span class="line"></span><br><span class="line"><span class="attr">close_aside:</span> <span class="literal">true</span>  <span class="comment">#close sidebar in post page if true</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">true</span>      <span class="comment">#enable mathjax if true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Creative Commons License Support, see http://creativecommons.org/</span></span><br><span class="line"><span class="comment">### you can choose: by , by-nc , by-nc-nd , by-nc-sa , by-nd , by-sa , zero</span></span><br><span class="line"><span class="attr">creative_commons:</span> none</span><br><span class="line"></span><br><span class="line"><span class="comment">#### Author information</span></span><br><span class="line"><span class="attr">author:</span></span><br><span class="line"><span class="attr">  intro_line1:</span>  <span class="string">"Hello ,I'm steven. This is my blog on GitHub."</span>    <span class="comment">## your introduction on the bottom of the page</span></span><br><span class="line"><span class="attr">  intro_line2:</span>  <span class="string">"Whenever you feel like criticizing any one, just remember that all the people in this world haven’t had the advantages that you’ve had."</span>  <span class="comment">## the 2nd line</span></span><br><span class="line"><span class="attr">  intro_line3:</span> <span class="string">"每当你觉得想要批评什么人的时候，你切要记着，这个世界上的人并非都具备你禀有的条件。《了不起的盖茨比》"</span></span><br><span class="line"><span class="attr">  weibo:</span> <span class="number">3201133445</span>     <span class="comment">## e.g. wuchong1014 or 2176287895 for http://weibo.com/2176287895</span></span><br><span class="line"><span class="attr">  weibo_verifier:</span> b3593ceb    <span class="comment">## e.g. b3593ceb Your weibo-show widget verifier ,if you use weibo-show it is needed.</span></span><br><span class="line"><span class="attr">  tsina:</span>      <span class="comment">## e.g. 2176287895  Your weibo ID,It will be used in share button.</span></span><br><span class="line"><span class="attr">  douban:</span>     <span class="comment">## e.g. wuchong1014 or your id for https://www.douban.com/people/wuchong1014</span></span><br><span class="line"><span class="attr">  zhihu:</span>      <span class="comment">## e.g. jark  for http://www.zhihu.com/people/jark</span></span><br><span class="line">  email : chengliangchengliang888@gmail.com     <span class="comment">## e.g. imjark@gmail.com</span></span><br><span class="line"><span class="attr">  twitter:</span>    <span class="comment">## e.g. jarkwu for https://twitter.com/jarkwu</span></span><br><span class="line"><span class="attr">  github:</span> amao12580     <span class="comment">## e.g. wuchong for https://github.com/wuchong</span></span><br><span class="line"><span class="attr">  facebook:</span>   <span class="comment">## e.g. imjark for https://facebook.com/imjark</span></span><br><span class="line"><span class="attr">  linkedin:</span>   <span class="comment">## e.g. wuchong1014 for https://www.linkedin.com/in/wuchong1014</span></span><br><span class="line"><span class="attr">  google_plus:</span>    <span class="comment">## e.g. "111190881341800841449" for https://plus.google.com/u/0/111190881341800841449, the "" is needed!</span></span><br><span class="line"><span class="attr">  stackoverflow:</span>  <span class="comment">## e.g. 3222790 for http://stackoverflow.com/users/3222790/jark</span></span><br><span class="line"><span class="comment">## if you set them, the corresponding  share button will show on the footer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Toc</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line"><span class="attr">  article:</span> <span class="literal">true</span>   <span class="comment">## show contents in article.</span></span><br><span class="line"><span class="attr">  aside:</span> <span class="literal">true</span>     <span class="comment">## show contents in aside.</span></span><br><span class="line"><span class="comment">## you can set both of the value to true of neither of them.</span></span><br><span class="line"><span class="comment">## if you don't want display contents in a specified post,you can modify `front-matter` and add `toc: false`.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Links</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  码农圈: https://coderq.com,一个面向程序员交流分享的新一代社区</span><br><span class="line">  Jark<span class="string">'s Blog: http://wuchong.me</span><br><span class="line">  GitHub: https://github.com/amao12580</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### Comment</span><br><span class="line">duoshuo_shortname: amao12580   ## e.g. wuchong   your duoshuo short name.</span><br><span class="line">disqus_shortname:     ## e.g. wuchong   your disqus short name.</span><br><span class="line"></span><br><span class="line">#### Share button</span><br><span class="line">jiathis:</span><br><span class="line">  enable: false ## if you use jiathis as your share tool,the built-in share tool won'</span>t be display.</span><br><span class="line"><span class="attr">  id:</span>    <span class="comment">## e.g. 1889330 your jiathis ID.</span></span><br><span class="line"><span class="attr">  tsina:</span> <span class="comment">## e.g. 2176287895 Your weibo id,It will be used in share button.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Analytics</span></span><br><span class="line"><span class="attr">google_analytics:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  id:</span> UA<span class="bullet">-75497011</span><span class="bullet">-1</span>        <span class="comment">## e.g. UA-46321946-2 your google analytics ID.</span></span><br><span class="line"><span class="attr">  site:</span> http://amao12580.github.io      <span class="comment">## e.g. wuchong.me your google analytics site or set the value as auto.</span></span><br><span class="line"><span class="comment">## You MUST upgrade to Universal Analytics first!</span></span><br><span class="line"><span class="comment">## https://developers.google.com/analytics/devguides/collection/upgrade/?hl=zh_CN</span></span><br><span class="line"><span class="attr">baidu_tongji:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  sitecode:</span> e6d1f421bbc9962127a50488f9ed37d1 <span class="comment">## e.g. e6d1f421bbc9962127a50488f9ed37d1 your baidu tongji site code</span></span><br><span class="line"><span class="attr">cnzz_tongji:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  siteid:</span>    <span class="comment">## e.g. 1253575964 your cnzz tongji site id</span></span><br><span class="line"><span class="attr">ibruce_tongji:</span> <span class="comment"># 不蒜子计数</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Miscellaneous</span></span><br><span class="line"><span class="attr">ShowCustomFont:</span> <span class="literal">true</span>  <span class="comment">## you can change custom font in `variable.styl` and `font.styl` which in the theme folder `/jacman/source/css`.</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span>        <span class="comment">## if you use gallery post or want use fancybox please set the value to true.</span></span><br><span class="line"><span class="attr">totop:</span> <span class="literal">true</span>           <span class="comment">## if you want to scroll to top in every post set the value to true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Custom Search</span></span><br><span class="line"><span class="attr">google_cse:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  cx:</span>   <span class="comment">## e.g. 018294693190868310296:abnhpuysycw your Custom Search ID.</span></span><br><span class="line"><span class="comment">## https://www.google.com/cse/</span></span><br><span class="line"><span class="comment">## To enable the custom search You must create a "search" folder in '/source' and a "index.md" file</span></span><br><span class="line"><span class="comment">## set the 'front-matter' as</span></span><br><span class="line"><span class="comment">## layout: search</span></span><br><span class="line"><span class="comment">## title: search</span></span><br><span class="line"><span class="comment">## ---</span></span><br><span class="line"><span class="attr">baidu_search:</span>     <span class="comment">## http://zn.baidu.com/</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  id:</span>   <span class="comment">## e.g. "783281470518440642"  for your baidu search id</span></span><br><span class="line"><span class="attr">  site:</span> http://zhannei.baidu.com/cse/search  <span class="comment">## your can change to your site instead of the default site</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tinysou_search:</span>     <span class="comment">## http://tinysou.com/</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  id:</span>  <span class="comment">## e.g. "4ac092ad8d749fdc6293" for your tiny search id</span></span><br></pre></td></tr></table></figure></p>
<p>Jacman主题布局配置文件：D:\GitHub\Hexo\themes\jacman\layout\layout.ejs</p>
<figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> (page.layout==<span class="string">'post'</span> || page.layout==<span class="string">'photo'</span>)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/head'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/header'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> body </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/sidebar'</span>,&#123;<span class="symbol">item:</span> page,<span class="symbol">table:</span> <span class="keyword">true</span>&#125;) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/footer'</span>) </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/after_footer'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; <span class="keyword">else</span> <span class="keyword">if</span>(page.layout==<span class="string">'page'</span>)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span>(page.source.match(<span class="regexp">/\.md$/</span>))&#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/head'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/header'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> body </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/footer'</span>) </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/after_footer'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125;<span class="keyword">else</span>&#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> page.content </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; <span class="keyword">else</span> <span class="keyword">if</span>(page.layout==<span class="string">'search'</span>)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/head'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/header'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/search'</span>)</span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/footer'</span>) </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/after_footer'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; <span class="keyword">else</span> <span class="keyword">if</span>(page.layout==<span class="string">'tags'</span>)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/head'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/header'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/tags'</span>)</span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/footer'</span>) </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/after_footer'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; <span class="keyword">else</span> <span class="keyword">if</span>(page.layout==<span class="string">'categories'</span>)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/head'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/header'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/categories'</span>)</span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/footer'</span>) </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/after_footer'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; <span class="keyword">else</span> <span class="keyword">if</span>(page.category!=null||page.tag!=null||page.archive!=null) &#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/head'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/header'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> body </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/footer'</span>) </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/after_footer'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; <span class="keyword">else</span> &#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/head'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/header'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> body </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/sidebar'</span>,&#123;<span class="symbol">item:</span> page,<span class="symbol">table:</span> <span class="keyword">false</span>&#125;) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/footer'</span>) </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> partial(<span class="string">'_partial/after_footer'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/amao12580"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"position: absolute; top: 0; right: 0; border: 0;"</span> <span class="attr">src</span>=<span class="string">"https://camo.githubusercontent.com/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67"</span> <span class="attr">alt</span>=<span class="string">"Fork me on GitHub"</span> <span class="attr">data-canonical-src</span>=<span class="string">"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>Jacman主题页面尾部配置文件：D:\GitHub\Hexo\themes\jacman\layout\_partial\footer.ejs<br><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> <span class="keyword">if</span>(theme.author_img)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"author"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl">; &#125; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> <span class="keyword">if</span>(theme.author.intro_line1 || theme.author.intro_line2)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">%=</span></span></span><span class="perl"> theme.author.intro_line1 </span><span class="xml"><span class="tag">%&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%=</span></span></span><span class="perl"> theme.author.intro_line2 </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl">; &#125; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"social-font"</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> <span class="keyword">if</span>(theme.author.weibo)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://weibo.com/&lt;%=</span></span></span><span class="perl"> theme.author.weibo </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"icon-weibo"</span> <span class="attr">title</span>=<span class="string">"微博"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl">; &#125; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> <span class="keyword">if</span>(theme.author.github)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/&lt;%=</span></span></span><span class="perl">theme.author.github </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"icon-github"</span> <span class="attr">title</span>=<span class="string">"github"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl">; &#125; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> <span class="keyword">if</span>(theme.author.stackoverflow)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://stackoverflow.com/users/&lt;%=</span></span></span><span class="perl">theme.author.stackoverflow </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"icon-stack-overflow"</span> <span class="attr">title</span>=<span class="string">"stackoverflow"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl">; &#125; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> <span class="keyword">if</span>(theme.author.twitter)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://twitter.com/&lt;%=</span></span></span><span class="perl">theme.author.twitter </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"icon-twitter"</span> <span class="attr">title</span>=<span class="string">"twitter"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl">; &#125; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> <span class="keyword">if</span>(theme.author.facebook)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.facebook.com/&lt;%=</span></span></span><span class="perl">theme.author.facebook </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"icon-facebook"</span> <span class="attr">title</span>=<span class="string">"facebook"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl">; &#125; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> <span class="keyword">if</span>(theme.author.linkedin)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.linkedin.com/in/&lt;%=</span></span></span><span class="perl">theme.author.linkedin </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"icon-linkedin"</span> <span class="attr">title</span>=<span class="string">"linkedin"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl">; &#125; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> <span class="keyword">if</span>(theme.author.douban)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.douban.com/people/&lt;%=</span></span></span><span class="perl">theme.author.douban </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"icon-douban"</span> <span class="attr">title</span>=<span class="string">"豆瓣"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl">; &#125; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> <span class="keyword">if</span>(theme.author.zhihu)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.zhihu.com/people/&lt;%=</span></span></span><span class="perl">theme.author.zhihu </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"icon-zhihu"</span> <span class="attr">title</span>=<span class="string">"知乎"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl">; &#125; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> <span class="keyword">if</span>(theme.author.google_plus)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://plus.google.com/&lt;%=</span></span></span><span class="perl">theme.author.google_plus </span><span class="xml"><span class="tag"><span class="string">%&gt;?rel=author"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"icon-google_plus"</span> <span class="attr">title</span>=<span class="string">"Google+"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl">; &#125; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> <span class="keyword">if</span>(theme.author.email)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:&lt;%=</span></span></span><span class="perl">theme.author.email </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"icon-email"</span> <span class="attr">title</span>=<span class="string">"Email Me"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl">; &#125; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl">  Array.<span class="keyword">prototype</span>.S=String.fromCharCode(<span class="number">2</span>);</span><br><span class="line">              Array.<span class="keyword">prototype</span>.in_array=function(e)&#123; var r=new RegExp(this.S+e+this.S); <span class="keyword">return</span> (r.test(this.S+this.<span class="keyword">join</span>(this.S)+this.S)); &#125;;</span><br><span class="line">                var cc = new Array(<span class="string">'by'</span>,<span class="string">'by-nc'</span>,<span class="string">'by-nc-nd'</span>,<span class="string">'by-nc-sa'</span>,<span class="string">'by-nd'</span>,<span class="string">'by-sa'</span>,<span class="string">'zero'</span>); </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> <span class="keyword">if</span> (cc.in_array(theme.creative_commons) ) &#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cc-license"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://creativecommons.org/licenses/&lt;%=</span></span></span><span class="perl"> theme.creative_commons </span><span class="xml"><span class="tag"><span class="string">%&gt;/4.0"</span> <span class="attr">class</span>=<span class="string">"cc-opacity"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;%</span></span></span><span class="perl">- config.root </span><span class="xml"><span class="tag"><span class="string">%&gt;img/cc-&lt;%=</span></span></span><span class="perl"> theme.creative_commons </span><span class="xml"><span class="tag"><span class="string">%&gt;.svg"</span> <span class="attr">alt</span>=<span class="string">"Creative Commons"</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl">; &#125; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"copyright"</span>&gt;</span></span><br><span class="line">        © <span class="tag">&lt;<span class="name">%=</span></span></span><span class="perl"> new Date().getFullYear() </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> <span class="keyword">if</span> (config.author) &#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%=</span></span></span><span class="perl"> config.root </span><span class="xml"><span class="tag"><span class="string">%&gt;about"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"&lt;%=</span></span></span><span class="perl"> config.author </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span></span></span><span class="perl"> config.author </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl">; &#125; <span class="keyword">else</span> &#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%=</span></span></span><span class="perl"> config.url </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">title</span>=<span class="string">"&lt;%=</span></span></span><span class="perl"> config.title </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span></span></span><span class="perl"> config.title </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl">; &#125; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 不蒜子统计 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> <span class="keyword">if</span> (theme.ibruce_tongji.enable)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span> <span class="attr">style</span>=<span class="string">'display:none'</span>&gt;</span></span><br><span class="line">本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>,本站访客数<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>，本文总阅读量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_page_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><span class="perl">; &#125; </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="2-7备份的重要性"><a href="#2-7备份的重要性" class="headerlink" title="2.7备份的重要性"></a>2.7备份的重要性</h3><p>刚开始折腾时，经常出现改了很多配置，一运行就报错了，但是无法定位是哪些配置的改动导致的？<br>幸好我用Sublime Text 3修改的，有历史记录，这点真是太赞了！给你要的<a href="http://pan.baidu.com/s/1pLnDKW7" target="_blank" rel="external">链接</a>，密码：3ook</p>
<p>Hexo配置好后，最好做一次网盘私密备份，以免主机故障丢失。而且有了备份，在家或在公司，都可以愉快的写blog啦！</p>
<h2 id="3-可能遇到的问题及答案"><a href="#3-可能遇到的问题及答案" class="headerlink" title="3.可能遇到的问题及答案"></a>3.可能遇到的问题及答案</h2><p>1.hexo系列命令无法执行：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">D:\GitHub&gt; hexo c</span><br><span class="line">Usage: hexo &lt;<span class="keyword">command</span>&gt;</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  help     Get help <span class="keyword">on</span> <span class="title">a</span> <span class="title">command</span>.</span><br><span class="line">  init     Create <span class="keyword">a</span> <span class="built_in">new</span> Hexo <span class="built_in">folder</span>.</span><br><span class="line">  <span class="built_in">version</span>  Display <span class="built_in">version</span> information.</span><br><span class="line"></span><br><span class="line">Global Options:</span><br><span class="line">  <span class="comment">--config  Specify config file instead of using _config.yml</span></span><br><span class="line">  <span class="comment">--cwd     Specify the CWD</span></span><br><span class="line">  <span class="comment">--debug   Display all verbose messages in the terminal</span></span><br><span class="line">  <span class="comment">--draft   Display draft posts</span></span><br><span class="line">  <span class="comment">--safe    Disable all plugins and scripts</span></span><br><span class="line">  <span class="comment">--silent  Hide output on console</span></span><br><span class="line"></span><br><span class="line">For more help, you can use <span class="string">'hexo help [command]'</span> <span class="keyword">for</span> <span class="keyword">the</span> <span class="keyword">detailed</span> information</span><br><span class="line"><span class="keyword">or</span> you can check <span class="keyword">the</span> docs: <span class="keyword">http</span>://hexo.io/docs/</span><br></pre></td></tr></table></figure></p>
<p>解决：请切换目录到Hexo安装目录后再执行。这是因为Hexo没有全局环境配置的问题。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> .\Hexo</span><br></pre></td></tr></table></figure></p>
<p>2.关于404页面的处理<br>搜索很多关于404页面的资料，都是把配置好的404.html，每次在hexo g命令后手工放在hexo的public目录下。这样子有个缺点，每次都需要手工操作一次，这对于程序员来说是极其不人道的，我想到一个点子：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将404<span class="selector-class">.html</span>文件放在<span class="selector-tag">hexo</span>的<span class="selector-tag">source</span>目录下</span><br><span class="line">在<span class="selector-tag">hexod</span>的全局配置文件<span class="selector-pseudo">:_config.yml</span>，配置<span class="selector-tag">skip_render</span></span><br><span class="line"><span class="selector-tag">skip_render</span>:</span><br><span class="line">  <span class="selector-tag">-</span> <span class="selector-tag">README</span><span class="selector-class">.md</span></span><br><span class="line">  <span class="selector-tag">-</span> 404<span class="selector-class">.htm</span></span><br></pre></td></tr></table></figure></p>
<p>3.如何在文章中插入图片？<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在Hexo的source文件夹下，建一个文件夹“img”</span><br><span class="line">将想要插入到文章的图片，放到img文件夹下，图片最好是png格式，文件小而且不变形</span><br><span class="line">使用示例：![<span class="string">图片的名字</span>](<span class="link">/img/图片001.png</span>)</span><br></pre></td></tr></table></figure></p>
<p>4.如何在文章中插入代码段？<br>将需要显示为代码段的内容，用```前后包裹住<br><img src="/img/代码段.png" alt=""></p>
<p>显示的效果是：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码段1</span><br><span class="line">代码段2</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[记一次redis成功调优的过程]]></title>
      <url>http://amao12580.github.io/post/2016/03/A-successful-redis-tuning-record/</url>
      <content type="html"><![CDATA[<h2 id="我们怎么使用Redis？"><a href="#我们怎么使用Redis？" class="headerlink" title="我们怎么使用Redis？"></a>我们怎么使用Redis？</h2><p>公司目前主力开发的产品，是一个典型的平台电商型产品，包含了平台运营方、商家、消费者等角色。</p>
<p>公司提供电商平台，同时负责系统维护和系统保障；商家与公司进行签约后，入驻平台，将商品投放到平台进行展示；平台依据商家签约信息，进行商品与消费者之间的兴趣推荐，消费者通过商品与商家达成消费订单后，平台按单依据签约与商家抽取利润。商家发现日订单分析有了提升后，可能会与平台达成更多的合作。从而演变出了良好的商业发展模式。</p>
<p>平台电商型产品中，非常满足80/20法则(又称为:<a href="https://zh.wikipedia.org/wiki/%E5%B8%95%E9%9B%B7%E6%89%98%E6%B3%95%E5%88%99" target="_blank" rel="external">帕雷托法则</a>),查询的业务量远远多于写入的业务量，为了提高<a href="http://www.ha97.com/5095.html" target="_blank" rel="external">TPS</a>，降低对数据库的访问。我们也采取常规的做法，选用redis进行缓存常用业务数据。其中典型的就有：1.图片的信息、2.登录后的用户信息、3.全局超时锁、4.验证码。</p>
<p>关于redis的技术选型，其实在我参与产品开发之前就已经完成了，在这个产品里也作为缓存层在使用。产品目前还在雏形孵化阶段，没有考虑太多关于分布式以及高可用的方案，对redis的使用很粗糙，在团队内可能熟悉redis的Developer不多，或者说有空又有耐心还熟悉redis的Developer没有吧？后来与PM的沟通后得知确实如此！</p>
<h3 id="缓存图片信息"><a href="#缓存图片信息" class="headerlink" title="缓存图片信息"></a>缓存图片信息</h3><p>目前有很多业务在使用该缓存：商品的图片编辑，商家店面形象的图文自我介绍，用户针对订单的图文评价.</p>
<p>这一部分的数据，在产品启动时(没有黑科技，就是在web.xml，自定义listener。)，读取Mysql中的File表，load进redis，数据量约120W条，没有做任何的分库分表处理。</p>
<p>File表的结构如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`file`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'图片ID'</span>,</span><br><span class="line">  <span class="string">`uid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'上传用户Id'</span>,</span><br><span class="line">  <span class="string">`crc32`</span> <span class="built_in">char</span>(<span class="number">8</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'crc32校验和'</span>,</span><br><span class="line">  <span class="string">`url`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'对外访问的URL'</span>,</span><br><span class="line">  <span class="string">`path`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'存储的相对路径'</span>,</span><br><span class="line">  <span class="string">`filename`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'文件名字'</span>,</span><br><span class="line">  <span class="string">`size`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'图片大小(单位byte)'</span>,</span><br><span class="line">  <span class="string">`ext`</span> <span class="built_in">char</span>(<span class="number">5</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'图片后缀'</span>,</span><br><span class="line">  <span class="string">`is_image`</span> tinyint(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'是否是图片，0为不是，1为是'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> <span class="keyword">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`storage_type`</span> tinyint(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'图片存储介质，0为fileSystem，1阿里云,2表示ppw老数据'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`filename`</span> (<span class="string">`filename`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1146617</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_unicode_ci <span class="keyword">COMMENT</span>=<span class="string">'文件信息表'</span>;</span><br></pre></td></tr></table></figure></p>
<p>有意思的是，每次产品启动时，读取到的所有File表记录，进行for循环，每一次循环中，访问一次redis。而在产品关闭时，删除redis的key，从而清除缓存？如果数据量愈来愈多，不就像做过山车一样，启动时加载全量数据，使用量飚的很高，关闭时删除全量缓存，使用量逐渐落回低谷(redis有<a href="http://wangneng-168.iteye.com/blog/2100379" target="_blank" rel="external">内存释放机制</a>)。对于内存型中间件产品，这样的使用会带来很多的不可靠性。</p>
<p>启动时加载数据到redis时的处理过程,部分为伪码：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">File</span>表对应的实体类：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="built_in">File</span>&#123;<span class="comment">//与数据库字段名完全的一致</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> crc32;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> path;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> filename;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> ext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> is_image;</span><br><span class="line">    <span class="keyword">private</span> Timestamp create_time;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> storage_type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//忽略 getter\setter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用Dao层访问Mysql数据库，取回File表的所有记录，每条记录包含所有字段。</span></span><br><span class="line">List&lt;<span class="built_in">File</span>&gt; files=<span class="keyword">this</span>.fileDao.getAll();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取File表的SQL：SELECT * FROM FILE;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;files.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">    <span class="keyword">this</span>.cacheDao.setOneFileToRedis(files.<span class="built_in">get</span>(i).getId(),files.<span class="built_in">get</span>(i).getUrl());<span class="comment">//调用Dao层访问Redis，将数据存入redis</span></span><br><span class="line">    <span class="comment">//WTF?只需要2个字段，然而取回了所有字段？而且不能批量存入redis?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cacheDao的实现</span><br><span class="line"><span class="keyword">private</span> final <span class="keyword">static</span> <span class="keyword">String</span> PHOTO_CACHE_KEY=<span class="string">"photos"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> setOneFileToRedis(<span class="keyword">int</span> id,<span class="keyword">String</span> url)&#123;</span><br><span class="line">    <span class="keyword">this</span>.jedis.hset(PHOTO_CACHE_KEY, id.toString(), url);<span class="comment">//1.使用[Hash数据结构](https://redis.readthedocs.org/en/2.4/hash.html)。2.没有设置key有效期，即永久有效。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> getOneFileInRedis(<span class="keyword">int</span> id)&#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="keyword">this</span>.jedis.hget(PHOTO_CACHE_KEY, id.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样图片信息缓存的结构看起来是这样:<br><img src="/img/photos在redis的数据结构示例.png" alt="photos在redis的数据结构示例"><br>实际的情况下，size远大于1000，上文说了约在120w左右，我的这个redis可视化工具(redisclient-win32.x86.2.0)无法获取size这样大的key，报SocketTimeOutException。猜测是向redis获取大key时，无法在一个socket包中写入，造成通讯失败。</p>
<p>以上cacheDao的实现中，没有提供一次批量获取所需的多个图片信息，例如“public Map<integer,string> getBatchFileInRedis(int[] ids)”，甚至在cache interface中都没有提供这样的接口定义。</integer,string></p>
<p>这样导致在上层逻辑中，出现大量一次性代码。因为调用不集中，给重构带来很大麻烦。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">这是分页获取商品列表的伪代码实现</span><br><span class="line"></span><br><span class="line">与数据库product表对应的实体类</span><br><span class="line"><span class="keyword">public</span> class Product&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> photoId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//忽略 getter\setter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">真实的返回到app端的对象</span><br><span class="line"><span class="keyword">public</span> class ProductFull&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> photoId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> photoUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//忽略 getter\setter</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> List&lt;ProductFull&gt; findProductByPage(<span class="built_in">int</span> pageSize,<span class="built_in">int</span> pageNo)&#123;</span><br><span class="line">    List&lt;Product&gt; products=<span class="keyword">this</span>.productDao.findByPage(<span class="built_in">int</span> pageSize,<span class="built_in">int</span> pageNo);<span class="comment">//调用Dao层访问Mysql</span></span><br><span class="line">    List&lt;ProductFull&gt; results=<span class="keyword">new</span> ArrayList&lt;&gt;(products.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span>(Product product:products)&#123;</span><br><span class="line">        ProductFull pf=<span class="keyword">new</span> ProductFull();</span><br><span class="line">        pf.setId(product.getId());<span class="comment">//其他的属性值都是类似的拷贝，或借助Apache-Common beanUtils组件进行拷贝。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">String</span> url=<span class="keyword">this</span>.cacheDao.getOneFileInRedis(product.getPhotoId());<span class="comment">//每一个循环项都访问了redis</span></span><br><span class="line">        pf.setPhotoUrl(url);</span><br><span class="line">        results.<span class="built_in">add</span>(pf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">如果每个商品分页是<span class="number">10</span>条，最坏情况下，需要访问<span class="number">1</span>次Mysql+访问<span class="number">10</span>次redis。非常严重的是，每个分页条数的大小由app端决定，服务端不限制，WTF?</span><br></pre></td></tr></table></figure></p>
<h3 id="缓存登录后的用户信息"><a href="#缓存登录后的用户信息" class="headerlink" title="缓存登录后的用户信息"></a>缓存登录后的用户信息</h3><p>在这个产品面向消费者以及商家，都推出了不同的APP。互联网APP为了提高用户体验，以及降低用户登录登出频次(用户的登录/登出操作，对服务器是比较大的开销)，都会对一次登陆成功的用户，默认在一段时间不需要再次登录。即服务器分配Token给APP本地保存，同时服务器保存Token，设置该Token在一段时间不活动后自动失效，APP后续与服务器的通信中，都需要提交该Token鉴权。这是很常规的做法，短时间有效，而且是非关键性小数据，一次写入多次读取，对于服务器来说，没有比memcached或redis更合适的选择了，那为什么没有选择memcached？我个人的猜测是memcached更适合做Object Store Server，而且很重要的redis具有丰富数据结构与<a href="http://www.cnblogs.com/EE-NovRain/p/3268476.html" target="_blank" rel="external">扩容与容灾机制</a>。</p>
<p>用户的第一次登录，服务端进行参数解析，鉴权后，就需要写入2次redis。<br>用户的登出接口中，直接是删除当前会话的redis记录。</p>
<p>第一次：写入本次登入的Token与用户信息的关联<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">登录成功后，从DB或Cache层获取用户数据，构造用户数据JSON</span><br><span class="line"><span class="keyword">String</span> userLoginSuccessInfo=<span class="string">"&#123;"</span>uid<span class="string">":12321,"</span>name<span class="string">":"</span>张三<span class="string">","</span>sex<span class="string">":0,"</span>avatar_id<span class="string">":345643&#125;"</span>;</span><br><span class="line"></span><br><span class="line">cacheDao的实现</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">String</span> SESSION_CACHE_KEY=<span class="string">"session:"</span>;</span><br><span class="line"><span class="comment">//登录成功</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> setOneLoginSuccessToRedis(<span class="keyword">String</span> token,<span class="keyword">String</span> userLoginSuccessInfo)&#123;</span><br><span class="line">    <span class="keyword">this</span>.jedis.setex(SESSION_CACHE_KEY+token, <span class="number">30</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>, userLoginSuccessInfo);<span class="comment">//1.使用String数据结构。2.设置key有效期30天。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鉴权</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> getOneLoginSuccessInRedis(<span class="keyword">String</span> token)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.jedis.<span class="built_in">get</span>(SESSION_CACHE_KEY+token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//登出</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> logoutSuccessInRedis(<span class="keyword">String</span> token)&#123;</span><br><span class="line">    <span class="keyword">this</span>.jedis.del(SESSION_CACHE_KEY+token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这个以<span class="string">"session:"</span>开头的<span class="built_in">key</span>里，并没有实现从uid如何获取token值？</span><br><span class="line">这会引发的问题：一个用户的多次登录，会生成多个以<span class="string">"session:"</span>开头的<span class="built_in">key</span>，没有覆盖之前登录的token。造成内存空间的浪费，以及不安全。正确的做法在下文会提到。</span><br></pre></td></tr></table></figure></p>
<p>第二次：写入本次登入的用户id与24小时内的积分获取信息。</p>
<p>有一个需求定义用户在登录后可以获取积分，但在24小时内的登录只算一次。</p>
<p>那在服务器端的是实现是，用户第一次登录成功后，在redis写入一个与该用户相关的key，并设置24小时后失效，然后再增加积分。用户在24小时内进行第二次登录，先读取redis是否有相关的key，使用exist命令，如果已经有了，就不增加积分了。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">登录成功后，从DB或Cache层获取用户数据，构造用户与积分业务数据JSON</span><br><span class="line"><span class="keyword">int</span> uid=<span class="number">158263</span>;</span><br><span class="line"></span><br><span class="line">cacheDao的实现</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String USER_ACTIVITY_CACHE_KEY=<span class="string">"daily_activity_"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setOneUserWithActivityToRedis</span><span class="params">(<span class="keyword">int</span> uid)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.jedis.setex(USER_ACTIVITY_CACHE_KEY+uid, <span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>, <span class="string">""</span>);<span class="comment">//1.使用String数据结构。2.设置key有效期24h。3.value部分为空字符串？</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">checkOneUserWithActivityToRedis</span><span class="params">(<span class="keyword">int</span> uid)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.jedis.exists(USER_ACTIVITY_CACHE_KEY+uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这部分的业务属于典型案例，浪费内存空间。<br>第一个问题，不应该使用长前缀，每个key都需要set进内存，长前缀意味着空间占用，以及效率低下。<br>第二个问题，这不是明显可以使用<a href="https://redis.readthedocs.org/en/2.4/sorted_set.html" target="_blank" rel="external">Sorted Set数据结构</a>?，还可以省掉一次exists检查。</p>
<p>虽然redis的TPS很高，但是我们依旧要避免滥用。</p>
<h2 id="这次的问题的描述？"><a href="#这次的问题的描述？" class="headerlink" title="这次的问题的描述？"></a>这次的问题的描述？</h2><p>测试MM提出在性能测试环境中，有一些API在并发数到250~300时，出现很多报错。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis的相关错误</span><br><span class="line">Could <span class="keyword">not</span> <span class="built_in">get</span> <span class="keyword">a</span> resource <span class="built_in">from</span> <span class="keyword">the</span> pool</span><br></pre></td></tr></table></figure></p>
<p>典型报错的接口有</p>
<ul>
<li>分页获取商品列表</li>
<li>用户登录</li>
</ul>
<p>应用中配置redis连接池上限值是1000，而在redis server端配置maxClients=10000;区区这点并发，就耗尽redis连接池资源了？绝不可能，问题还在更远的地方等着我.</p>
<p>性能测试环境配置<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">硬件配置</span><br><span class="line">操作系统    <span class="selector-tag">Linux</span> <span class="selector-tag">Ubuntu</span> 14<span class="selector-class">.04</span><span class="selector-class">.4</span> <span class="selector-tag">LTS</span></span><br><span class="line"><span class="selector-tag">CPU</span>个数   4</span><br><span class="line"><span class="selector-tag">CPU</span>时钟频率 2<span class="selector-class">.6G</span></span><br><span class="line">内存  4<span class="selector-tag">G</span></span><br><span class="line">有无外部存储  云端存储</span><br><span class="line"></span><br><span class="line">软件配置</span><br><span class="line"><span class="selector-tag">docker</span>  1<span class="selector-class">.9</span><span class="selector-class">.1</span></span><br><span class="line"><span class="selector-tag">mysql</span>   5<span class="selector-class">.6</span></span><br><span class="line"><span class="selector-tag">jdk</span> 1<span class="selector-class">.8</span><span class="selector-class">.0_72</span></span><br><span class="line"><span class="selector-tag">solr</span>    5<span class="selector-class">.3</span><span class="selector-class">.0</span></span><br><span class="line"><span class="selector-tag">redis</span>   3<span class="selector-class">.0</span><span class="selector-class">.5</span></span><br></pre></td></tr></table></figure></p>
<h2 id="如何一步步的解决问题？"><a href="#如何一步步的解决问题？" class="headerlink" title="如何一步步的解决问题？"></a>如何一步步的解决问题？</h2><p>在描述问题产生背景时，其实也提到了很多不合理的地方，但<em>存在即合理</em>，处在现在的困境，一定有当时的无奈。现在我们一起来总结一下问题所在。</p>
<h3 id="对缓存图片的处理存在的问题"><a href="#对缓存图片的处理存在的问题" class="headerlink" title="对缓存图片的处理存在的问题"></a>对缓存图片的处理存在的问题</h3><ul>
<li>产品初始化时全量塞入redis/产品停止运行是全量卸掉</li>
<li>产品初始化时塞入redis时，没有做批量操作</li>
<li>对批量获取图片信息不支持，在接口层面就已经没有定义，对于可预见的需求没有进行考虑，这是架构设计的缺陷。</li>
<li>引申：大量的数据，放在一个key里，会出现问题，需要进行水平切分(Sharding)。</li>
</ul>
<h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>1.图片的Id数据在File表采用了<em>自增长</em>的方式生成，不会出现重复，并且有顺序。我们可以利用这一点，在产品初始化时，在Mysql数据库File表只查找2个字段：id/url。程序处理时，先写入reids一个key，使用Hash数据结构，isInitIng:photos-true，标明到正在初始化，其他产品节点不需要重复初始化。使用hmset的方式，一次性将多个键值对存入到redis。完成后，修改isInitIng:photos-false。当有了新图片时，先在Mysql数据库File表进行保存，得到这个图片的Id以及url，使用hset加入该图片到redis。如果需要修改某一张图片的url，也可以用hset。这样在产品停止运行时，是不需要删除redis关于图片的数据的。</p>
<p>2.cache层加入新接口，支持批量获取图片信息<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">String</span> PHOTO_CACHE_KEY=<span class="string">"photos"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> setFileToRedis(Map&lt;Integer,<span class="keyword">String</span>&gt; photos)&#123;</span><br><span class="line">    <span class="keyword">this</span>.jedis.hmset(PHOTO_CACHE_KEY, photos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Map&lt;Integer,<span class="keyword">String</span>&gt; getBatchFileInRedis(<span class="built_in">int</span>[] ids)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.jedis.hmget(PHOTO_CACHE_KEY, coverArrayToString(ids));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span>[] coverArrayToString(<span class="built_in">int</span>[] ids)&#123;</span><br><span class="line">    <span class="keyword">String</span>[] results=<span class="keyword">new</span> <span class="keyword">String</span>[ids.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ids.length; i++) &#123;</span><br><span class="line">        results[i]=ids[i]+<span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对之前循环调用的上层代码进行修改，改为调用批量获取接口。</p>
<p>3.对于单个key承载大量的数据的情况，方案是对key下的values hash key进行分割，使用一定的算法将块状的数据均匀分布在多个key里。给一个<a href="http://blog.nosqlfan.com/html/3379.html" target="_blank" rel="external">参考链接</a>。</p>
<h3 id="对缓存用户登录的处理存在的问题"><a href="#对缓存用户登录的处理存在的问题" class="headerlink" title="对缓存用户登录的处理存在的问题"></a>对缓存用户登录的处理存在的问题</h3><ul>
<li>session的存储不合理，每次登陆都会生成一个新的key值</li>
<li>对USER_ACTIVITY_CACHE_KEY在value部分的数据结构不合理，应采用Sorted Set</li>
<li>对USER_ACTIVITY_CACHE_KEY的命名不合适，过长导致空间浪费和效率低下</li>
<li>因采用错误数据结构，USER_ACTIVITY_CACHE_KEY需要进行多一次的exists判断。</li>
</ul>
<h4 id="方案-1"><a href="#方案-1" class="headerlink" title="方案"></a>方案</h4><p>session的存储不合理的解决，通过新的key(uid:token)来反向标记uid与token的关系，2个key的超时时间保持一致，例如<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">uid:</span><span class="number">158742</span>-token001</span><br></pre></td></tr></table></figure></p>
<p>在写入SESSION_CACHE_KEY时，同时写入到redis，为保证2次写入的原子性，需要使用<a href="https://redis.readthedocs.org/en/2.4/transaction.html" target="_blank" rel="external">redis的事务</a>。如果支持用户的多设备在线，只需要将key(uid:token)更改为Sorted Set结构。因为不存在资源的争夺，这个事务几乎不会失败。在用户登出时，删除掉当前会话信息以及用户关联的会话信息(同样是使用redis事务)。</p>
<p>注意，单机redis环境下，事务命令被完整的支持。扩展到多机redis协同工作时，如果使用了twemproxy，则事务命令不受支持，无法应用该方案。<a href="https://github.com/twitter/twemproxy/blob/master/notes/redis.md" target="_blank" rel="external">查看twemproxy对redis命令的支持情况</a>。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">cacheDao的实现</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">String</span> SESSION_CACHE_KEY=<span class="string">"se:"</span>;<span class="comment">//全称："session:"，改善key命名，按业务进行简略，提升网络传输和存储效率。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">String</span> USER_TOKEN_CACHE_KEY=<span class="string">"u:t:"</span>;<span class="comment">//uid:token:</span></span><br><span class="line"><span class="comment">//登录成功，保存用户登录Token。接收建议的token参数值，返回实际保存的token值。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> setOneLoginSuccessToRedis(<span class="built_in">int</span> uid,<span class="keyword">String</span> token,<span class="keyword">String</span> userLoginSuccessInfo)&#123;<span class="comment">//重构</span></span><br><span class="line">    <span class="keyword">if</span>(checkOneUserTokenExists(uid))&#123;</span><br><span class="line">        token=getOneUserToken(uid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> expireTime=<span class="number">30</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>;<span class="comment">//设置key有效期30天。</span></span><br><span class="line">    <span class="keyword">String</span> ret=<span class="keyword">this</span>.jedis.watch(SESSION_CACHE_KEY+token,USER_TOKEN_CACHE_KEY+uid);<span class="comment">//乐观锁，重试，在这里几乎不存在</span></span><br><span class="line">    <span class="keyword">if</span>(ret==<span class="keyword">null</span>||!ret.equals(<span class="string">"OK"</span>))&#123;</span><br><span class="line">        <span class="built_in">log</span>.error(<span class="string">"redis watch 操作失败.ret:&#123;&#125;"</span>,ret);</span><br><span class="line">        <span class="keyword">this</span>.jedis.unwatch();</span><br><span class="line">    &#125;</span><br><span class="line">    Transaction tx = <span class="keyword">this</span>.jedis.multi();</span><br><span class="line">    tx.setex(SESSION_CACHE_KEY+token, expireTime, userLoginSuccessInfo);</span><br><span class="line">    tx.setex(USER_TOKEN_CACHE_KEY+uid, expireTime, token);</span><br><span class="line">    List&lt;<span class="keyword">Object</span>&gt; results = tx.exec();</span><br><span class="line">    <span class="keyword">return</span> token;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查用户登录Token是否已经存在</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> checkOneUserTokenExists(<span class="built_in">int</span> uid)&#123;<span class="comment">//新方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.jedis.exists(USER_TOKEN_CACHE_KEY+uid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取用户登录Token信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> getOneUserToken(<span class="built_in">int</span> uid)&#123;<span class="comment">//新方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.jedis.<span class="built_in">get</span>(USER_TOKEN_CACHE_KEY+uid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鉴权</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> getOneLoginSuccessInRedis(<span class="keyword">String</span> token)&#123;<span class="comment">//不改动</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.jedis.<span class="built_in">get</span>(SESSION_CACHE_KEY+token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//登出</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> logoutSuccessInRedis(<span class="keyword">String</span> token)&#123;</span><br><span class="line">    <span class="keyword">String</span> ret=<span class="keyword">this</span>.jedis.watch(SESSION_CACHE_KEY+token,USER_TOKEN_CACHE_KEY+uid);<span class="comment">//乐观锁，重试，在这里几乎不存在</span></span><br><span class="line">    <span class="keyword">if</span>(ret==<span class="keyword">null</span>||!ret.equals(<span class="string">"OK"</span>))&#123;</span><br><span class="line">        <span class="built_in">log</span>.error(<span class="string">"redis watch 操作失败.ret:&#123;&#125;"</span>,ret);</span><br><span class="line">        <span class="keyword">this</span>.jedis.unwatch();</span><br><span class="line">    &#125;</span><br><span class="line">    Transaction tx = <span class="keyword">this</span>.jedis.multi();</span><br><span class="line">    tx.del(SESSION_CACHE_KEY+token);</span><br><span class="line">    tx.del(USER_TOKEN_CACHE_KEY+uid);</span><br><span class="line">    List&lt;<span class="keyword">Object</span>&gt; results = tx.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="隐患和思考"><a href="#隐患和思考" class="headerlink" title="隐患和思考"></a>隐患和思考</h4><p>redis事务带来的问题，redis的事务设计比较暴力，这给应用层带来了麻烦。</p>
<ul>
<li>Redis的基本事务（basic transaction）需要用到MULTI命令和EXEC命令，这种事务可以让一个客户端在不被其他客户端打断的情况下执行多个命令。和关系数据库那种可以在执行的过程中进行回滚（rollback）的事务不同，在Redis里面，被MULTI命令和EXEC命令包围的所有命令会一个接一个地执行，直到所有命令都执行完毕为止。当一个事务执行完毕之后，Redis才会处理其他客户端的命令。</li>
<li><a href="http://redisdoc.com/topic/transaction.html" target="_blank" rel="external">Redis 在事务失败时不进行回滚，而是继续执行余下的命令</a></li>
</ul>
<p>基于此，redis事务会在客户端高并发时，其他客户端命令产生阻塞，而且事务回滚需要应用层自己解决。关于事务无法自动回滚，这在NoSQL领域是常见问题了。</p>
<h4 id="redis时间线设计"><a href="#redis时间线设计" class="headerlink" title="redis时间线设计"></a>redis时间线设计</h4><p>接下来对用户在24小时内的积分信息的处理进行改进，以及redis不支持对Set内的单个Element进行有效期设置，我们采用Sorted Set结构，结合Score特性和Quartz来达到元素过期被删除的目的。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cacheDao的实现</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String USER_ACTIVITY_CACHE_KEY=<span class="string">"a:d"</span>;<span class="comment">//全称："activity:daily:"，改善key命名，按业务进行简略，提升网络传输和存储效率。</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setOneUserWithActivityToRedis</span><span class="params">(<span class="keyword">int</span> uid)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.jedis.zadd(USER_ACTIVITY_CACHE_KEY,System.currentTimeMillis(),uid+<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">checkOneUserWithActivityToRedis</span><span class="params">(<span class="keyword">int</span> uid)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.jedis.sismember(USER_ACTIVITY_CACHE_KEY,uid+<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">long</span> score=<span class="keyword">this</span>.jedis.zscore(USER_ACTIVITY_CACHE_KEY,uid+<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">if</span>(score&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">另外加入一个计划任务，借助Quartz即可。</span><br><span class="line">String corn=*/<span class="number">1</span> * * * * ?  <span class="comment">//每1秒钟执行1次</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">cleanExpireUserWithActivity</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> now=System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> <span class="number">1</span>MAgo=now<span class="number">-60</span>*<span class="number">1000</span>;<span class="comment">//1分钟前的时间</span></span><br><span class="line">    <span class="keyword">long</span> remCount=<span class="keyword">this</span>.jedis.zremrangeByScore(USER_ACTIVITY_CACHE_KEY,<span class="number">1</span>MAgo,now);</span><br><span class="line">    log.info(<span class="string">"成功删除的元素数量是：&#123;&#125;，执行时间是：&#123;&#125;"</span>,remCount,now);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="隐患和思考-1"><a href="#隐患和思考-1" class="headerlink" title="隐患和思考"></a>隐患和思考</h4><p>在上文给出的代码中，我们做了一定的容错性，每次删除过去1分钟的所有Element，这样Quartz出现故障时，如果在1分钟内得到fixed，影响的数据只限于1分钟内的Element。每1秒钟触发一次Quartz与删除过去1分钟的所有Element，这2个维度的频率需要权衡。</p>
<ul>
<li>过高频率的访问redis是否会有稳定性问题？</li>
<li>删除Element的时间区间过大，是否会影响redis执行效率(时间复杂度:<a href="http://redisdoc.com/sorted_set/zrevrangebyscore.html" target="_blank" rel="external">O(log(N)+M)</a>)，导致阻塞？</li>
<li>高频率删除Element，是否会影响redis的RDB与AOF备份，因此造成额外的问题？</li>
</ul>
<p>借助Quartz还有misfire的隐患，如何保障Quartz在每一秒钟都顺畅执行一次(Once and only once)，这涉及到操作系统、内存的可靠性，这是一个大的命题，我们不过多讨论。</p>
<p>记录一下对这类问题的思考</p>
<ul>
<li>可以对这个计划任务进行多机并行运行。例如：A计划与B计划都处于运行状态，A在奇数秒触发，B在偶数秒触发。进一步降低2秒内misfire的概率。</li>
<li>在Quartz启动Job时，检测到是业务高峰期，另开启一个异步线程，调用cleanExpireUserWithActivity方法，而cleanExpireUserWithActivity需要承受并发，即redis需要对zremrangeByScore命令支持并发，但redis是<a href="http://www.blogjava.net/caojianhua/archive/2013/01/28/394847.html" target="_blank" rel="external">单进程单线程模型</a>。</li>
<li>异步线程受制于redis，还可以进行改进，使用队列，如ActiveMQ。调用cleanExpireUserWithActivity逻辑进行调整，将命令序列化后写入到点对点队列，另外使用程序监听队列(即消费者端)，有新命令时取出，这里实际调用cleanExpireUserWithActivity，仅在调用成功后释放命令。</li>
<li>现在问题在于如何保障ActiveMQ的稳定运行了，应该还有改进方案。</li>
</ul>
<p>按照以上的方案进行重构后，性能得到显著提升，按理论来说稳定性会有提高，因为不具备稳定性测试的条件，没法比较。</p>
<h2 id="遇到了一些问题"><a href="#遇到了一些问题" class="headerlink" title="遇到了一些问题"></a>遇到了一些问题</h2><p>1.redis一次批量hmset过多时报错<br>hmset操作时，对于一次传入参数数量上限有要求。这取决于你的网络环境下，socket一次写入的字节数上限。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> hmset(<span class="keyword">final</span> <span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">final</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; hash);</span><br></pre></td></tr></table></figure></p>
<p>在我本机的环境下(应用与redis都在本机，不同端口，redis以默认配置运行)，Map<string, string=""> hash的size大于5w左右就会报错。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis<span class="selector-class">.clients</span><span class="selector-class">.jedis</span><span class="selector-class">.exceptions</span><span class="selector-class">.JedisConnectionException</span>: java<span class="selector-class">.net</span><span class="selector-class">.SocketException</span>: Software caused connection abort: socket write error</span><br><span class="line">    at redis<span class="selector-class">.clients</span><span class="selector-class">.jedis</span><span class="selector-class">.Protocol</span><span class="selector-class">.sendCommand</span>(Protocol<span class="selector-class">.java</span>:<span class="number">98</span>)</span><br><span class="line">    at redis<span class="selector-class">.clients</span><span class="selector-class">.jedis</span><span class="selector-class">.Protocol</span><span class="selector-class">.sendCommand</span>(Protocol<span class="selector-class">.java</span>:<span class="number">78</span>)</span><br><span class="line">    at redis<span class="selector-class">.clients</span><span class="selector-class">.jedis</span><span class="selector-class">.Connection</span><span class="selector-class">.sendCommand</span>(Connection<span class="selector-class">.java</span>:<span class="number">101</span>)</span><br><span class="line">    at redis<span class="selector-class">.clients</span><span class="selector-class">.jedis</span><span class="selector-class">.BinaryClient</span><span class="selector-class">.hmset</span>(BinaryClient<span class="selector-class">.java</span>:<span class="number">246</span>)</span><br><span class="line">    at redis<span class="selector-class">.clients</span><span class="selector-class">.jedis</span><span class="selector-class">.Client</span><span class="selector-class">.hmset</span>(Client<span class="selector-class">.java</span>:<span class="number">171</span>)</span><br><span class="line">    at redis<span class="selector-class">.clients</span><span class="selector-class">.jedis</span><span class="selector-class">.Jedis</span><span class="selector-class">.hmset</span>(Jedis<span class="selector-class">.java</span>:<span class="number">652</span>)</span><br></pre></td></tr></table></figure></string,></p>
<p>在这种情况下，必需要将大Map切分成一块块的Map，循环调用hmset<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">final <span class="keyword">static</span> <span class="built_in">int</span> maxEveryTurn=<span class="number">5000</span>;//定义每次最多批量塞入redis的key数量</span><br><span class="line">    /**</span><br><span class="line">     * 批量存储到redis的key数量太多，必需切分成小块存储</span><br><span class="line">     */</span><br><span class="line">    private <span class="keyword">static</span> <span class="built_in">void</span> setTooManyToJedis(<span class="type">Jedis</span> jedis, <span class="type">Map</span>&lt;<span class="type">String</span>, <span class="type">String</span>&gt; map) &#123;</span><br><span class="line">        <span class="built_in">int</span> size=map.size();</span><br><span class="line">        <span class="built_in">int</span> pieceNum=size/maxEveryTurn;</span><br><span class="line">        <span class="keyword">if</span>(size&gt;(pieceNum*maxEveryTurn))&#123;</span><br><span class="line">            pieceNum+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Iterator</span>&lt;<span class="type">Map</span>.<span class="type">Entry</span>&lt;<span class="type">String</span>, <span class="type">String</span>&gt;&gt; <span class="keyword">iterator</span> = map.entrySet().<span class="keyword">iterator</span>();</span><br><span class="line">        <span class="type">List</span>&lt;<span class="type">Map</span>&lt;<span class="type">String</span>, <span class="type">String</span>&gt;&gt; list=new <span class="type">ArrayList</span>&lt;&gt;(pieceNum);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;pieceNum;i++)&#123;</span><br><span class="line">            list.add(new <span class="type">HashMap</span>&lt;&gt;(maxEveryTurn));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">iterator</span>.hasNext()) &#123;</span><br><span class="line">            <span class="type">Map</span>.<span class="type">Entry</span>&lt;<span class="type">String</span>, <span class="type">String</span>&gt; entry = <span class="keyword">iterator</span>.next();</span><br><span class="line">            <span class="type">String</span> key = entry.getKey();</span><br><span class="line">            <span class="built_in">int</span> hashCode = <span class="type">Math</span>.abs(<span class="type">String</span>.valueOf(key).hashCode());</span><br><span class="line">            <span class="built_in">int</span> index=hashCode % pieceNum;</span><br><span class="line">            list.get(index).put(key, map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        map.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Map</span>&lt;<span class="type">String</span>, <span class="type">String</span>&gt; pieceMap:list)&#123;</span><br><span class="line">            setToJedis(jedis, pieceMap);</span><br><span class="line">        &#125;</span><br><span class="line">        list.clear();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>2.持续写redis时遇到rdb问题<br>在完成以上方案的改进后，测试人员的用户登录这个接口在进行性能回归测试时，使用gatling配置250个工作线程进行并发，一共完成50w的用户登录后就算是结束，再根据生成的测试报告分析。<br>刚开始每次压到20多w的用户登录时，就会报错，redis连接池无连接了。分析代码是配置了testOnBorrow:true，这个配置会在获取到连接后检查该连接的有效性，如果无效就丢弃，即在连接池删掉一个连接。而此时redis因为问题无法执行用户端的任何命令，所以所有连接都被当做无效连接被丢弃？直到连接池空了。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在redis命令行执行</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">test</span> <span class="number">12321</span></span><br><span class="line">返回错误：</span><br><span class="line">(<span class="keyword">error</span>) MISCONF Redis <span class="keyword">is</span> configured <span class="keyword">to</span> <span class="keyword">save</span> RDB snapshots, but <span class="keyword">is</span> currently <span class="keyword">not</span> able <span class="keyword">to</span> persist <span class="keyword">on</span> disk. Commands that may <span class="keyword">modify</span> the <span class="keyword">data</span> <span class="keyword">set</span> <span class="keyword">are</span> disabled. Please <span class="keyword">check</span> Redis <span class="keyword">logs</span> <span class="keyword">for</span> details about the <span class="keyword">error</span>.</span><br></pre></td></tr></table></figure></p>
<p>这是因为默认的redis配置是以<a href="http://shanks.leanote.com/post/Untitled-55ca439338f41148cd000759-22" target="_blank" rel="external">RDB的方式</a>进行定期存盘，而存盘时，会拒绝所有外部命令的写入(存盘失败后也会拒绝写入)。因为目前在redis的数据都处于可丢，解决方式也相当的粗暴。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.保证redis处于运行状态，查询系统6379端口的监听情况</span><br><span class="line">2.顺序执行以下命令行，遇到错误请终止</span><br><span class="line">docker exec -it test_redis_1 /bin/bash</span><br><span class="line"><span class="keyword">cd</span> usr/<span class="keyword">local</span>/bin</span><br><span class="line">./redis-<span class="keyword">cli</span>.<span class="keyword">sh</span></span><br><span class="line">config <span class="keyword">set</span> stop-writes-<span class="keyword">on</span>-bgsave-<span class="keyword">error</span> <span class="keyword">no</span></span><br><span class="line">config <span class="keyword">set</span> <span class="keyword">save</span> <span class="string">""</span></span><br><span class="line">quit</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure></p>
<p>执行完以后，重启应用，再压测，呵呵，bug关闭。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.在最后一步提到RDB定期存盘，解决方案存在问题，强行关闭，会导致redis中的数据存在丢失风险，在这里建议有条件的，配置redis为1主1从，Master不进行任何形式的存盘，而Slave配置RDB和AOF方式的存盘，双保险。应用只连接Master即可。。注意Slave与Master第一次进行同步时会使用全量复制，对资源会有比较大的消耗，尽量选择在业务平峰期进行。<br>引申阅读，Master在这里成为了单点，为了Master的高可用，还有进一步的方案，1个Master下挂2个Slave，其中1个Slave(称为A)负责2种方式的存盘，另一个Slave(称为B)作为Master的热备，在Master故障后，参与到投票，成为新的Master，而B节点切换到A，接受A的增量同步。注意自动failover时，外部需要关闭写入命令。完成failover后，使用ip映射切换，使应用层重新恢复使用，相应的，应用层需要做到一定的容错性。实际生产中，不会要求应用层去做容错性措施，会有各种中间件(twemproxy)自动处理。</p>
<p>2.以上业务中对<a href="https://www.ttlsa.com/redis/redis-database/" target="_blank" rel="external">redis的16个数据库</a>没有使用好，可以按业务将数据存储到不同数据库，隔离影响。</p>
<h3 id="常用命令合集"><a href="#常用命令合集" class="headerlink" title="常用命令合集"></a>常用命令合集</h3><p>调试过程中，由于可视化工具对redis支持的不够好，使用了很多redis的命令行，现在我们总结一下吧！<br>由于docker的风行，好处多多，我们在测试环境、线上环境也使用了docker/docker-compose</p>
<h4 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker-compose ps          <span class="comment">//查看yml文件中所有容器的运行情况</span></span><br><span class="line">docker-compose up -d xw    <span class="comment">//将yml文件中容器名称定义为xw的容器，以后台运行的方式运行起来，如果是tomcat镜像，会调用tomcat的startup.sh.</span></span><br><span class="line">docker-compose <span class="built_in">stop</span> xw     <span class="comment">//将yml文件中容器名称定义为xw的容器停止，如果是tomcat镜像，会调用tomcat的shutdown.sh</span></span><br><span class="line">docker-compose <span class="built_in">stop</span>        <span class="comment">//查看yml文件中所有容器进行停止</span></span><br><span class="line">docker-compose rm xw       <span class="comment">//移除xw镜像</span></span><br><span class="line">docker-compose build xw    <span class="comment">//对xw进行镜像构建</span></span><br></pre></td></tr></table></figure>
<h4 id="redis-cli-sh-info"><a href="#redis-cli-sh-info" class="headerlink" title="./redis-cli.sh/info"></a>./redis-cli.sh/info</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">F:</span>\Redis&gt; ./redis-<span class="keyword">cli</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; info</span><br><span class="line"><span class="meta"># Server</span></span><br><span class="line"><span class="symbol">redis_version:</span><span class="number">3.0</span><span class="number">.501</span></span><br><span class="line"><span class="symbol">redis_git_sha1:</span><span class="number">00000000</span></span><br><span class="line"><span class="symbol">redis_git_dirty:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">redis_build_id:</span>ba05b51e58eb9205</span><br><span class="line"><span class="symbol">redis_mode:</span>standalone</span><br><span class="line"><span class="symbol">os:</span>Windows</span><br><span class="line"><span class="symbol">arch_bits:</span><span class="number">64</span></span><br><span class="line"><span class="symbol">multiplexing_api:</span>WinSock_IOCP</span><br><span class="line"><span class="symbol">process_id:</span><span class="number">1552</span></span><br><span class="line"><span class="symbol">run_id:</span>d3f2efa1c6cf26c7cf9246c2fcaca89b8e109439</span><br><span class="line"><span class="symbol">tcp_port:</span><span class="number">6379</span></span><br><span class="line"><span class="symbol">uptime_in_seconds:</span><span class="number">462095</span></span><br><span class="line"><span class="symbol">uptime_in_days:</span><span class="number">5</span></span><br><span class="line"><span class="symbol">hz:</span><span class="number">10</span></span><br><span class="line"><span class="symbol">lru_clock:</span><span class="number">16404129</span></span><br><span class="line"><span class="symbol">config_file:</span>F:\Redis\redis.windows.conf</span><br><span class="line"></span><br><span class="line"><span class="meta"># Clients</span></span><br><span class="line"><span class="symbol">connected_clients:</span><span class="number">1</span></span><br><span class="line"><span class="symbol">client_longest_output_list:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">client_biggest_input_buf:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">blocked_clients:</span><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Memory</span></span><br><span class="line"><span class="symbol">used_memory:</span><span class="number">842704</span></span><br><span class="line"><span class="symbol">used_memory_human:</span><span class="number">822.95</span>K</span><br><span class="line"><span class="symbol">used_memory_rss:</span><span class="number">804920</span></span><br><span class="line"><span class="symbol">used_memory_peak:</span><span class="number">374731600</span></span><br><span class="line"><span class="symbol">used_memory_peak_human:</span><span class="number">357.37</span>M</span><br><span class="line"><span class="symbol">used_memory_lua:</span><span class="number">36864</span></span><br><span class="line"><span class="symbol">mem_fragmentation_ratio:</span><span class="number">0.96</span></span><br><span class="line"><span class="symbol">mem_allocator:</span>jemalloc<span class="number">-3.6</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Persistence</span></span><br><span class="line"><span class="symbol">loading:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">rdb_changes_since_last_save:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">rdb_bgsave_in_progress:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">rdb_last_save_time:</span><span class="number">1459242952</span></span><br><span class="line"><span class="symbol">rdb_last_bgsave_status:</span>ok</span><br><span class="line"><span class="symbol">rdb_last_bgsave_time_sec:</span><span class="number">1</span></span><br><span class="line"><span class="symbol">rdb_current_bgsave_time_sec:</span><span class="number">-1</span></span><br><span class="line"><span class="symbol">aof_enabled:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">aof_rewrite_in_progress:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">aof_rewrite_scheduled:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">aof_last_rewrite_time_sec:</span><span class="number">-1</span></span><br><span class="line"><span class="symbol">aof_current_rewrite_time_sec:</span><span class="number">-1</span></span><br><span class="line"><span class="symbol">aof_last_bgrewrite_status:</span>ok</span><br><span class="line"><span class="symbol">aof_last_write_status:</span>ok</span><br><span class="line"></span><br><span class="line"><span class="meta"># Stats</span></span><br><span class="line"><span class="symbol">total_connections_received:</span><span class="number">1010</span></span><br><span class="line"><span class="symbol">total_commands_processed:</span><span class="number">49859</span></span><br><span class="line"><span class="symbol">instantaneous_ops_per_sec:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">total_net_input_bytes:</span><span class="number">1822381802</span></span><br><span class="line"><span class="symbol">total_net_output_bytes:</span><span class="number">3650427</span></span><br><span class="line"><span class="symbol">instantaneous_input_kbps:</span><span class="number">0.00</span></span><br><span class="line"><span class="symbol">instantaneous_output_kbps:</span><span class="number">0.00</span></span><br><span class="line"><span class="symbol">rejected_connections:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">sync_full:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">sync_partial_ok:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">sync_partial_err:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">expired_keys:</span><span class="number">1073</span></span><br><span class="line"><span class="symbol">evicted_keys:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">keyspace_hits:</span><span class="number">20782</span></span><br><span class="line"><span class="symbol">keyspace_misses:</span><span class="number">738</span></span><br><span class="line"><span class="symbol">pubsub_channels:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">pubsub_patterns:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">latest_fork_usec:</span><span class="number">388023</span></span><br><span class="line"><span class="symbol">migrate_cached_sockets:</span><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Replication</span></span><br><span class="line"><span class="symbol">role:</span>master</span><br><span class="line"><span class="symbol">connected_slaves:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">master_repl_offset:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">repl_backlog_active:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">repl_backlog_size:</span><span class="number">1048576</span></span><br><span class="line"><span class="symbol">repl_backlog_first_byte_offset:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">repl_backlog_histlen:</span><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># CPU</span></span><br><span class="line"><span class="symbol">used_cpu_sys:</span><span class="number">9.45</span></span><br><span class="line"><span class="symbol">used_cpu_user:</span><span class="number">38.25</span></span><br><span class="line"><span class="symbol">used_cpu_sys_children:</span><span class="number">0.00</span></span><br><span class="line"><span class="symbol">used_cpu_user_children:</span><span class="number">0.00</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Cluster</span></span><br><span class="line"><span class="symbol">cluster_enabled:</span><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Keyspace</span></span><br><span class="line"><span class="symbol">db0:</span>keys=<span class="number">1</span>,expires=<span class="number">0</span>,avg_ttl=<span class="number">0</span></span><br></pre></td></tr></table></figure>
<h4 id="set-get"><a href="#set-get" class="headerlink" title="set/get"></a>set/get</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">set</span> <span class="selector-tag">test</span> 123456</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">get</span> <span class="selector-tag">test</span></span><br><span class="line">"123456"</span><br></pre></td></tr></table></figure>
<h4 id="hset-hmset-hget-hmget"><a href="#hset-hmset-hget-hmget" class="headerlink" title="hset/hmset/hget/hmget"></a>hset/hmset/hget/hmget</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> hset testHash key1 value11</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> hget testHash</span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">'hget'</span> command</span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> hget testHash key1</span><br><span class="line"><span class="string">"value11"</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> hset testHash key1 value11 key2 value22</span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">'hset'</span> command</span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> hmset testHash key1 value11 key2 value22</span><br><span class="line">OK</span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> hmget testHash key1 key2</span><br><span class="line"><span class="number">1</span>) <span class="string">"value11"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"value22"</span></span><br></pre></td></tr></table></figure>
<h4 id="hlen-keys"><a href="#hlen-keys" class="headerlink" title="hlen/keys"></a>hlen/keys</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> len test</span><br><span class="line">(error) ERR unknown command <span class="string">'len'</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> hlen testHash</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> keys test</span><br><span class="line"><span class="number">1</span>) <span class="string">"test"</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> keys testHash</span><br><span class="line"><span class="number">1</span>) <span class="string">"testHash"</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> keys *</span><br><span class="line"><span class="number">1</span>) <span class="string">"testHash"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"test"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"message-queue-sms"</span></span><br></pre></td></tr></table></figure>
<h4 id="config-set-get"><a href="#config-set-get" class="headerlink" title="config set/get"></a>config set/get</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> config get *</span><br><span class="line">  <span class="number">1</span>) <span class="string">"dbfilename"</span></span><br><span class="line">  <span class="number">2</span>) <span class="string">"dump.rdb"</span></span><br><span class="line">  <span class="number">3</span>) <span class="string">"requirepass"</span></span><br><span class="line">  <span class="number">4</span>) <span class="string">""</span></span><br><span class="line">  <span class="number">5</span>) <span class="string">"masterauth"</span></span><br><span class="line">  <span class="number">6</span>) <span class="string">""</span></span><br><span class="line">  <span class="number">7</span>) <span class="string">"unixsocket"</span></span><br><span class="line">  <span class="number">8</span>) <span class="string">""</span></span><br><span class="line">  <span class="number">9</span>) <span class="string">"logfile"</span></span><br><span class="line"> <span class="number">10</span>) <span class="string">""</span></span><br><span class="line"> <span class="number">11</span>) <span class="string">"pidfile"</span></span><br><span class="line"> <span class="number">12</span>) <span class="string">"/var/run/redis.pid"</span></span><br><span class="line"> <span class="number">13</span>) <span class="string">"maxmemory"</span></span><br><span class="line"> <span class="number">14</span>) <span class="string">"512000000"</span></span><br><span class="line"> <span class="number">15</span>) <span class="string">"maxmemory-samples"</span></span><br><span class="line"> <span class="number">16</span>) <span class="string">"5"</span></span><br><span class="line"> <span class="number">17</span>) <span class="string">"timeout"</span></span><br><span class="line"> <span class="number">18</span>) <span class="string">"0"</span></span><br><span class="line"> <span class="number">19</span>) <span class="string">"tcp-keepalive"</span></span><br><span class="line"> <span class="number">20</span>) <span class="string">"0"</span></span><br><span class="line"> <span class="number">21</span>) <span class="string">"auto-aof-rewrite-percentage"</span></span><br><span class="line"> <span class="number">22</span>) <span class="string">"100"</span></span><br><span class="line"> <span class="number">23</span>) <span class="string">"auto-aof-rewrite-min-size"</span></span><br><span class="line"> <span class="number">24</span>) <span class="string">"67108864"</span></span><br><span class="line"> <span class="number">25</span>) <span class="string">"hash-max-ziplist-entries"</span></span><br><span class="line"> <span class="number">26</span>) <span class="string">"512"</span></span><br><span class="line"> <span class="number">27</span>) <span class="string">"hash-max-ziplist-value"</span></span><br><span class="line"> <span class="number">28</span>) <span class="string">"64"</span></span><br><span class="line"> <span class="number">29</span>) <span class="string">"list-max-ziplist-entries"</span></span><br><span class="line"> <span class="number">30</span>) <span class="string">"512"</span></span><br><span class="line"> <span class="number">31</span>) <span class="string">"list-max-ziplist-value"</span></span><br><span class="line"> <span class="number">32</span>) <span class="string">"64"</span></span><br><span class="line"> <span class="number">33</span>) <span class="string">"set-max-intset-entries"</span></span><br><span class="line"> <span class="number">34</span>) <span class="string">"512"</span></span><br><span class="line"> <span class="number">35</span>) <span class="string">"zset-max-ziplist-entries"</span></span><br><span class="line"> <span class="number">36</span>) <span class="string">"128"</span></span><br><span class="line"> <span class="number">37</span>) <span class="string">"zset-max-ziplist-value"</span></span><br><span class="line"> <span class="number">38</span>) <span class="string">"64"</span></span><br><span class="line"> <span class="number">39</span>) <span class="string">"hll-sparse-max-bytes"</span></span><br><span class="line"> <span class="number">40</span>) <span class="string">"3000"</span></span><br><span class="line"> <span class="number">41</span>) <span class="string">"lua-time-limit"</span></span><br><span class="line"> <span class="number">42</span>) <span class="string">"5000"</span></span><br><span class="line"> <span class="number">43</span>) <span class="string">"slowlog-log-slower-than"</span></span><br><span class="line"> <span class="number">44</span>) <span class="string">"10000"</span></span><br><span class="line"> <span class="number">45</span>) <span class="string">"latency-monitor-threshold"</span></span><br><span class="line"> <span class="number">46</span>) <span class="string">"0"</span></span><br><span class="line"> <span class="number">47</span>) <span class="string">"slowlog-max-len"</span></span><br><span class="line"> <span class="number">48</span>) <span class="string">"128"</span></span><br><span class="line"> <span class="number">49</span>) <span class="string">"port"</span></span><br><span class="line"> <span class="number">50</span>) <span class="string">"6379"</span></span><br><span class="line"> <span class="number">51</span>) <span class="string">"tcp-backlog"</span></span><br><span class="line"> <span class="number">52</span>) <span class="string">"511"</span></span><br><span class="line"> <span class="number">53</span>) <span class="string">"databases"</span></span><br><span class="line"> <span class="number">54</span>) <span class="string">"16"</span></span><br><span class="line"> <span class="number">55</span>) <span class="string">"repl-ping-slave-period"</span></span><br><span class="line"> <span class="number">56</span>) <span class="string">"10"</span></span><br><span class="line"> <span class="number">57</span>) <span class="string">"repl-timeout"</span></span><br><span class="line"> <span class="number">58</span>) <span class="string">"60"</span></span><br><span class="line"> <span class="number">59</span>) <span class="string">"repl-backlog-size"</span></span><br><span class="line"> <span class="number">60</span>) <span class="string">"1048576"</span></span><br><span class="line"> <span class="number">61</span>) <span class="string">"repl-backlog-ttl"</span></span><br><span class="line"> <span class="number">62</span>) <span class="string">"3600"</span></span><br><span class="line"> <span class="number">63</span>) <span class="string">"maxclients"</span></span><br><span class="line"> <span class="number">64</span>) <span class="string">"10000"</span></span><br><span class="line"> <span class="number">65</span>) <span class="string">"watchdog-period"</span></span><br><span class="line"> <span class="number">66</span>) <span class="string">"0"</span></span><br><span class="line"> <span class="number">67</span>) <span class="string">"slave-priority"</span></span><br><span class="line"> <span class="number">68</span>) <span class="string">"100"</span></span><br><span class="line"> <span class="number">69</span>) <span class="string">"min-slaves-to-write"</span></span><br><span class="line"> <span class="number">70</span>) <span class="string">"0"</span></span><br><span class="line"> <span class="number">71</span>) <span class="string">"min-slaves-max-lag"</span></span><br><span class="line"> <span class="number">72</span>) <span class="string">"10"</span></span><br><span class="line"> <span class="number">73</span>) <span class="string">"hz"</span></span><br><span class="line"> <span class="number">74</span>) <span class="string">"10"</span></span><br><span class="line"> <span class="number">75</span>) <span class="string">"cluster-node-timeout"</span></span><br><span class="line"> <span class="number">76</span>) <span class="string">"15000"</span></span><br><span class="line"> <span class="number">77</span>) <span class="string">"cluster-migration-barrier"</span></span><br><span class="line"> <span class="number">78</span>) <span class="string">"1"</span></span><br><span class="line"> <span class="number">79</span>) <span class="string">"cluster-slave-validity-factor"</span></span><br><span class="line"> <span class="number">80</span>) <span class="string">"10"</span></span><br><span class="line"> <span class="number">81</span>) <span class="string">"repl-diskless-sync-delay"</span></span><br><span class="line"> <span class="number">82</span>) <span class="string">"5"</span></span><br><span class="line"> <span class="number">83</span>) <span class="string">"cluster-require-full-coverage"</span></span><br><span class="line"> <span class="number">84</span>) <span class="string">"yes"</span></span><br><span class="line"> <span class="number">85</span>) <span class="string">"no-appendfsync-on-rewrite"</span></span><br><span class="line"> <span class="number">86</span>) <span class="string">"no"</span></span><br><span class="line"> <span class="number">87</span>) <span class="string">"slave-serve-stale-data"</span></span><br><span class="line"> <span class="number">88</span>) <span class="string">"yes"</span></span><br><span class="line"> <span class="number">89</span>) <span class="string">"slave-read-only"</span></span><br><span class="line"> <span class="number">90</span>) <span class="string">"yes"</span></span><br><span class="line"> <span class="number">91</span>) <span class="string">"stop-writes-on-bgsave-error"</span></span><br><span class="line"> <span class="number">92</span>) <span class="string">"yes"</span></span><br><span class="line"> <span class="number">93</span>) <span class="string">"daemonize"</span></span><br><span class="line"> <span class="number">94</span>) <span class="string">"no"</span></span><br><span class="line"> <span class="number">95</span>) <span class="string">"rdbcompression"</span></span><br><span class="line"> <span class="number">96</span>) <span class="string">"yes"</span></span><br><span class="line"> <span class="number">97</span>) <span class="string">"rdbchecksum"</span></span><br><span class="line"> <span class="number">98</span>) <span class="string">"yes"</span></span><br><span class="line"> <span class="number">99</span>) <span class="string">"activerehashing"</span></span><br><span class="line"><span class="number">100</span>) <span class="string">"yes"</span></span><br><span class="line"><span class="number">101</span>) <span class="string">"repl-disable-tcp-nodelay"</span></span><br><span class="line"><span class="number">102</span>) <span class="string">"no"</span></span><br><span class="line"><span class="number">103</span>) <span class="string">"repl-diskless-sync"</span></span><br><span class="line"><span class="number">104</span>) <span class="string">"no"</span></span><br><span class="line"><span class="number">105</span>) <span class="string">"aof-rewrite-incremental-fsync"</span></span><br><span class="line"><span class="number">106</span>) <span class="string">"yes"</span></span><br><span class="line"><span class="number">107</span>) <span class="string">"aof-load-truncated"</span></span><br><span class="line"><span class="number">108</span>) <span class="string">"yes"</span></span><br><span class="line"><span class="number">109</span>) <span class="string">"appendonly"</span></span><br><span class="line"><span class="number">110</span>) <span class="string">"no"</span></span><br><span class="line"><span class="number">111</span>) <span class="string">"dir"</span></span><br><span class="line"><span class="number">112</span>) <span class="string">"F:\\Redis"</span></span><br><span class="line"><span class="number">113</span>) <span class="string">"maxmemory-policy"</span></span><br><span class="line"><span class="number">114</span>) <span class="string">"noeviction"</span></span><br><span class="line"><span class="number">115</span>) <span class="string">"appendfsync"</span></span><br><span class="line"><span class="number">116</span>) <span class="string">"everysec"</span></span><br><span class="line"><span class="number">117</span>) <span class="string">"save"</span></span><br><span class="line"><span class="number">118</span>) <span class="string">"jd 900 jd 300 jd 60"</span></span><br><span class="line"><span class="number">119</span>) <span class="string">"loglevel"</span></span><br><span class="line"><span class="number">120</span>) <span class="string">"verbose"</span></span><br><span class="line"><span class="number">121</span>) <span class="string">"client-output-buffer-limit"</span></span><br><span class="line"><span class="number">122</span>) <span class="string">"normal 0 0 0 slave 268435456 67108864 60 pubsub 33554432 8388608 60"</span></span><br><span class="line"><span class="number">123</span>) <span class="string">"unixsocketperm"</span></span><br><span class="line"><span class="number">124</span>) <span class="string">"0"</span></span><br><span class="line"><span class="number">125</span>) <span class="string">"slaveof"</span></span><br><span class="line"><span class="number">126</span>) <span class="string">""</span></span><br><span class="line"><span class="number">127</span>) <span class="string">"notify-keyspace-events"</span></span><br><span class="line"><span class="number">128</span>) <span class="string">""</span></span><br><span class="line"><span class="number">129</span>) <span class="string">"bind"</span></span><br><span class="line"><span class="number">130</span>) <span class="string">""</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> config set save <span class="string">""</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<h4 id="flushdb-flushall"><a href="#flushdb-flushall" class="headerlink" title="flushdb/flushall"></a>flushdb/flushall</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">flushdb</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">flushall</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br></pre></td></tr></table></figure>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li>redis删除有序集合部分过期元素：<a href="http://caozm.blog.51cto.com/1118764/1389168" target="_blank" rel="external">http://caozm.blog.51cto.com/1118764/1389168</a></li>
<li>节约内存：Instagram的Redis实践：<a href="http://blog.nosqlfan.com/html/3379.html" target="_blank" rel="external">http://blog.nosqlfan.com/html/3379.html</a></li>
<li>redis持久化机制：<a href="http://shanks.leanote.com/post/Untitled-55ca439338f41148cd000759-22" target="_blank" rel="external">http://shanks.leanote.com/post/Untitled-55ca439338f41148cd000759-22</a></li>
<li>Redis事务的分析及改进：<a href="https://segmentfault.com/a/1190000002594059" target="_blank" rel="external">https://segmentfault.com/a/1190000002594059</a></li>
<li>redis 多数据库：<a href="https://www.ttlsa.com/redis/redis-database/" target="_blank" rel="external">https://www.ttlsa.com/redis/redis-database/</a></li>
<li>利用Sorted Set数据结构，为元素设置有效期：<a href="http://stackoverflow.com/questions/7577923/redis-possible-to-expire-an-element-in-an-array-or-sorted-set" target="_blank" rel="external">http://stackoverflow.com/questions/7577923/redis-possible-to-expire-an-element-in-an-array-or-sorted-set</a></li>
<li>redis的Slave选举与优先级：<a href="https://segmentfault.com/a/1190000002685515" target="_blank" rel="external">https://segmentfault.com/a/1190000002685515</a></li>
<li>利用代理中间件实现大规模Redis集群：<a href="http://www.imooc.com/article/4343" target="_blank" rel="external">http://www.imooc.com/article/4343</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL查询提高篇：捋清连接查询的那些事儿]]></title>
      <url>http://amao12580.github.io/post/2016/03/SQL-improve-elegant-use-join-query/</url>
      <content type="html"><![CDATA[<p>数据库中的表可通过外键将彼此联系起来。主键（Primary Key）是一个列，在这个列中的每一行的值都是唯一的。在表中，每个主键的值都是唯一的。这样做的目的是在不重复每个表中的所有数据的情况下，把表间的数据交叉捆绑在一起。</p>
<p>而在两个表之间建立关联关系，是不要求任何一个表的关联列(column)是主键的，这个关联列可以是任何类型的列，但是要求，两个表的关联列可以做关联关系的条件计算，为避免转换影响效率，两个关联列最好保持类型、长度一致。</p>
<p>为方便说明，定义以下2张表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">用户信息表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`uid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">  <span class="string">`sex`</span> tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">  <span class="string">`age`</span> tinyint(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">  <span class="string">`mobile`</span> <span class="built_in">varchar</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'手机号码'</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">  <span class="string">`register_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'注册时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`uid`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`index_mobile`</span> (<span class="string">`mobile`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'100'</span>, <span class="string">'张三'</span>, <span class="string">'1'</span>, <span class="string">'28'</span>, <span class="string">'13547521456'</span>, <span class="string">'ASDAWQ@!#SDF@#$%XCF'</span>, <span class="string">'2016-03-30 17:47:51'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'101'</span>, <span class="string">'李四'</span>, <span class="string">'2'</span>, <span class="string">'35'</span>, <span class="string">'17025856329'</span>, <span class="string">'234ASD@#$@#$AFSDFRT'</span>, <span class="string">'2016-03-30 17:48:34'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'102'</span>, <span class="string">'王五'</span>, <span class="string">'1'</span>, <span class="string">'48'</span>, <span class="string">'15925874536'</span>, <span class="string">'#$%SDFSDR@#$%@#$#@'</span>, <span class="string">'2016-03-30 17:53:49'</span>);</span><br><span class="line"></span><br><span class="line">订单信息表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`order`</span> (</span><br><span class="line">  <span class="string">`order_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'订单编号'</span>,</span><br><span class="line">  <span class="string">`uid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户Id'</span>,</span><br><span class="line">  <span class="string">`amout`</span> mediumtext <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'订单金额(单位为分)'</span>,</span><br><span class="line">  <span class="string">`status`</span> tinyint(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'订单状态'</span>,</span><br><span class="line">  <span class="string">`order_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'订单时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`order_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`order`</span> <span class="keyword">VALUES</span> (<span class="string">'200'</span>, <span class="string">'100'</span>, <span class="string">'5899'</span>, <span class="string">'0'</span>, <span class="string">'2016-03-30 17:54:20'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`order`</span> <span class="keyword">VALUES</span> (<span class="string">'201'</span>, <span class="string">'100'</span>, <span class="string">'6799'</span>, <span class="string">'0'</span>, <span class="string">'2016-03-30 17:54:38'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`order`</span> <span class="keyword">VALUES</span> (<span class="string">'202'</span>, <span class="string">'101'</span>, <span class="string">'12699'</span>, <span class="string">'0'</span>, <span class="string">'2016-03-30 17:55:01'</span>);</span><br></pre></td></tr></table></figure></p>
<p>数据库现在2张表的数据看起来是这样：<br>user表</p>
<table>
<thead>
<tr>
<th>uid</th>
<th style="text-align:center">name</th>
<th style="text-align:right">sex</th>
<th style="text-align:right">age</th>
<th style="text-align:right">mobile</th>
<th style="text-align:right">password</th>
<th style="text-align:right">register_time</th>
</tr>
</thead>
<tbody>
<tr>
<td>100</td>
<td style="text-align:center">张三</td>
<td style="text-align:right">1</td>
<td style="text-align:right">28</td>
<td style="text-align:right">13547521456</td>
<td style="text-align:right">password</td>
<td style="text-align:right">2016-03-30 17:47:51</td>
</tr>
<tr>
<td>101</td>
<td style="text-align:center">李四</td>
<td style="text-align:right">2</td>
<td style="text-align:right">35</td>
<td style="text-align:right">17025856329</td>
<td style="text-align:right">password</td>
<td style="text-align:right">2016-03-30 17:48:34</td>
</tr>
<tr>
<td>102</td>
<td style="text-align:center">王五</td>
<td style="text-align:right">1</td>
<td style="text-align:right">48</td>
<td style="text-align:right">15925874536</td>
<td style="text-align:right">password</td>
<td style="text-align:right">2016-03-30 17:53:49</td>
</tr>
</tbody>
</table>
<p>order表</p>
<table>
<thead>
<tr>
<th>order_id</th>
<th style="text-align:center">uid</th>
<th style="text-align:right">amout</th>
<th style="text-align:right">status</th>
<th style="text-align:right">order_time</th>
</tr>
</thead>
<tbody>
<tr>
<td>200</td>
<td style="text-align:center">100</td>
<td style="text-align:right">5899</td>
<td style="text-align:right">0</td>
<td style="text-align:right">2016-03-30 17:54:20</td>
</tr>
<tr>
<td>201</td>
<td style="text-align:center">100</td>
<td style="text-align:right">6799</td>
<td style="text-align:right">0</td>
<td style="text-align:right">2016-03-30 17:54:38</td>
</tr>
<tr>
<td>202</td>
<td style="text-align:center">101</td>
<td style="text-align:right">12699</td>
<td style="text-align:right">0</td>
<td style="text-align:right">2016-03-30 17:55:01</td>
</tr>
</tbody>
</table>
<h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><p>查询所有用户的订单信息，订单信息不能为空，要求返回的字段有：用户姓名、手机号码、订单号、订单状态、订单金额。</p>
<h3 id="left-join-VS-right-join"><a href="#left-join-VS-right-join" class="headerlink" title="left join VS right join"></a>left join VS right join</h3><p>规律：</p>
<ul>
<li>A表 left join B表；则返回A表的所有符合条件(on条件、where条件)的记录。A表的字段不会为null，而B表没有对应记录时,字段值返回null。</li>
<li><p>B表 left join A表；则返回B表的所有符合条件(on条件、where条件)的记录。B表的字段不会为null，而A表没有对应记录时,字段值返回null。</p>
</li>
<li><p>A表 left join B表 等价于 B表 right join A表.</p>
</li>
<li>A表 right join B表 等价于 B表 left join A表.</li>
</ul>
<p>正确的SQL语句：<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class="line"> FROM `user` RIGHT JOIN `order` ON `user`.uid=`order`.uid</span><br><span class="line"></span><br><span class="line">等价于</span><br><span class="line"></span><br><span class="line">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class="line"> FROM `order` LEFT JOIN `user` ON `user`.uid=`order`.uid</span><br></pre></td></tr></table></figure></p>
<p>结果集是：</p>
<table>
<thead>
<tr>
<th>name</th>
<th style="text-align:center">mobile</th>
<th style="text-align:right">order_id</th>
<th style="text-align:right">status</th>
<th style="text-align:right">amout</th>
</tr>
</thead>
<tbody>
<tr>
<td>张三</td>
<td style="text-align:center">13547521456</td>
<td style="text-align:right">200</td>
<td style="text-align:right">0</td>
<td style="text-align:right">5899</td>
</tr>
<tr>
<td>张三</td>
<td style="text-align:center">13547521456</td>
<td style="text-align:right">201</td>
<td style="text-align:right">0</td>
<td style="text-align:right">6799</td>
</tr>
<tr>
<td>李四</td>
<td style="text-align:center">17025856329</td>
<td style="text-align:right">202</td>
<td style="text-align:right">0</td>
<td style="text-align:right">12699</td>
</tr>
</tbody>
</table>
<p>错误的SQL语句：<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class="line"> FROM `user` LEFT JOIN `order` ON `user`.uid=`order`.uid</span><br><span class="line"></span><br><span class="line">等价于</span><br><span class="line"></span><br><span class="line">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class="line"> FROM `order` RIGHT JOIN `user` ON `user`.uid=`order`.uid</span><br></pre></td></tr></table></figure></p>
<p>结果集是：</p>
<table>
<thead>
<tr>
<th>name</th>
<th style="text-align:center">mobile</th>
<th style="text-align:right">order_id</th>
<th style="text-align:right">status</th>
<th style="text-align:right">amout</th>
</tr>
</thead>
<tbody>
<tr>
<td>张三</td>
<td style="text-align:center">13547521456</td>
<td style="text-align:right">200</td>
<td style="text-align:right">0</td>
<td style="text-align:right">5899</td>
</tr>
<tr>
<td>张三</td>
<td style="text-align:center">13547521456</td>
<td style="text-align:right">201</td>
<td style="text-align:right">0</td>
<td style="text-align:right">6799</td>
</tr>
<tr>
<td>李四</td>
<td style="text-align:center">17025856329</td>
<td style="text-align:right">202</td>
<td style="text-align:right">0</td>
<td style="text-align:right">12699</td>
</tr>
<tr>
<td>王五</td>
<td style="text-align:center">15925874536</td>
<td style="text-align:right">null</td>
<td style="text-align:right">null</td>
<td style="text-align:right">null</td>
</tr>
</tbody>
</table>
<p>可以看出错误的SQL语句中，查出了没有订单的用户“王五”</p>
<h3 id="inner-join"><a href="#inner-join" class="headerlink" title="inner join"></a>inner join</h3><p>规律：</p>
<ul>
<li>A表 inner join B表；则返回A表和B表同时符合条件(on条件、where条件)的记录。</li>
</ul>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">两种写法，后者使用的居多</span><br><span class="line"></span><br><span class="line">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class="line"> FROM `order` INNER JOIN `user` ON `user`.uid=`order`.uid<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">等价于</span><br><span class="line"></span><br><span class="line">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class="line"> FROM `order`,`user` WHERE `user`.uid=`order`.uid<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h3 id="left-outter-join-VS-right-outter-join"><a href="#left-outter-join-VS-right-outter-join" class="headerlink" title="left outter join VS right outter join"></a>left outter join VS right outter join</h3><p>left join 是left outer join的简写，left join默认是outer属性的。</p>
<p>在某些数据库(如Oracle)中， left join 称为 left outer join；相应的right join 称为 right outter join</p>
<h3 id="full-join"><a href="#full-join" class="headerlink" title="full join"></a>full join</h3><ul>
<li>在某些数据库中， FULL JOIN 称为 FULL OUTER JOIN。</li>
<li>只要其中某个表存在匹配，FULL JOIN 关键字就会返回行，意思是只需要有一个以上的表满足条件即可。</li>
<li><p>Oracle 、DB2、SQL Server、PostgreSQL 支持 Full JOIN，但是 MySQL 是不支持的。</p>
<figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MySQL</span>使用<span class="type">FULL</span> <span class="type">JOIN</span>报错</span><br><span class="line">[<span class="type">Err</span>] <span class="number">1054</span> - <span class="type">Unknown</span> column <span class="symbol">'order</span>.uid' <span class="keyword">in</span> <span class="symbol">'on</span> clause'</span><br></pre></td></tr></table></figure>
</li>
<li><p>MySQL可以通过 LEFT JOIN + UNION + RIGHT JOIN 的方式 来实现Full JOIN。</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class="line"> from `order` left join `user` on `user`.uid=`order`.uid</span><br><span class="line"> union</span><br><span class="line">select `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class="line"> from `order` right join `user` on `user`.uid=`order`.uid<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="cross-join"><a href="#cross-join" class="headerlink" title="cross join"></a>cross join</h3><p>除了在FROM子句中使用逗号间隔连接的表外，SQL还支持另一种被称为交叉连接的操作，它们都返回被连接的两个表所有数据行的笛卡尔积，返回到的数据行数等于第一个表中符合查询条件的数据行数乘以第二个表中符合查询条件的数据行数。惟一的不同在于，交叉连接分开列名时，使用CROSS JOIN关键字而不是逗号。</p>
<p>实际上，下面两个表达式是完全等价的。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  *  <span class="keyword">FROM</span>  table1, table2 <span class="keyword">WHERE</span> table1.<span class="keyword">name</span>=table2.<span class="keyword">name</span>;</span><br><span class="line"><span class="keyword">SELECT</span>  *  <span class="keyword">FROM</span>  table1  <span class="keyword">CROSS</span> <span class="keyword">JOIN</span>  table2 <span class="keyword">WHERE</span> table1.<span class="keyword">name</span>=table2.<span class="keyword">name</span>;</span><br></pre></td></tr></table></figure></p>
<p>在使用CROSS JOIN关键字交叉连接表时，因为生成的是两个表的笛卡尔积，因而不能使用ON关键字，只能在WHERE子句中定义搜索条件。</p>
<p>事实上，直接使用CROSS JOIN很少得到想要的结果，但是，正如实例所示，作为查询的第一步，DBMS通常在FROM子句中，对连接的表进行CROSS JOIN，然后过滤得到的中间表。</p>
<h3 id="union-union-all"><a href="#union-union-all" class="headerlink" title="union,union all"></a>union,union all</h3><p>在数据库中，union和union all关键字都是将两个结果集合并为一个，但这两者从使用和效率上来说都有所不同。</p>
<p>union在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复的记录再返回结果。</p>
<p>如：<br> select <em> from test_union1<br>   union<br> select </em> from test_union2</p>
<p>这个SQL在运行时先取出两个表的结果，再用排序空间进行排序删除重复的记录，最后返回结果集，如果表数据量大的话可能会导致用磁盘进行排序。而union all只是简单的将两个结果合并后就返回。这样，如果返回的两个结果集中有重复的数据，那么返回的结果集就会包含重复的数据了。从效率上说，union all要比union快很多，所以，如果可以确认合并的两个结果集中不包含重复的数据的话，那么就使用union all，</p>
<p>如下：<br>select <em> from test_union1<br>union all<br>select </em> from test_union2</p>
<p>使用 union 组合查询的结果集有两个最基本的规则：<br>1。所有查询中的列数和列的顺序必须相同。<br>2。数据类型必须兼容</p>
<h3 id="Apache-Hive连接查询"><a href="#Apache-Hive连接查询" class="headerlink" title="Apache Hive连接查询"></a>Apache Hive连接查询</h3><p>Hive支持连接查询，但有一些条件必须遵守，比如只支持相等查询，其它查询如不等式查询则不支持，还支持外连接，左半连接查询。另外Hive支持多于两个表以上的连接查询。</p>
<ul>
<li><a href="http://blog.csdn.net/skywalker_only/article/details/39205973" target="_blank" rel="external">Hive学习之连接查询</a></li>
<li><a href="http://shiyanjun.cn/archives/588.html" target="_blank" rel="external">Hive JOIN使用详解</a><h3 id="结合explain进行执行分析"><a href="#结合explain进行执行分析" class="headerlink" title="结合explain进行执行分析"></a>结合explain进行执行分析</h3></li>
<li><a href="http://blog.csdn.net/mchdba/article/details/9190771" target="_blank" rel="external">MySQL EXPLAIN 命令详解学习</a></li>
</ul>
<h3 id="数据库设计准则"><a href="#数据库设计准则" class="headerlink" title="数据库设计准则"></a>数据库设计准则</h3><ul>
<li><p>一范式就是属性不可分割。属性是什么？就是表中的字段。不可分割的意思就按字面理解就是最小单位，不能再分成更小单位了。这个字段只能是一个值，不能被拆分成多个字段，否则的话，它就是可分割的，就不符合一范式。不过能不能分割并没有绝对的答案，看需求，也就是看你的设计目标而定。</p>
</li>
<li><p>二范式就是要有主键，要求其他字段都依赖于主键。为什么要有主键？没有主键就没有唯一性，没有唯一性在集合中就定位不到这行记录，所以要主键。其他字段为什么要依赖于主键？因为不依赖于主键，就找不到他们。更重要的是，其他字段组成的这行记录和主键表示的是同一个东西，而主键是唯一的，它们只需要依赖于主键，也就成了唯一的。</p>
</li>
<li><p>三范式就是要消除传递依赖，方便理解，可以看做是“消除冗余”。消除冗余应该比较好理解一些，就是各种信息只在一个地方存储，不出现在多张表中。</p>
</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
